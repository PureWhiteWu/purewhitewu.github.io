<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pure White</title>
  
  <subtitle>主业写bug，副业debug</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://purewhite.io/"/>
  <updated>2019-03-29T02:50:56.232Z</updated>
  <id>https://purewhite.io/</id>
  
  <author>
    <name>Pure White</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>源码剖析golang中sync.Mutex</title>
    <link href="https://purewhite.io/2019/03/28/golang-mutex-source/"/>
    <id>https://purewhite.io/2019/03/28/golang-mutex-source/</id>
    <published>2019-03-28T13:01:18.000Z</published>
    <updated>2019-03-29T02:50:56.232Z</updated>
    
    <content type="html"><![CDATA[<p>go语言以并发作为其特性之一，并发必然会带来对于资源的竞争，这时候我们就需要使用go提供的<code>sync.Mutex</code>这把互斥锁来保证临界资源的访问互斥。</p><p>既然经常会用这把锁，那么了解一下其内部实现，就能了解这把锁适用什么场景，特性如何了。</p><a id="more"></a><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>在我第一次看这段代码的时候，感觉真的是惊为天人，特别是整个<code>Mutex</code>只用到了两个私有字段，以及一次CAS就加锁的过程，这其中设计以及编程的理念真的让我感觉自愧不如。</p><p>在看<code>sync.Mutex</code>的代码的时候，一定要记住，同时会有多个goroutine会来要这把锁，所以锁的状态<code>state</code>是可能会一直更改的。</p><h2 id="锁的性质"><a href="#锁的性质" class="headerlink" title="锁的性质"></a>锁的性质</h2><p>先说结论：<code>sync.Mutex</code>是把公平锁。</p><p>在源代码中，有一段注释：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mutex fairness.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Mutex can be in 2 modes of operations: normal and starvation.</span></span><br><span class="line"><span class="comment">// In normal mode waiters are queued in FIFO order, but a woken up waiter</span></span><br><span class="line"><span class="comment">// does not own the mutex and competes with new arriving goroutines over</span></span><br><span class="line"><span class="comment">// the ownership. New arriving goroutines have an advantage -- they are</span></span><br><span class="line"><span class="comment">// already running on CPU and there can be lots of them, so a woken up</span></span><br><span class="line"><span class="comment">// waiter has good chances of losing. In such case it is queued at front</span></span><br><span class="line"><span class="comment">// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,</span></span><br><span class="line"><span class="comment">// it switches mutex to the starvation mode.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// In starvation mode ownership of the mutex is directly handed off from</span></span><br><span class="line"><span class="comment">// the unlocking goroutine to the waiter at the front of the queue.</span></span><br><span class="line"><span class="comment">// New arriving goroutines don't try to acquire the mutex even if it appears</span></span><br><span class="line"><span class="comment">// to be unlocked, and don't try to spin. Instead they queue themselves at</span></span><br><span class="line"><span class="comment">// the tail of the wait queue.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If a waiter receives ownership of the mutex and sees that either</span></span><br><span class="line"><span class="comment">// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,</span></span><br><span class="line"><span class="comment">// it switches mutex back to normal operation mode.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Normal mode has considerably better performance as a goroutine can acquire</span></span><br><span class="line"><span class="comment">// a mutex several times in a row even if there are blocked waiters.</span></span><br><span class="line"><span class="comment">// Starvation mode is important to prevent pathological cases of tail latency.</span></span><br></pre></td></tr></table></figure><p>看懂这段注释对于我们理解mutex这把锁有很大的帮助，这里面讲了这把锁的设计理念。大致意思如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公平锁</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 锁有两种模式：正常模式和饥饿模式。</span></span><br><span class="line"><span class="comment">// 在正常模式下，所有的等待锁的goroutine都会存在一个先进先出的队列中（轮流被唤醒）</span></span><br><span class="line"><span class="comment">// 但是一个被唤醒的goroutine并不是直接获得锁，而是仍然需要和那些新请求锁的（new arrivial）</span></span><br><span class="line"><span class="comment">// 的goroutine竞争，而这其实是不公平的，因为新请求锁的goroutine有一个优势——它们正在CPU上</span></span><br><span class="line"><span class="comment">// 运行，并且数量可能会很多。所以一个被唤醒的goroutine拿到锁的概率是很小的。在这种情况下，</span></span><br><span class="line"><span class="comment">// 这个被唤醒的goroutine会加入到队列的头部。如果一个等待的goroutine有超过1ms（写死在代码中）</span></span><br><span class="line"><span class="comment">// 都没获取到锁，那么就会把锁转变为饥饿模式。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 在饥饿模式中，锁的所有权会直接从释放锁(unlock)的goroutine转交给队列头的goroutine，</span></span><br><span class="line"><span class="comment">// 新请求锁的goroutine就算锁是空闲状态也不会去获取锁，并且也不会尝试自旋。它们只是排到队列的尾部。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果一个goroutine获取到了锁之后，它会判断以下两种情况：</span></span><br><span class="line"><span class="comment">// 1. 它是队列中最后一个goroutine；</span></span><br><span class="line"><span class="comment">// 2. 它拿到锁所花的时间小于1ms；</span></span><br><span class="line"><span class="comment">// 以上只要有一个成立，它就会把锁转变回正常模式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常模式会有比较好的性能，因为即使有很多阻塞的等待锁的goroutine，</span></span><br><span class="line"><span class="comment">// 一个goroutine也可以尝试请求多次锁。</span></span><br><span class="line"><span class="comment">// 饥饿模式对于防止尾部延迟来说非常的重要。</span></span><br></pre></td></tr></table></figure><p>在下一步真正看源代码之前，我们必须要理解一点：当一个goroutine获取到锁的时候，有可能没有竞争者，也有可能会有很多竞争者，那么我们就需要站在不同的goroutine的角度上去考虑goroutine看到的锁的状态和实际状态、期望状态之间的转化。</p><h2 id="字段定义"><a href="#字段定义" class="headerlink" title="字段定义"></a>字段定义</h2><p><code>sync.Mutex</code>只包含两个字段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A Mutex is a mutual exclusion lock.</span></span><br><span class="line"><span class="comment">// The zero value for a Mutex is an unlocked mutex.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A Mutex must not be copied after first use.</span></span><br><span class="line"><span class="keyword">type</span> Mutex <span class="keyword">struct</span> &#123;</span><br><span class="line">state <span class="keyword">int32</span></span><br><span class="line">sema  <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">mutexLocked = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// mutex is locked</span></span><br><span class="line">mutexWoken</span><br><span class="line">mutexStarving</span><br><span class="line">mutexWaiterShift = <span class="literal">iota</span></span><br><span class="line"></span><br><span class="line">starvationThresholdNs = <span class="number">1e6</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中<code>state</code>是一个表示锁的状态的字段，这个字段会同时被多个goroutine所共用（使用atomic.CAS来保证原子性），第0个bit（1）表示锁已被获取，也就是已加锁，被某个goroutine拥有；第1个bit（2）表示有goroutine被唤醒，尝试获取锁；第2个bit（4）标记这把锁是否为饥饿状态。</p><p><code>sema</code>字段就是用来唤醒goroutine所用的信号量。</p><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>在看代码之前，我们需要有一个概念：每个goroutine也有自己的状态，存在局部变量里面（也就是函数栈里面），goroutine有可能是新到的、被唤醒的、正常的、饥饿的。</p><h3 id="atomic-CAS"><a href="#atomic-CAS" class="headerlink" title="atomic.CAS"></a>atomic.CAS</h3><p>先瞻仰一下惊为天人的一行代码加锁的CAS操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lock locks m.</span></span><br><span class="line"><span class="comment">// If the lock is already in use, the calling goroutine</span></span><br><span class="line"><span class="comment">// blocks until the mutex is available.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Mutex)</span> <span class="title">Lock</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// Fast path: grab unlocked mutex.</span></span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class="number">0</span>, mutexLocked) &#123;</span><br><span class="line"><span class="keyword">if</span> race.Enabled &#123;</span><br><span class="line">race.Acquire(unsafe.Pointer(m))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是第一段代码，这段代码调用了<code>atomic</code>包中的<code>CompareAndSwapInt32</code>这个方法来尝试快速获取锁，这个方法的签名如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapInt32</span><span class="params">(addr *<span class="keyword">int32</span>, old, <span class="built_in">new</span> <span class="keyword">int32</span>)</span> <span class="params">(swapped <span class="keyword">bool</span>)</span></span></span><br></pre></td></tr></table></figure><p>意思是，如果addr指向的地址中存的值和old一样，那么就把addr中的值改为new并返回true；否则什么都不做，返回false。由于是<code>atomic</code>中的函数，所以是保证了原子性的。</p><p>我们来具体看看CAS的实现（src/runtime/internal/atomic/asm_amd64.s）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// bool Cas(int32 *val, int32 old, int32 new)</span><br><span class="line">// Atomically:</span><br><span class="line">//if(*val == old)&#123;</span><br><span class="line">//*val = new;</span><br><span class="line">//return 1;</span><br><span class="line">//&#125; else</span><br><span class="line">//return 0;</span><br><span class="line">// 这里参数及返回值大小加起来是17，是因为一个指针在amd64下是8字节，</span><br><span class="line">// 然后int32分别是占用4字节，最后的返回值是bool占用1字节，所以加起来是17</span><br><span class="line">TEXT runtime∕internal∕atomic·Cas(SB),NOSPLIT,$0-17 </span><br><span class="line">  // 为什么不把*val指针放到AX中呢？因为AX有特殊用处，</span><br><span class="line">  // 在下面的CMPXCHGL里面，会从AX中读取要比较的其中一个数</span><br><span class="line">MOVQptr+0(FP), BX</span><br><span class="line">// 所以AX要用来存参数old</span><br><span class="line">MOVLold+8(FP), AX</span><br><span class="line">// 把new中的数存到寄存器CX中</span><br><span class="line">MOVLnew+12(FP), CX</span><br><span class="line">// 注意这里了，这里使用了LOCK前缀，所以保证操作是原子的</span><br><span class="line">LOCK</span><br><span class="line">// 0(BX) 可以理解为 *val</span><br><span class="line">// 把 AX中的数 和 BX寄存器所指向的地址中存的值——也就是0(BX) 进行比较</span><br><span class="line">// 如果相等，就把 CX寄存器中存的值 赋给 BX寄存器所指向的地址</span><br><span class="line">// 并将标志寄存器ZF设为1</span><br><span class="line">// 否则将标志寄存器ZF清零</span><br><span class="line">CMPXCHGLCX, 0(BX)</span><br><span class="line">// SETE的作用是：</span><br><span class="line">// 如果Zero Flag标志寄存器为1，那么就把操作数设为1</span><br><span class="line">// 否则把操作数设为0</span><br><span class="line">// 也就是说，如果上面的比较相等了，就返回true，否则为false</span><br><span class="line">// ret+16(FP)代表了返回值的地址</span><br><span class="line">SETEQret+16(FP)</span><br><span class="line">RET</span><br></pre></td></tr></table></figure><p>如果看不懂也没太大关系，只要知道这个函数的作用，以及这个函数是原子性的即可。</p><p>那么这段代码的意思就是：先看看这把锁是不是空闲状态，如果是的话，直接原子性地修改一下<code>state</code>为已被获取就行了。多么简洁（虽然后面的代码并不是……）！</p><h3 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h3><p>接下来具体看主流程的代码，代码中有一些位运算看起来比较晕，我会试着用伪代码在边上注释。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lock locks m.</span></span><br><span class="line"><span class="comment">// If the lock is already in use, the calling goroutine</span></span><br><span class="line"><span class="comment">// blocks until the mutex is available.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Mutex)</span> <span class="title">Lock</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Fast path: grab unlocked mutex.</span></span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class="number">0</span>, mutexLocked) &#123;</span><br><span class="line"><span class="keyword">if</span> race.Enabled &#123;</span><br><span class="line">race.Acquire(unsafe.Pointer(m))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来存当前goroutine等待的时间</span></span><br><span class="line"><span class="keyword">var</span> waitStartTime <span class="keyword">int64</span></span><br><span class="line">  <span class="comment">// 用来存当前goroutine是否饥饿</span></span><br><span class="line">starving := <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 用来存当前goroutine是否已唤醒</span></span><br><span class="line">awoke := <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 用来存当前goroutine的循环次数(想一想一个goroutine如果循环了2147483648次咋办……)</span></span><br><span class="line">iter := <span class="number">0</span></span><br><span class="line">  <span class="comment">// 复制一下当前锁的状态</span></span><br><span class="line">old := m.state</span><br><span class="line">  <span class="comment">// 自旋</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 如果是饥饿情况之下，就不要自旋了，因为锁会直接交给队列头部的goroutine</span></span><br><span class="line">    <span class="comment">// 如果锁是被获取状态，并且满足自旋条件（canSpin见后文分析），那么就自旋等锁</span></span><br><span class="line">    <span class="comment">// 伪代码：if isLocked() and isNotStarving() and canSpin()</span></span><br><span class="line"><span class="keyword">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;</span><br><span class="line"><span class="comment">// 将自己的状态以及锁的状态设置为唤醒，这样当Unlock的时候就不会去唤醒其它被阻塞的goroutine了</span></span><br><span class="line"><span class="keyword">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class="number">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class="number">0</span> &amp;&amp;</span><br><span class="line">atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;</span><br><span class="line">awoke = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 进行自旋(分析见后文)</span></span><br><span class="line">runtime_doSpin()</span><br><span class="line">iter++</span><br><span class="line">      <span class="comment">// 更新锁的状态(有可能在自旋的这段时间之内锁的状态已经被其它goroutine改变)</span></span><br><span class="line">old = m.state</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当走到这一步的时候，可能会有以下的情况：</span></span><br><span class="line">    <span class="comment">// 1. 锁被获取+饥饿</span></span><br><span class="line">    <span class="comment">// 2. 锁被获取+正常</span></span><br><span class="line">    <span class="comment">// 3. 锁空闲+饥饿</span></span><br><span class="line">    <span class="comment">// 4. 锁空闲+正常</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// goroutine的状态可能是唤醒以及非唤醒</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制一份当前的状态，目的是根据当前状态设置出期望的状态，存在new里面，</span></span><br><span class="line">    <span class="comment">// 并且通过CAS来比较以及更新锁的状态</span></span><br><span class="line">    <span class="comment">// old用来存锁的当前状态</span></span><br><span class="line"><span class="built_in">new</span> := old</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果说锁不是饥饿状态，就把期望状态设置为被获取(获取锁)</span></span><br><span class="line">    <span class="comment">// 也就是说，如果是饥饿状态，就不要把期望状态设置为被获取</span></span><br><span class="line">    <span class="comment">// 新到的goroutine乖乖排队去</span></span><br><span class="line">    <span class="comment">// 伪代码：if isNotStarving()</span></span><br><span class="line"><span class="keyword">if</span> old&amp;mutexStarving == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="comment">// 伪代码：newState = locked</span></span><br><span class="line"><span class="built_in">new</span> |= mutexLocked</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果锁是被获取状态，或者饥饿状态</span></span><br><span class="line">    <span class="comment">// 就把期望状态中的等待队列的等待者数量+1(实际上是new + 8)</span></span><br><span class="line">    <span class="comment">// (会不会可能有三亿个goroutine等待拿锁……)</span></span><br><span class="line"><span class="keyword">if</span> old&amp;(mutexLocked|mutexStarving) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">new</span> += <span class="number">1</span> &lt;&lt; mutexWaiterShift</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果说当前的goroutine是饥饿状态，并且锁被其它goroutine获取</span></span><br><span class="line">    <span class="comment">// 那么将期望的锁的状态设置为饥饿状态</span></span><br><span class="line">    <span class="comment">// 如果锁是释放状态，那么就不用切换了</span></span><br><span class="line">    <span class="comment">// Unlock期望一个饥饿的锁会有一些等待拿锁的goroutine，而不只是一个</span></span><br><span class="line">    <span class="comment">// 这种情况下不会成立</span></span><br><span class="line"><span class="keyword">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class="number">0</span> &#123;</span><br><span class="line">      <span class="comment">// 期望状态设置为饥饿状态</span></span><br><span class="line"><span class="built_in">new</span> |= mutexStarving</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果说当前goroutine是被唤醒状态，我们需要reset这个状态</span></span><br><span class="line">    <span class="comment">// 因为goroutine要么是拿到锁了，要么是进入sleep了</span></span><br><span class="line"><span class="keyword">if</span> awoke &#123;</span><br><span class="line">      <span class="comment">// 如果说期望状态不是woken状态，那么肯定出问题了</span></span><br><span class="line">      <span class="comment">// 这里看不懂没关系，wake的逻辑在下面</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">new</span>&amp;mutexWoken == <span class="number">0</span> &#123;</span><br><span class="line">throw(<span class="string">"sync: inconsistent mutex state"</span>)</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 这句就是把new设置为非唤醒状态</span></span><br><span class="line">      <span class="comment">// &amp;^的意思是and not</span></span><br><span class="line"><span class="built_in">new</span> &amp;^= mutexWoken</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 通过CAS来尝试设置锁的状态</span></span><br><span class="line">    <span class="comment">// 这里可能是设置锁，也有可能是只设置为饥饿状态和等待数量</span></span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="built_in">new</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果说old状态不是饥饿状态也不是被获取状态</span></span><br><span class="line">      <span class="comment">// 那么代表当前goroutine已经通过CAS成功获取了锁</span></span><br><span class="line">      <span class="comment">// (能进入这个代码块表示状态已改变，也就是说状态是从空闲到被获取)</span></span><br><span class="line"><span class="keyword">if</span> old&amp;(mutexLocked|mutexStarving) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// locked the mutex with CAS</span></span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 如果之前已经等待过了，那么就要放到队列头</span></span><br><span class="line">queueLifo := waitStartTime != <span class="number">0</span></span><br><span class="line">      <span class="comment">// 如果说之前没有等待过，就初始化设置现在的等待时间</span></span><br><span class="line"><span class="keyword">if</span> waitStartTime == <span class="number">0</span> &#123;</span><br><span class="line">waitStartTime = runtime_nanotime()</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 既然获取锁失败了，就使用sleep原语来阻塞当前goroutine</span></span><br><span class="line">      <span class="comment">// 通过信号量来排队获取锁</span></span><br><span class="line">      <span class="comment">// 如果是新来的goroutine，就放到队列尾部</span></span><br><span class="line">      <span class="comment">// 如果是被唤醒的等待锁的goroutine，就放到队列头部</span></span><br><span class="line">runtime_SemacquireMutex(&amp;m.sema, queueLifo)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 这里sleep完了，被唤醒</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果当前goroutine已经是饥饿状态了</span></span><br><span class="line">      <span class="comment">// 或者当前goroutine已经等待了1ms（在上面定义常量）以上</span></span><br><span class="line">      <span class="comment">// 就把当前goroutine的状态设置为饥饿</span></span><br><span class="line">starving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs</span><br><span class="line">      <span class="comment">// 再次获取一下锁现在的状态</span></span><br><span class="line">old = m.state</span><br><span class="line">      <span class="comment">// 如果说锁现在是饥饿状态，就代表现在锁是被释放的状态，当前goroutine是被信号量所唤醒的</span></span><br><span class="line">      <span class="comment">// 也就是说，锁被直接交给了当前goroutine</span></span><br><span class="line"><span class="keyword">if</span> old&amp;mutexStarving != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// 如果说当前锁的状态是被唤醒状态或者被获取状态，或者说等待的队列为空</span></span><br><span class="line">        <span class="comment">// 那么是不可能的，肯定是出问题了，因为当前状态肯定应该有等待的队列，锁也一定是被释放状态且未唤醒</span></span><br><span class="line"><span class="keyword">if</span> old&amp;(mutexLocked|mutexWoken) != <span class="number">0</span> || old&gt;&gt;mutexWaiterShift == <span class="number">0</span> &#123;</span><br><span class="line">throw(<span class="string">"sync: inconsistent mutex state"</span>)</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 当前的goroutine获得了锁，那么就把等待队列-1</span></span><br><span class="line">delta := <span class="keyword">int32</span>(mutexLocked - <span class="number">1</span>&lt;&lt;mutexWaiterShift)</span><br><span class="line">        <span class="comment">// 如果当前goroutine非饥饿状态，或者说当前goroutine是队列中最后一个goroutine</span></span><br><span class="line">        <span class="comment">// 那么就退出饥饿模式，把状态设置为正常</span></span><br><span class="line"><span class="keyword">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// Exit starvation mode.</span></span><br><span class="line"><span class="comment">// Critical to do it here and consider wait time.</span></span><br><span class="line"><span class="comment">// Starvation mode is so inefficient, that two goroutines</span></span><br><span class="line"><span class="comment">// can go lock-step infinitely once they switch mutex</span></span><br><span class="line"><span class="comment">// to starvation mode.</span></span><br><span class="line">delta -= mutexStarving</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 原子性地加上改动的状态</span></span><br><span class="line">atomic.AddInt32(&amp;m.state, delta)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 如果锁不是饥饿模式，就把当前的goroutine设为被唤醒</span></span><br><span class="line">      <span class="comment">// 并且重置iter(重置spin)</span></span><br><span class="line">awoke = <span class="literal">true</span></span><br><span class="line">iter = <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果CAS不成功，也就是说没能成功获得锁，锁被别的goroutine获得了或者锁一直没被释放</span></span><br><span class="line">      <span class="comment">// 那么就更新状态，重新开始循环尝试拿锁</span></span><br><span class="line">old = m.state</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> race.Enabled &#123;</span><br><span class="line">race.Acquire(unsafe.Pointer(m))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为什么CAS能拿到锁呢？因为CAS会原子性地判断<code>old state</code>和当前锁的状态是否一致；而总有一个goroutine会满足以上条件成功拿锁。</p><h3 id="canSpin"><a href="#canSpin" class="headerlink" title="canSpin"></a>canSpin</h3><p>接下来我们来看看上文提到的<code>canSpin</code>条件如何：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Active spinning for sync.Mutex.</span></span><br><span class="line"><span class="comment">//go:linkname sync_runtime_canSpin sync.runtime_canSpin</span></span><br><span class="line"><span class="comment">//go:nosplit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sync_runtime_canSpin</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="comment">// 这里的active_spin是个常量，值为4</span></span><br><span class="line">  <span class="comment">// 简单来说，sync.Mutex是有可能被多个goroutine竞争的，所以不应该大量自旋(消耗CPU)</span></span><br><span class="line">  <span class="comment">// 自旋的条件如下：</span></span><br><span class="line">  <span class="comment">// 1. 自旋次数小于active_spin(这里是4)次；</span></span><br><span class="line">  <span class="comment">// 2. 在多核机器上；</span></span><br><span class="line">  <span class="comment">// 3. GOMAXPROCS &gt; 1并且至少有一个其它的处于运行状态的P；</span></span><br><span class="line">  <span class="comment">// 4. 当前P没有其它等待运行的G；</span></span><br><span class="line">  <span class="comment">// 满足以上四个条件才可以进行自旋。</span></span><br><span class="line"><span class="keyword">if</span> i &gt;= active_spin || ncpu &lt;= <span class="number">1</span> || gomaxprocs &lt;= <span class="keyword">int32</span>(sched.npidle+sched.nmspinning)+<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> p := getg().m.p.ptr(); !runqempty(p) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以可以看出来，并不是一直无限自旋下去的，当自旋次数到达4次或者其它条件不符合的时候，就改为信号量拿锁了。</p><h3 id="doSpin"><a href="#doSpin" class="headerlink" title="doSpin"></a>doSpin</h3><p>然后我们来看看<code>doSpin</code>的实现（其实也没啥好看的）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:linkname sync_runtime_doSpin sync.runtime_doSpin</span></span><br><span class="line"><span class="comment">//go:nosplit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sync_runtime_doSpin</span><span class="params">()</span></span> &#123;</span><br><span class="line">procyield(active_spin_cnt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个汇编实现的函数，简单看两眼amd64上的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TEXT runtime·procyield(SB),NOSPLIT,$0-0</span><br><span class="line">MOVLcycles+0(FP), AX</span><br><span class="line">again:</span><br><span class="line">PAUSE</span><br><span class="line">SUBL$1, AX</span><br><span class="line">JNZagain</span><br><span class="line">RET</span><br></pre></td></tr></table></figure><p>看起来没啥好看的，直接跳过吧。</p><h2 id="Unlock"><a href="#Unlock" class="headerlink" title="Unlock"></a>Unlock</h2><p>接下来我们来看看Unlock的实现，对于Unlock来说，有两个比较关键的特性：</p><ol><li>如果说锁不是处于locked状态，那么对锁执行Unlock会导致panic；</li><li>锁和goroutine没有对应关系，所以我们完全可以在goroutine 1中获取到锁，然后在goroutine 2中调用Unlock来释放锁（这是什么骚操作！）（虽然不推荐大家这么干……）</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Mutex)</span> <span class="title">Unlock</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> race.Enabled &#123;</span><br><span class="line">_ = m.state</span><br><span class="line">race.Release(unsafe.Pointer(m))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fast path: drop lock bit.</span></span><br><span class="line">  <span class="comment">// 这里获取到锁的状态，然后将状态减去被获取的状态(也就是解锁)，称为new(期望)状态</span></span><br><span class="line">  <span class="comment">// 注意以上两个操作是原子的，所以不用担心多个goroutine并发的问题</span></span><br><span class="line"><span class="built_in">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)</span><br><span class="line">  <span class="comment">// 如果说，期望状态加上被获取的状态，不是被获取的话</span></span><br><span class="line">  <span class="comment">// 那么就panic</span></span><br><span class="line">  <span class="comment">// 在这里给大家提一个问题：干嘛要这么大费周章先减去再加上，直接比较一下原来锁的状态是否被获取不就完事了？</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">new</span>+mutexLocked)&amp;mutexLocked == <span class="number">0</span> &#123;</span><br><span class="line">throw(<span class="string">"sync: unlock of unlocked mutex"</span>)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 如果说new状态(也就是锁的状态)不是饥饿状态</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">new</span>&amp;mutexStarving == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="comment">// 复制一下原先状态</span></span><br><span class="line">old := <span class="built_in">new</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="comment">// 如果说锁没有等待拿锁的goroutine</span></span><br><span class="line">      <span class="comment">// 或者锁被获取了(在循环的过程中被其它goroutine获取了)</span></span><br><span class="line">      <span class="comment">// 或者锁是被唤醒状态(表示有goroutine被唤醒，不需要再去尝试唤醒其它goroutine)</span></span><br><span class="line">      <span class="comment">// 或者锁是饥饿模式(会直接转交给队列头的goroutine)</span></span><br><span class="line">      <span class="comment">// 那么就直接返回，啥都不用做了</span></span><br><span class="line"><span class="keyword">if</span> old&gt;&gt;mutexWaiterShift == <span class="number">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 走到这一步的时候，说明锁目前还是空闲状态，并且没有goroutine被唤醒且队列中有goroutine等待拿锁</span></span><br><span class="line">      <span class="comment">// 那么我们就要把锁的状态设置为被唤醒，等待队列-1</span></span><br><span class="line"><span class="built_in">new</span> = (old - <span class="number">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken</span><br><span class="line">      <span class="comment">// 又是熟悉的CAS</span></span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="built_in">new</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果状态设置成功了，我们就通过信号量去唤醒goroutine</span></span><br><span class="line">runtime_Semrelease(&amp;m.sema, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 循环结束的时候，更新一下状态，因为有可能在执行的过程中，状态被修改了(比如被Lock改为了饥饿状态)</span></span><br><span class="line">old = m.state</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是饥饿状态下，那么我们就直接把锁的所有权通过信号量移交给队列头的goroutine就好了</span></span><br><span class="line">    <span class="comment">// handoff = true表示直接把锁交给队列头部的goroutine</span></span><br><span class="line">    <span class="comment">// 注意：在这个时候，锁被获取的状态没有被设置，会由被唤醒的goroutine在唤醒后设置</span></span><br><span class="line">    <span class="comment">// 但是当锁处于饥饿状态的时候，我们也认为锁是被获取的(因为我们手动指定了获取的goroutine)</span></span><br><span class="line">    <span class="comment">// 所以说新来的goroutine不会尝试去获取锁(在Lock中有体现)</span></span><br><span class="line">runtime_Semrelease(&amp;m.sema, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据以上代码的分析，可以看出，<code>sync.Mutex</code>这把锁在你的工作负载（所需时间）比较低，比如只是对某个关键变量赋值的时候，性能还是比较好的，但是如果说对于临界资源的操作耗时很长（特别是单个操作就大于1ms）的话，实际上性能上会有一定的问题，这也就是我们经常看到的”锁一直处于饥饿状态”的问题，对于这种情况，可能就需要另寻他法了。</p><p>好了，至此整个<code>sync.Mutex</code>的分析就此结束了，虽然只有短短200行代码（包括150行注释，实际代码估计就50行），但是其中的算法、设计的思想、编程的理念却是值得感悟，所谓大道至简、少即是多可能就是如此吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go语言以并发作为其特性之一，并发必然会带来对于资源的竞争，这时候我们就需要使用go提供的&lt;code&gt;sync.Mutex&lt;/code&gt;这把互斥锁来保证临界资源的访问互斥。&lt;/p&gt;
&lt;p&gt;既然经常会用这把锁，那么了解一下其内部实现，就能了解这把锁适用什么场景，特性如何了。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://purewhite.io/categories/go/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="go" scheme="https://purewhite.io/tags/go/"/>
    
      <category term="asm" scheme="https://purewhite.io/tags/asm/"/>
    
  </entry>
  
  <entry>
    <title>golang逃逸分析</title>
    <link href="https://purewhite.io/2019/03/25/golang-escape-check/"/>
    <id>https://purewhite.io/2019/03/25/golang-escape-check/</id>
    <published>2019-03-24T16:22:51.000Z</published>
    <updated>2019-03-25T03:56:50.684Z</updated>
    
    <content type="html"><![CDATA[<p>带GC语言给我们程序的编写带来了极大的便利，但是与此同时屏蔽了很多底层的细节，比如一个对象是在栈上分配还是在堆上分配。对于普通的代码来说虽然不需要关心这么多，但是作为强迫症程序猿，还是希望能让自己写出来的代码性能最优，所以还是需要了解什么是逃逸，以及如何判断是否发生了逃逸。</p><a id="more"></a><h2 id="什么是堆和栈？"><a href="#什么是堆和栈？" class="headerlink" title="什么是堆和栈？"></a>什么是堆和栈？</h2><p>首先需要知道，我们说的堆和栈是啥。这个可不是数据结构里面的”堆”和”栈”，而是操作系统里面的概念。</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>在程序中，每个函数块都会有自己的内存区域用来存自己的局部变量（内存占用少）、返回地址、返回值之类的数据，这一块内存区域有特定的结构和寻址方式，大小在编译时已经确定，寻址起来也十分迅速，开销很少。这一块内存地址称为栈。栈是线程级别的，大小在创建的时候已经确定，所以当数据太大的时候，就会发生”stack overflow”。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>在程序中，全局变量、内存占用大的局部变量、发生了逃逸的局部变量存在的地方就是堆，这一块内存没有特定的结构，也没有固定的大小，可以根据需要进行调整。简单来说，有大量数据要存的时候，就存在堆里面。堆是进程级别的。当一个变量需要分配在堆上的时候，开销会比较大，对于go这种带GC的语言来说，也会增加gc压力，同时也容易造成内存碎片。</p><h2 id="为什么有的变量要分配在堆，有的要分配在栈？"><a href="#为什么有的变量要分配在堆，有的要分配在栈？" class="headerlink" title="为什么有的变量要分配在堆，有的要分配在栈？"></a>为什么有的变量要分配在堆，有的要分配在栈？</h2><p>这个问题要从C++说起了。在C++中，假设我们有以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">f1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> &amp;i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *i = f1();</span><br><span class="line">  *i = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候程序结果是无法预期的，因为在函数f1中，i是一个局部变量，会分配在栈上，而栈在函数返回之后就失效了(Plan9 汇编中SP指针被修改)，于是i的地址所存的值是不可预期的，后续在main中对返回的i的地址中的值的修改可能会修改掉程序运行的数据，造成结果无法预期。</p><p>所以对于需要返回一个地址回去的情况，在C++中需要用new来分配一块堆上的内存才行，因为堆是进程级别的，也就是全局的，除非程序猿手动释放，否则不会被回收（释放不好会段错误，忘了释放会内存泄漏），于是就可以使得这个地址不会再被使用到，可以安全地返回。</p><h2 id="如何进行逃逸分析？"><a href="#如何进行逃逸分析？" class="headerlink" title="如何进行逃逸分析？"></a>如何进行逃逸分析？</h2><p>在golang中，所有内存都是由runtime管理的，程序猿不需要关心具体变量分配在哪里，什么时候回收，但是编译器需要知道这一点，这样才能确定函数栈帧大小、哪些变量需要”new”在堆上，所以编译器需要进行<code>逃逸分析</code>。简单来说，<code>逃逸分析</code>决定了一个变量是分配在栈上还是分配在堆上。</p><p>golang逃逸分析最基本的原则是：<code>如果一个函数返回的是一个（局部）变量的地址，那么这个变量就发生逃逸</code>。</p><p>在golang里面，变量分配在何处和是否使用new无关，意味着程序猿无法手动指定某个变量必须分配在栈上或者堆上(自己撸asm的当我没说)，所以我们需要通过一些方法来确定某个变量到底是分配在了栈上还是堆上。</p><p>我们用以下代码作为例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := f1()</span><br><span class="line">*a++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:noinline</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span> *<span class="title">int</span></span> &#123;</span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> &amp;i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，给f1增加了noinline标记，让go编译器不要将函数内联。</p><h3 id="使用编译参数"><a href="#使用编译参数" class="headerlink" title="使用编译参数"></a>使用编译参数</h3><p>golang提供了编译的参数让我们可以直观地看到变量是否发生了逃逸，只需要在go build时指定 <code>-gcflags &#39;-m&#39;</code>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go build -gcflags <span class="string">'-m'</span> escape.go</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">command</span>-line-arguments</span></span><br><span class="line">./escape.go:3:6: can inline main</span><br><span class="line">./escape.go:11:9: &amp;i escapes to heap</span><br><span class="line">./escape.go:10:2: moved to heap: i</span><br></pre></td></tr></table></figure><p>这样可以很直观地看到在第10、11行，i发生了逃逸，内存会分配在堆上。</p><p>除了使用编译参数之外，我们还可以使用一种更底层的，更硬核，也更准确的方式来判断一个对象是否逃逸，那就是：直接看汇编！</p><h3 id="使用汇编"><a href="#使用汇编" class="headerlink" title="使用汇编"></a>使用汇编</h3><p>我们使用<code>go tool compile -S</code>生成汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go tool compile -S escape.go | grep escape.go:10</span><br><span class="line">0x001d 00029 (escape.go:10)PCDATA$2, $1</span><br><span class="line">0x001d 00029 (escape.go:10)PCDATA$0, $0</span><br><span class="line">0x001d 00029 (escape.go:10)LEAQtype.int(SB), AX</span><br><span class="line">0x0024 00036 (escape.go:10)PCDATA$2, $0</span><br><span class="line">0x0024 00036 (escape.go:10)MOVQAX, (SP)</span><br><span class="line">0x0028 00040 (escape.go:10)CALLruntime.newobject(SB)</span><br><span class="line">0x002d 00045 (escape.go:10)PCDATA$2, $1</span><br><span class="line">0x002d 00045 (escape.go:10)MOVQ8(SP), AX</span><br><span class="line">0x0032 00050 (escape.go:10)MOVQ$1, (AX)</span><br></pre></td></tr></table></figure><p>可以看到，这里的00040有调用<code>runtime.newobject(SB)</code>这个方法，看到这个方法大家就应该懂了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上提供了两种方法可以用来判断某个变量是否发生了逃逸，其中使用编译参数比较简单，使用汇编比较硬核。通过这两种方法分析完逃逸，就能进一步优化堆上内存数量，减轻GC压力了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;带GC语言给我们程序的编写带来了极大的便利，但是与此同时屏蔽了很多底层的细节，比如一个对象是在栈上分配还是在堆上分配。对于普通的代码来说虽然不需要关心这么多，但是作为强迫症程序猿，还是希望能让自己写出来的代码性能最优，所以还是需要了解什么是逃逸，以及如何判断是否发生了逃逸。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://purewhite.io/categories/go/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="go" scheme="https://purewhite.io/tags/go/"/>
    
      <category term="asm" scheme="https://purewhite.io/tags/asm/"/>
    
  </entry>
  
  <entry>
    <title>算法详解：最长上升子序列</title>
    <link href="https://purewhite.io/2018/07/25/lis/"/>
    <id>https://purewhite.io/2018/07/25/lis/</id>
    <published>2018-07-24T16:46:52.000Z</published>
    <updated>2019-03-18T06:14:06.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个长度为n的数列<code>a0, a1, a2...an-1</code>，求出这个序列中的最长的上升子序列的长度，上升子序列的定义为：对于任意的<code>i&lt;j</code>，都满足<code>ai&lt;aj</code>。</p><a id="more"></a><p><strong>限制条件：</strong>1≤n≤1000，0≤a≤1000000</p><p><strong>样例：</strong></p><p>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = 5</span><br><span class="line">a = &#123;4, 2, 3, 1, 5&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>（a1, a2, a4构成的子序列<span class="number">2</span>，<span class="number">3</span>，<span class="number">5</span>最长）</span><br></pre></td></tr></table></figure><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这个问题就是著名的最长上升子序列（LIS，Longest  Increasing Subsequence）问题，这个问题有两种解法，第一种解法是O(n²)的DP解法，第二种解法是O(nlogn)的DP加二分解法。</p><h2 id="O-n²-算法"><a href="#O-n²-算法" class="headerlink" title="O(n²)算法"></a>O(n²)算法</h2><p>首先我们可以来建立一下DP的递推关系：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义dp<span class="string">[i]</span>:=以ai为末尾的最长上升子序列的长度</span><br></pre></td></tr></table></figure><p>以ai结尾的上升子序列是：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只包含ai的子序列</span><br><span class="line">在满足<span class="built_in">j</span>&lt;<span class="built_in">i</span>并且aj&lt;ai的以aj为结尾的上升子列末尾，追加上ai后得到的子序列</span><br></pre></td></tr></table></figure><p>这二者之一。这样就能得到如下的递推关系：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="built_in">i</span>]=<span class="built_in">max</span>&#123;<span class="number">1</span>, dp[<span class="built_in">j</span>]+<span class="number">1</span>|<span class="built_in">j</span>&lt;<span class="built_in">i</span>且aj&lt;ai&#125;</span><br></pre></td></tr></table></figure><p>使用这个递推公式可以在O(n²)时间内解决这个问题。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i]) &#123;</span><br><span class="line">                dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = max(res, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法比较简单，但是时间复杂度也比较高。下面我们来看看更优的解法。</p><h2 id="O-nlogn"><a href="#O-nlogn" class="headerlink" title="O(nlogn)"></a>O(nlogn)</h2><p>之前我们的思路是求出以第i个元素为结尾的最长上升子序列长度，我们可以换个思路，考虑一下<code>dp[i]</code>为<code>最长上升子序列长度为i情况下最小的元素</code>，这样我们就可以通过二分来进行优化，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fill(dp, dp+n, INF);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        *lower_bound(dp, dp + n, a[i]) = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lower_bound(dp, dp + n, INF) - dp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个长度为n的数列&lt;code&gt;a0, a1, a2...an-1&lt;/code&gt;，求出这个序列中的最长的上升子序列的长度，上升子序列的定义为：对于任意的&lt;code&gt;i&amp;lt;j&lt;/code&gt;，都满足&lt;code&gt;ai&amp;lt;aj&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://purewhite.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://purewhite.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://purewhite.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 428. x的n次幂</title>
    <link href="https://purewhite.io/2018/07/11/lintcode-powx-n/"/>
    <id>https://purewhite.io/2018/07/11/lintcode-powx-n/</id>
    <published>2018-07-11T08:43:16.000Z</published>
    <updated>2019-03-18T06:14:06.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>实现 pow(x,n)</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>不用担心精度，当答案和标准输出差绝对值小于<code>1e-3</code>时都算正确</p><a id="more"></a><h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pow(<span class="number">2.1</span>, <span class="number">3</span>) = <span class="number">9.261</span></span><br><span class="line">Pow(<span class="number">0</span>, <span class="number">1</span>) = <span class="number">0</span></span><br><span class="line">Pow(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>从数学上来说，<code>(x)的4次方</code> 等于 <code>(x的平方)的平方</code>。我们使用这个思想来做这道题就行了。</p><p>其实就和把十进制数转成二进制的思想是一样的。</p><p>需要注意的地方是，n可能为负数。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param: x: the base number</span></span><br><span class="line"><span class="string">    @param: n: the power number</span></span><br><span class="line"><span class="string">    @return: the result</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        t = x</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            t = <span class="number">1</span> / t</span><br><span class="line">            n = -n</span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                ans *= t</span><br><span class="line">            t *= t</span><br><span class="line">            n = int(n / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;实现 pow(x,n)&lt;/p&gt;
&lt;h5 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h5&gt;&lt;p&gt;不用担心精度，当答案和标准输出差绝对值小于&lt;code&gt;1e-3&lt;/code&gt;时都算正确&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://purewhite.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://purewhite.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LintCode" scheme="https://purewhite.io/tags/LintCode/"/>
    
      <category term="数据结构" scheme="https://purewhite.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 460.在排序数组中找最接近的K个数</title>
    <link href="https://purewhite.io/2018/07/11/lintcode-find-k-closest-elements/"/>
    <id>https://purewhite.io/2018/07/11/lintcode-find-k-closest-elements/</id>
    <published>2018-07-11T08:15:34.000Z</published>
    <updated>2019-03-18T06:14:06.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给一个目标数 target, 一个非负整数 <code>k</code>, 一个按照升序排列的数组 A。在A中找与target最接近的k个整数。返回这k个数并按照与target的接近程度从小到大排序，如果接近程度相当，那么小的数排在前面。</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>The value k is a non-negative integer and will always be smaller than the length of the sorted array.</p><p>Length of the given array is positive and will not exceed 10^4</p><p>Absolute value of elements in the array and x will not exceed 10^4</p><a id="more"></a><h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><p>如果 A = <code>[1, 2, 3]</code>, target = <code>2</code> and k = <code>3</code>, 那么返回 <code>[2, 1, 3]</code>.</p><p>如果 A = <code>[1, 4, 6, 8]</code>, target = <code>3</code> and k = <code>3</code>, 那么返回 <code>[4, 1, 6]</code>.</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题的一般解法都很容易想出来，暴力出奇迹嘛，这里我们只说最优解，也就是 O(logn + k) 的时间复杂度 的解法。</p><p>这道题的解题关键是数组A是有序的，只要有序就可以考虑用二分。</p><p>我们通过对A进行二分，找到最接近target的数，找到之后用双指针的思想，依次从找到的那个数向两边扩散，直到满足k个数为止。</p><p>思路较为简单，编码过程注意一些边界条件的判断即可。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param A: an integer array</span></span><br><span class="line"><span class="string">    @param target: An integer</span></span><br><span class="line"><span class="string">    @param k: An integer</span></span><br><span class="line"><span class="string">    @return: an integer array</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kClosestNumbers</span><span class="params">(self, A, target, k)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        lp = <span class="literal">None</span></span><br><span class="line">        rp = <span class="literal">None</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = len(A) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</span><br><span class="line">            mid = int(start + (end - start) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> A[mid] == target:</span><br><span class="line">                start = mid</span><br><span class="line">                end = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> A[mid] &lt; target:</span><br><span class="line">                start = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = mid</span><br><span class="line">        <span class="keyword">if</span> abs(A[start] - target) &lt;= abs(A[start] - target):</span><br><span class="line">            lp = start</span><br><span class="line">            rp = end</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lp = end</span><br><span class="line">            rp = end + <span class="number">1</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        ans = list()</span><br><span class="line">        <span class="keyword">while</span> cnt &lt; k:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> lp &lt; <span class="number">0</span> <span class="keyword">and</span> rp &gt;= len(A):</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            <span class="keyword">elif</span> lp &lt; <span class="number">0</span>:</span><br><span class="line">                ans.append(A[rp])</span><br><span class="line">                rp += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> rp &gt;= len(A):</span><br><span class="line">                ans.append(A[lp])</span><br><span class="line">                lp -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> abs(A[lp] - target) &lt;= abs(A[rp] - target):</span><br><span class="line">                ans.append(A[lp])</span><br><span class="line">                lp -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(A[rp])</span><br><span class="line">                rp += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给一个目标数 target, 一个非负整数 &lt;code&gt;k&lt;/code&gt;, 一个按照升序排列的数组 A。在A中找与target最接近的k个整数。返回这k个数并按照与target的接近程度从小到大排序，如果接近程度相当，那么小的数排在前面。&lt;/p&gt;
&lt;h5 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h5&gt;&lt;p&gt;The value k is a non-negative integer and will always be smaller than the length of the sorted array.&lt;/p&gt;
&lt;p&gt;Length of the given array is positive and will not exceed 10^4&lt;/p&gt;
&lt;p&gt;Absolute value of elements in the array and x will not exceed 10^4&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://purewhite.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://purewhite.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LintCode" scheme="https://purewhite.io/tags/LintCode/"/>
    
      <category term="数据结构" scheme="https://purewhite.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CKAD 也考出来啦！</title>
    <link href="https://purewhite.io/2018/07/08/ckad/"/>
    <id>https://purewhite.io/2018/07/08/ckad/</id>
    <published>2018-07-08T00:03:38.000Z</published>
    <updated>2019-03-18T06:14:03.293Z</updated>
    
    <content type="html"><![CDATA[<p>2018年7月6日考了一下ckad，结果如下：</p><p><img src="https://static.purewhite.io/images/2018-07-08-000553.png" alt="image-20180708080553575"></p><a id="more"></a><p>分数如下：</p><p><img src="https://static.purewhite.io/images/2018-07-08-000620.png" alt="image-20180708080620320"></p><p>解锁成就：同时拥有CKA和CKAD认证。</p><p>可以让媳妇儿给我做顿好的了。</p><p>CKA详见：<a href="https://purewhite.io/2018/06/16/cka/">CKA 认证，持证上岗</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年7月6日考了一下ckad，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.purewhite.io/images/2018-07-08-000553.png&quot; alt=&quot;image-20180708080553575&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="Linux" scheme="https://purewhite.io/tags/Linux/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="system" scheme="https://purewhite.io/tags/system/"/>
    
      <category term="开源" scheme="https://purewhite.io/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Service Mesh Istio 初探</title>
    <link href="https://purewhite.io/2018/06/27/service-mesh-0/"/>
    <id>https://purewhite.io/2018/06/27/service-mesh-0/</id>
    <published>2018-06-27T03:41:13.000Z</published>
    <updated>2019-03-18T06:14:07.604Z</updated>
    
    <content type="html"><![CDATA[<p>早在去年，Service Mesh这个概念就开始火起来了，今年的时候Service Mesh更是爆发式地发展，Service Mesh中的明星项目Istio更是只用了几个月的时间就已经从0.1到了0.8 LTS了。由于工作和毕业的压力，之前一直没有时间深入研究Service Mesh。现在稍微有些时间了，所以打算写点什么关于Service Mesh的。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>首先，我们需要了解一下什么是Service Mesh。今天我们的主角是Istio，Istio的背景我不过多介绍，G家等大厂搞出来并且在后面推动支持的肯定不会弱。</p><p>根据Istio的官方文档，是这么定义自己的：一个用来连接、管理和加密微服务（流量）的开放平台。</p><blockquote><p>an open platform to connect, manage, and secure microservices</p></blockquote><p>Istio可以让你在不修改微服务源代码的情况之下，很轻松地给微服务加上诸如负载均衡、身份验证、监控等等的功能。Istio通过在你的微服务中部署一个sidecar作为所有流量的代理来达成这个目标。</p><p>总结下来，Istio提供了以下功能：</p><ul><li>流量管理（Traffic Management）</li><li>服务的身份认证和安全（Service Identity and Security）</li><li>策略配置（Policy Enforcement）</li><li>遥感（Telemetry）</li></ul><p>除了这些之外，Istio还支持很多不同的平台（尤其是Kubernetes），并且支持自定义的组件和集成。</p><p>通过这些功能，微服务的开发和迁移会变得非常容易，而运维人员也可以更方便的更改部署的策略。</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>Istio是两层架构的，分别是<strong>数据层</strong>和<strong>控制层</strong>：</p><ul><li>数据层是由所有的部署为sidecar的Envoy所组成的。</li><li>控制层有三个组件：Pilot、Mixer和Citadel，顾名思义是用来控制Service Mesh的行为的。</li></ul><p>总体的架构如下图：</p><p><img src="https://istio.io/docs/concepts/what-is-istio/img/overview/arch.svg" alt="Istio Architecture"></p><h2 id="Envoy"><a href="#Envoy" class="headerlink" title="Envoy"></a>Envoy</h2><p>Istio用了一个扩展版本的Envoy作为底层的代理。Envoy是一个用C++开发的高性能的代理，具有非常多功能，具体的可以参考官方文档，在此不做赘述。</p><p>Envoy在Istio中是以sidecar模式部署在pod里面的，Istio通过控制Envoy来控制所有的流量，获取监控数据等。</p><h2 id="Mixer"><a href="#Mixer" class="headerlink" title="Mixer"></a>Mixer</h2><p>Mixer是一个平台无关的组件，用来控制访问策略和使用策略，同时会收集监控信息，将收集到的信息传给用户可以自定义的后端进行处理。</p><h2 id="Pilot"><a href="#Pilot" class="headerlink" title="Pilot"></a>Pilot</h2><p>Pilot为Envoy提供服务发现、智能路由（如AB测试、金丝雀部署）和弹性流量管理功能（如超时、重试、熔断）。它负责将高层的抽象的路由规则转化成低级的envoy的配置。</p><h2 id="Citadel"><a href="#Citadel" class="headerlink" title="Citadel"></a>Citadel</h2><p>Citadel提供了服务间和服务到终端用户的认证，同时可以直接将http流量升级成https流量。具体的可以查看官方文档。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在这里我打算使用helm进行安装。</p><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><p>首先，你得有一个可运行的k8s集群，我是在gke上开了一个三节点的集群作为测试使用。</p><p>其次，你得需要有helm的客户端。mac用户可以通过brew来安装。</p><h2 id="下载release"><a href="#下载release" class="headerlink" title="下载release"></a>下载release</h2><p>Istio提供了一个很方便的脚本来下载并解压最新版的Istio，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -L https://git.io/getLatestIstio | sh -</span></span><br></pre></td></tr></table></figure><p>等下载完之后，我们可以进入文件夹，并把bin目录加到path里面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> istio-0.8.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="variable">$PWD</span>/bin:<span class="variable">$PATH</span></span></span><br></pre></td></tr></table></figure><h2 id="使用helm进行安装"><a href="#使用helm进行安装" class="headerlink" title="使用helm进行安装"></a>使用helm进行安装</h2><p>要使用helm来安装istio，首先需要在集群里面配置好helm和tiller，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f install/kubernetes/helm/helm-service-account.yaml</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> helm init --service-account tiller</span></span><br></pre></td></tr></table></figure><p>等helm和tiller配置完之后，就可以使用helm来一键安装Istio了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm install install/kubernetes/helm/istio --name istio --namespace istio-system</span></span><br></pre></td></tr></table></figure><p>这样，Istio就安装好了。</p><p>为了验证安装是否成功，我们可以看一下是否部署了以下的service：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get svc -n istio-system</span></span><br><span class="line">NAME                       TYPE           CLUSTER-IP      EXTERNAL-IP       PORT(S)                                                               AGE</span><br><span class="line">istio-citadel              ClusterIP      10.19.247.33    &lt;none&gt;            8060/TCP,9093/TCP                                                     2m</span><br><span class="line">istio-egressgateway        ClusterIP      10.19.244.143   &lt;none&gt;            80/TCP,443/TCP                                                        2m</span><br><span class="line">istio-ingress              LoadBalancer   10.19.248.42    104.199.155.220   80:32000/TCP,443:30434/TCP                                            2m</span><br><span class="line">istio-ingressgateway       LoadBalancer   10.19.254.155   35.229.183.83     80:31380/TCP,443:31390/TCP,31400:31400/TCP                            2m</span><br><span class="line">istio-pilot                ClusterIP      10.19.252.30    &lt;none&gt;            15003/TCP,15005/TCP,15007/TCP,15010/TCP,15011/TCP,8080/TCP,9093/TCP   2m</span><br><span class="line">istio-policy               ClusterIP      10.19.242.187   &lt;none&gt;            9091/TCP,15004/TCP,9093/TCP                                           2m</span><br><span class="line">istio-sidecar-injector     ClusterIP      10.19.252.155   &lt;none&gt;            443/TCP                                                               2m</span><br><span class="line">istio-statsd-prom-bridge   ClusterIP      10.19.246.99    &lt;none&gt;            9102/TCP,9125/UDP                                                     2m</span><br><span class="line">istio-telemetry            ClusterIP      10.19.240.18    &lt;none&gt;            9091/TCP,15004/TCP,9093/TCP,42422/TCP                                 2m</span><br><span class="line">prometheus                 ClusterIP      10.19.255.53    &lt;none&gt;            9090/TCP                                                              2m</span><br></pre></td></tr></table></figure><p>并且确认以下的Pod是否在running状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pods -n istio-system</span></span><br><span class="line">NAME                                       READY     STATUS      RESTARTS   AGE</span><br><span class="line">istio-citadel-7bdc7775c7-ntfkf             1/1       Running     0          3m</span><br><span class="line">istio-egressgateway-795fc9b47-2hw69        1/1       Running     0          3m</span><br><span class="line">istio-ingress-84659cf44c-dkgf4             1/1       Running     0          3m</span><br><span class="line">istio-ingressgateway-7d89dbf85f-9kgth      1/1       Running     0          3m</span><br><span class="line">istio-mixer-post-install-vg5gh             0/1       Completed   0          3m</span><br><span class="line">istio-pilot-66f4dd866c-nwr2j               2/2       Running     0          3m</span><br><span class="line">istio-policy-76c8896799-7l9nz              2/2       Running     0          3m</span><br><span class="line">istio-sidecar-injector-645c89bc64-6rs5k    1/1       Running     0          3m</span><br><span class="line">istio-statsd-prom-bridge-949999c4c-mpk6d   1/1       Running     0          3m</span><br><span class="line">istio-telemetry-6554768879-vqmjd           2/2       Running     0          3m</span><br><span class="line">prometheus-86cb6dd77c-vhf9s                1/1       Running     0          3m</span><br></pre></td></tr></table></figure><p>当然，我们也可以自定义一些参数，具体的请看<a href="$ helm install [install/kubernetes/helm/istio](https://raw.githubusercontent.com/istio/istio/release-0.8/install/kubernetes/helm/istio">官方文档</a> –name istio –namespace istio-system)。</p><h1 id="样例应用"><a href="#样例应用" class="headerlink" title="样例应用"></a>样例应用</h1><p>让我们部署我们的一个样例应用来看看Istio到底干了啥。</p><p>我们的样例应用叫做BookInfo，这个应用由四个微服务所组成，具体架构图如下：</p><p><img src="https://istio.io/docs/guides/img/bookinfo/noistio.svg" alt="Bookinfo Application without Istio"></p><p>这个应用是用不同的语言所写的，让我们来见识一下Istio的魔力吧。</p><p>安装这个应用非常简单，我们只要执行以下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> istioctl create -f samples/bookinfo/routing/bookinfo-gateway.yaml</span></span><br></pre></td></tr></table></figure><p>我们可以注意一下，在<code>bookinfo.yaml</code>中的manifest如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright 2017 Istio Authors</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">#   you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">#   You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">#   distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">#   See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">#   limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################################################</span></span><br><span class="line"><span class="comment"># Details service</span></span><br><span class="line"><span class="comment">##################################################################################################</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">details</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">details</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">9080</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">details</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">details-v1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">details</span></span><br><span class="line"><span class="attr">        version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">details</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">istio/examples-bookinfo-details-v1:1.5.0</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">9080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>但是我们真正部署出来后，变成了这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">sidecar.istio.io/status:</span> <span class="string">'&#123;"version":"55c9e544b52e1d4e45d18a58d0b34ba4b72531e45fb6d1572c77191422556ffc","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-certs"],"imagePullSecrets":null&#125;'</span></span><br><span class="line"><span class="attr">  creationTimestamp:</span> <span class="number">2018</span><span class="bullet">-07</span><span class="bullet">-05</span><span class="attr">T09:10:55Z</span></span><br><span class="line"><span class="attr">  generateName:</span> <span class="string">details-v1-5f94c6d66b-</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">details</span></span><br><span class="line"><span class="attr">    pod-template-hash:</span> <span class="string">"1950728226"</span></span><br><span class="line"><span class="attr">    version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">details-v1-5f94c6d66b-jj6lz</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  ownerReferences:</span></span><br><span class="line"><span class="attr">  - apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">    blockOwnerDeletion:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    controller:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">details-v1-5f94c6d66b</span></span><br><span class="line"><span class="attr">    uid:</span> <span class="number">528</span><span class="string">aa360-8033-11e8-8cec-0e04fb7e7092</span></span><br><span class="line"><span class="attr">  resourceVersion:</span> <span class="string">"15620"</span></span><br><span class="line"><span class="attr">  selfLink:</span> <span class="string">/api/v1/namespaces/default/pods/details-v1-5f94c6d66b-jj6lz</span></span><br><span class="line"><span class="attr">  uid:</span> <span class="number">528</span><span class="string">d5618-8033-11e8-8cec-0e04fb7e7092</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">istio/examples-bookinfo-details-v1:1.5.0</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">details</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">    - containerPort:</span> <span class="number">9080</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">    terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line"><span class="attr">    terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - mountPath:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">default-token-f9mls</span></span><br><span class="line"><span class="attr">      readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  - args:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">proxy</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sidecar</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--configPath</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/etc/istio/proxy</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--binaryPath</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/usr/local/bin/envoy</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--serviceCluster</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">details</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--drainDuration</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">45</span><span class="string">s</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--parentShutdownDuration</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">1</span><span class="string">m0s</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--discoveryAddress</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">istio-pilot.istio-system:15007</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--discoveryRefreshDelay</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--zipkinAddress</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">zipkin.istio-system:9411</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--connectTimeout</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--statsdUdpAddress</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">istio-statsd-prom-bridge.istio-system:9125</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--proxyAdminPort</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"15000"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--controlPlaneAuthPolicy</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">NONE</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">POD_NAME</span></span><br><span class="line"><span class="attr">      valueFrom:</span></span><br><span class="line"><span class="attr">        fieldRef:</span></span><br><span class="line"><span class="attr">          apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">          fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line"><span class="attr">      valueFrom:</span></span><br><span class="line"><span class="attr">        fieldRef:</span></span><br><span class="line"><span class="attr">          apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">          fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">INSTANCE_IP</span></span><br><span class="line"><span class="attr">      valueFrom:</span></span><br><span class="line"><span class="attr">        fieldRef:</span></span><br><span class="line"><span class="attr">          apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">          fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">ISTIO_META_POD_NAME</span></span><br><span class="line"><span class="attr">      valueFrom:</span></span><br><span class="line"><span class="attr">        fieldRef:</span></span><br><span class="line"><span class="attr">          apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">          fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">ISTIO_META_INTERCEPTION_MODE</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">REDIRECT</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">docker.io/istio/proxyv2:0.8.0</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">istio-proxy</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="attr">      requests:</span></span><br><span class="line"><span class="attr">        cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">        memory:</span> <span class="number">128</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">    securityContext:</span></span><br><span class="line"><span class="attr">      privileged:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      runAsUser:</span> <span class="number">1337</span></span><br><span class="line"><span class="attr">    terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line"><span class="attr">    terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - mountPath:</span> <span class="string">/etc/istio/proxy</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">istio-envoy</span></span><br><span class="line"><span class="attr">    - mountPath:</span> <span class="string">/etc/certs/</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">istio-certs</span></span><br><span class="line"><span class="attr">      readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    - mountPath:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">default-token-f9mls</span></span><br><span class="line"><span class="attr">      readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line"><span class="attr">  initContainers:</span></span><br><span class="line"><span class="attr">  - args:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-p</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"15001"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-u</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"1337"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-m</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">REDIRECT</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-i</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-x</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">""</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-b</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9080</span><span class="string">,</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-d</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">docker.io/istio/proxy_init:0.8.0</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">istio-init</span></span><br><span class="line"><span class="attr">    resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">    securityContext:</span></span><br><span class="line"><span class="attr">      capabilities:</span></span><br><span class="line"><span class="attr">        add:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">NET_ADMIN</span></span><br><span class="line"><span class="attr">      privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line"><span class="attr">    terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - mountPath:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">default-token-f9mls</span></span><br><span class="line"><span class="attr">      readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  nodeName:</span> <span class="string">ip-172-31-39-23</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">  schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="attr">  securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  serviceAccount:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  serviceAccountName:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">  tolerations:</span></span><br><span class="line"><span class="attr">  - effect:</span> <span class="string">NoExecute</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">node.kubernetes.io/not-ready</span></span><br><span class="line"><span class="attr">    operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">    tolerationSeconds:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">  - effect:</span> <span class="string">NoExecute</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">node.kubernetes.io/unreachable</span></span><br><span class="line"><span class="attr">    operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">    tolerationSeconds:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - emptyDir:</span></span><br><span class="line"><span class="attr">      medium:</span> <span class="string">Memory</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">istio-envoy</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">istio-certs</span></span><br><span class="line"><span class="attr">    secret:</span></span><br><span class="line"><span class="attr">      defaultMode:</span> <span class="number">420</span></span><br><span class="line"><span class="attr">      optional:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      secretName:</span> <span class="string">istio.default</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">default-token-f9mls</span></span><br><span class="line"><span class="attr">    secret:</span></span><br><span class="line"><span class="attr">      defaultMode:</span> <span class="number">420</span></span><br><span class="line"><span class="attr">      secretName:</span> <span class="string">default-token-f9mls</span></span><br></pre></td></tr></table></figure><p>可以看到，本来只有一个container的，现在里面多了一个container和initContainer。这个就是Istio的Auto Injection，可以自动把sidecar注入到Pod里面，让我们不需要手动一个一个修改yaml文件，也防止手动修改过程中出错的可能。</p><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><p>这里我们以路由设置为例子。</p><p>首先我们打开刚才部署好的这个应用的网页，可以看到页面右方的Book Reviews部分里面每次刷新都会随机性地出现黑星星、红星星和没有星星三种情况，这是因为我们有三个不同的backend，路由在默认情况下会随机路由到任意一个backend上。</p><p>我们先尝试把所有的路由都路由到v1版本上（就是没有星星的版本），路由规则如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">details</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">details</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">  - route:</span></span><br><span class="line"><span class="attr">    - destination:</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">details</span></span><br><span class="line"><span class="attr">        subset:</span> <span class="string">v1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">productpage</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> istioctl create -f samples/bookinfo/routing/route-rule-all-v1.yaml</span></span><br></pre></td></tr></table></figure><p>然后我们再去刷新，就会发现不管怎么刷新星星都不见了。</p><p>接着，假如我们有一个用户是jason，我们希望他能测试v2的backend，就可以用下面的路由规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">reviews</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">reviews</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">  - match:</span></span><br><span class="line"><span class="attr">    - headers:</span></span><br><span class="line"><span class="attr">        cookie:</span></span><br><span class="line"><span class="attr">          regex:</span> <span class="string">^(.*?;)?(user=jason)(;.*)?$</span></span><br><span class="line"><span class="attr">    route:</span></span><br><span class="line"><span class="attr">    - destination:</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">reviews</span></span><br><span class="line"><span class="attr">        subset:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">  - route:</span></span><br><span class="line"><span class="attr">    - destination:</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">reviews</span></span><br><span class="line"><span class="attr">        subset:</span> <span class="string">v1</span></span><br></pre></td></tr></table></figure><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> istioctl replace -f samples/bookinfo/routing/route-rule-reviews-test-v2.yaml</span></span><br></pre></td></tr></table></figure><p>这时候，我们打开网页，以jason这个用户登录（密码随便填），就会发现每一次访问到的都是带有黑星星的版本。</p><p>这就是Istio提供的路由功能。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文中我们简单讲了Service Mesh的概念，如何创建Istio以及简单的使用过程，如果大家有兴趣探索Istio更多的功能，可以直接访问<a href="https://istio.io/" target="_blank" rel="noopener">Istio的官网</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早在去年，Service Mesh这个概念就开始火起来了，今年的时候Service Mesh更是爆发式地发展，Service Mesh中的明星项目Istio更是只用了几个月的时间就已经从0.1到了0.8 LTS了。由于工作和毕业的压力，之前一直没有时间深入研究Service Mesh。现在稍微有些时间了，所以打算写点什么关于Service Mesh的。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
      <category term="Service Mesh" scheme="https://purewhite.io/tags/Service-Mesh/"/>
    
  </entry>
  
  <entry>
    <title>CKA 认证，持证上岗</title>
    <link href="https://purewhite.io/2018/06/16/cka/"/>
    <id>https://purewhite.io/2018/06/16/cka/</id>
    <published>2018-06-16T00:39:27.000Z</published>
    <updated>2019-03-18T06:14:03.241Z</updated>
    
    <content type="html"><![CDATA[<p>2018年6月14日考了一下cka，结果如下：</p><p><img src="https://static.purewhite.io/images/2018-06-16-004432.png" alt="image-20180616084432007"></p><a id="more"></a><p><img src="https://static.purewhite.io/images/2018-06-16-004444.png" alt="image-20180616084444239"></p><p>以后我就是持证上岗啦哈哈哈！</p><p>祝愿我ckad也能考过！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年6月14日考了一下cka，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.purewhite.io/images/2018-06-16-004432.png&quot; alt=&quot;image-20180616084432007&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="Linux" scheme="https://purewhite.io/tags/Linux/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="system" scheme="https://purewhite.io/tags/system/"/>
    
      <category term="开源" scheme="https://purewhite.io/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>如何用技术变现 —— 左耳朵耗子专栏记录</title>
    <link href="https://purewhite.io/2018/06/14/skill-sell-off/"/>
    <id>https://purewhite.io/2018/06/14/skill-sell-off/</id>
    <published>2018-06-14T05:35:58.000Z</published>
    <updated>2019-03-18T06:14:07.771Z</updated>
    
    <content type="html"><![CDATA[<p>昨天购买了左耳朵耗子的<a href="http://stuq.com/a/100aD" target="_blank" rel="noopener">付费专栏</a>，拜读了前几篇文章，受益匪浅，故总结并写下此文作为记录。</p><a id="more"></a><p>程序员是手艺人，是靠手艺靠技术吃饭的人，那么怎么样能通过自己的手艺自己的技术赚钱呢？简单来说，就是别人不行的，你可以，这才是核心。在别的文章中也看到过类似概念，大同小异，强调的都是<strong>不可替代性</strong>。</p><p>那么问题就变成了：如何让自己的“手艺”更值钱，更无法替代？</p><p>耗子哥总结下来，一共是有以下几点：</p><ol><li><p>千里之行，积于跬步。不可能一蹴而就，肯定需要脚踏实地一点一点积累才可以，厚积而薄发。需要自己比别人更多地去学习新的技术和技能，有别人没有的经验和经历。</p></li><li><p>关注有价值的东西。这一段我认为我无法总结得更好，所以直接引用原文：</p><blockquote><p>什么是有价值的东西？价值其实是受供需关系影响的，供大于求，就没什么价值，供不应求，就有价值。这意味着你不仅要看到市场，还要看到技术的趋势，能够分辨出什么是主流技术，什么是过渡式的技术。当你比别人有更好的嗅觉时，你就能起动得更快，也就比别人有先发优势。</p><ul><li><strong>关于市场需求</strong>。要看清市场，就需要看看各个公司在做什么，他们的难题是什么。简单来说，现在的每家公司无论大小都缺人。是真的缺人吗？中国是人口大国，不缺写代码搬砖的，真正缺的是有能力能够解决技术难题的人，能够提高团队人效的人。所以，从这些方面思考，你会知道哪些技能才是真正的“供不应求”，这样可以让你更有价值。</li><li><strong>关于技术趋势</strong>。要看清技术趋势，你需要了解历史，就像一个球运动一样，你要知道这个球未来运动的地方，是需要观察球的已经完成运动的轨迹才知道的。因此，了解技术发展轨迹是一件很重要的事。要看一个新的技术是否顺应技术发展趋势，你需要将一些老技术的本质吃得很透。</li></ul><p>因此，在学习技术的过程一定要多问自己两个问题：“1. 这个技术解决什么问题？为什么别的同类技术做不到？2. 为什么是这样解决的？有没有更好的方式？”另外，还有一个简单的判断方法，如果一个新的技术顺应技术发展趋势，那么在这个新的技术出现时，后面一定会有大型的商业公司支持，这类公司支持得越多，就说明你越需要关注。</p></blockquote></li><li><p>找到能体现价值的地方。在一家高速发展的公司中，技术人员的价值可以最大化。这就要求自己一定要能找到一个高速发展的公司以及一个高速发展的领域。</p></li><li><p>动手能力很重要。简单来说，就是要会写代码！细节是魔鬼！而不是做一个ppt架构师！</p></li><li><p>关注技术付费点。技术付费点在耗子哥的总结里面有两个地方：一个是能帮别人挣钱的地方，一个是能帮别人省钱的地方。这也是所有技术的核心竞争力。</p></li><li><p>提升自己的能力和经历。别人要付费给你，前提是信任你，所以你需要提升自己的能力和经历才可以使得别人愿意信任你付费给你。</p></li><li><p>找到有价值的信息源。这个是程序猿基本功了，不再赘述。</p></li><li><p>输出观点和价值观。同样的，需要积跬步，厚积而薄发。</p></li><li><p>朋友圈很重要。你和谁在一起，就会成为什么样的人。物以类聚，人以群分。</p></li></ol><p>最后套用耗子哥的结束语吧，我也认为无法提炼地更好了：</p><blockquote><p>总之，就一句话，<strong>会挣钱的人一定是会投资的人</strong>。我一直认为，<strong>最宝贵的财富并不是钱，而是你的时间，时间比钱更宝贵，因为钱你不用还在那里，而时间你不用就浪费掉了。你把你的时间投资在哪些地方，就意味着你未来会走什么样的路。所以，利用好你的时间，投到一些有意义的地方吧</strong>。</p></blockquote><p>最后附上耗子哥专栏海报：</p><p><img src="https://static.purewhite.io/images/2018-06-14-063400.png" alt="image-20180614143359989"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天购买了左耳朵耗子的&lt;a href=&quot;http://stuq.com/a/100aD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;付费专栏&lt;/a&gt;，拜读了前几篇文章，受益匪浅，故总结并写下此文作为记录。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://purewhite.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://purewhite.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心得" scheme="https://purewhite.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>若饭液体版v3.1评测</title>
    <link href="https://purewhite.io/2018/06/13/ruffood-evaluate/"/>
    <id>https://purewhite.io/2018/06/13/ruffood-evaluate/</id>
    <published>2018-06-13T06:32:51.000Z</published>
    <updated>2019-03-18T06:14:07.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>很久之前就看到大学室友有吃过若饭，当时还推荐给我不过我当时忙于写（撸）代（啊）码（撸）并没有理，昨天在网上又碰巧看到了若饭，于是抱着吃螃蟹的心态打算买来尝一尝。</p><p>若饭是一种代餐食品（饮料？），是为了那些忙的没时间吃饭的人所设计的，据说创始人原来也是程序猿，忙的没法吃饭，于是自己瞎鼓捣出了一些用来解决吃饭问题的混合物，自己吃下来觉得不错，于是想以此创业。</p><a id="more"></a><p>若饭目前有三个产品线，分别是：</p><ol><li>V1.x，代餐豆</li><li>V2.x，粉末版</li><li>V3.x，液体版</li></ol><p>昨天我买了粉末版和液体版的，付完钱已经4点了，联系客服说3点30快递走得第二天发货，但是我就说我之后不方便收快递，于是客服马上联系了仓库，仓库说已经下班了，客服说给我叫个顺丰发货，在这里赞一个 饭桶@若饭 。</p><p>发了顺丰今天早上8点多就送到了，速度飞快，一共就花了大概十几个小时从湖州发货到上海。</p><h1 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h1><p>本来以为再怎么也得等下班回家才能拿到，没想到一早上刚准备出门上班就遇上了来送若饭的快递小哥。</p><p>若饭包装如下：</p><p><img src="https://static.purewhite.io/images/2018-06-13-065035.png" alt="image-20180613145034726"></p><p>粉末版的包装如下：</p><p><img src="https://static.purewhite.io/images/2018-06-13-065109.png" alt="image-20180613145108927"></p><p><img src="https://static.purewhite.io/images/2018-06-13-065129.png" alt="image-20180613145128818"></p><p>买了粉末版，套餐里面还送了一个搅拌杯和量勺：</p><p><img src="https://static.purewhite.io/images/2018-06-13-065229.png" alt="image-20180613145228863"></p><p><img src="https://static.purewhite.io/images/2018-06-13-065318.png" alt="image-20180613145318586"></p><p><img src="https://static.purewhite.io/images/2018-06-13-065357.png" alt="image-20180613145357287"></p><p>对于粉末版而言，需要自己冲泡。由于时间关系，今天打算使用的是V3.1液体版：</p><p><img src="https://static.purewhite.io/images/2018-06-13-065538.png" alt="image-20180613145537598"></p><p><img src="https://static.purewhite.io/images/2018-06-13-065614.png" alt="image-20180613145614640"></p><h1 id="评测"><a href="#评测" class="headerlink" title="评测"></a>评测</h1><p>总算等到中午了，可以开始吃若饭了。今天带了一瓶液体版的来公司当做午餐。液体版的瓶口有密封措施，不过有缺口，很容易打开，设计的不错。</p><p>摇晃均匀后，打开瓶盖，颜色是咖啡色的。尝了第一口，感觉里面有点粉末状的东西没有溶解在液体中，应该是各种蛋白粉之类的物质，口感由于有粉末状的物质在里面混着，所以多多少少受了一点影响，不是我预计中的丝滑或者类似饮料的口感。味道比较淡，带有一点点的咖啡的味道，还有豆奶的味道混杂在一起，其中豆制品的味道较为明显，应该和其中有豆类成分是相关的。</p><p>虽然前几口喝下去并没有什么惊艳的感觉，味道也不是那种特别出众的味道，但是还是挺经喝的，因为在喝完几口之后品味了一下，有种欲望想要接着去再喝几口。仔细思考下来，应该是口味特意做成这样的，不容易让人腻。</p><p>人体每天需要多少营养，若饭配比如何在这里不论，官网和包装上都有很多数据，而且在没有各种仪器测量的情况之下无法得出结论；但是若饭确实能给人带来饱腹感——虽然不知道原理是什么——在喝了半瓶之后就已经觉得自己饱了，这样看来可能确实一瓶的量是能给人带来3-4小时饱腹感的，并没有夸大其词。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>若饭作为新型代餐类食品（饮料），抓住了人们吃饭的这个痛点问题，并且提出了一种解决方案，从方便和健康的角度尝试解决这个问题，主要的好处还是食用方便而且营养科学合理，能够节省下来吃饭的时间，比如像我现在可以写一段代码，在思考的时候喝几口若饭就能解决午餐，同时也不用去考虑吃的是否健康。如果是对口味口感上要求很高的话，也许若饭并不能在口味口感上做得很好。</p><p>接着，聊一下价格相关的事情，除了若饭的V2.x的袋装粉末版（需要自己冲泡及清洗杯子）价格还属于尚可之外，别的产品（比如瓶装粉末版，喝完直接扔瓶子）的价格对我这种工薪阶层的人来说还是偏贵一些，不过这也正常，毕竟现在越来越多的消费是拿去买了方便的体验，而并非仅仅是物质上的价值。若饭的本质其实就是医院肠胃科的肠内营养素，只不过医院不会把这种东西做得这么方便人们食用，也不会卖给健康人，而若饭做到了将科学合理配比的饮食做得非常方便去食用，从这个角度来说我认为若饭其实属于附加价值高的商品，而不是类似于大多数的别的零食饮料，是以成本为主的。</p><p>总而言之，若饭可以使得吃饭变得简单、健康、快速，但是吃久了可能会觉得口腹之欲没能满足，还是会想要吃一些好吃的口味重的东西。若饭可以在工作特别忙的时候用来应急当做快速午餐，平时不忙的时候去吃普通的饭菜，这样交替的去食用可能是更好的方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;p&gt;很久之前就看到大学室友有吃过若饭，当时还推荐给我不过我当时忙于写（撸）代（啊）码（撸）并没有理，昨天在网上又碰巧看到了若饭，于是抱着吃螃蟹的心态打算买来尝一尝。&lt;/p&gt;
&lt;p&gt;若饭是一种代餐食品（饮料？），是为了那些忙的没时间吃饭的人所设计的，据说创始人原来也是程序猿，忙的没法吃饭，于是自己瞎鼓捣出了一些用来解决吃饭问题的混合物，自己吃下来觉得不错，于是想以此创业。&lt;/p&gt;
    
    </summary>
    
      <category term="好吃的" scheme="https://purewhite.io/categories/%E5%A5%BD%E5%90%83%E7%9A%84/"/>
    
    
      <category term="随笔" scheme="https://purewhite.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="好吃的" scheme="https://purewhite.io/tags/%E5%A5%BD%E5%90%83%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 415.有效回文串</title>
    <link href="https://purewhite.io/2018/03/30/lintcode-valid-palindrome/"/>
    <id>https://purewhite.io/2018/03/30/lintcode-valid-palindrome/</id>
    <published>2018-03-30T10:02:44.000Z</published>
    <updated>2019-03-18T06:14:06.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定一个字符串，判断其是否为一个回文串。只包含字母和数字，忽略大小写。</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>你是否考虑过，字符串有可能是空字符串？这是面试过程中，面试官常常会问的问题。</p><p>在这个题目中，我们将空字符串判定为有效回文。</p><a id="more"></a><h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><p><code>&quot;A man, a plan, a canal: Panama&quot;</code> 是一个回文。</p><p><code>&quot;race a car&quot;</code> 不是一个回文。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题的思路很简单，先把给定字符串预处理一下，先只选择其中的字母和数据，再全部变成小写（大写），然后根据回文串的性质左右两边进行比较即可。</p><p>坑点在于题意中的注意事项说的，如果是空串的情况。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param s: A string</span></span><br><span class="line"><span class="string">    @return: Whether the string is a valid palindrome</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="comment"># edge condition</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># pre-process</span></span><br><span class="line">        real = [ch.lower() <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> ch.isalnum()]</span><br><span class="line">        <span class="comment"># solve</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = len(real) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            <span class="keyword">if</span> real[i] != real[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给定一个字符串，判断其是否为一个回文串。只包含字母和数字，忽略大小写。&lt;/p&gt;
&lt;h5 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h5&gt;&lt;p&gt;你是否考虑过，字符串有可能是空字符串？这是面试过程中，面试官常常会问的问题。&lt;/p&gt;
&lt;p&gt;在这个题目中，我们将空字符串判定为有效回文。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://purewhite.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://purewhite.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LintCode" scheme="https://purewhite.io/tags/LintCode/"/>
    
      <category term="数据结构" scheme="https://purewhite.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 627.最长回文串</title>
    <link href="https://purewhite.io/2018/03/30/lintcode-longest-palindrome/"/>
    <id>https://purewhite.io/2018/03/30/lintcode-longest-palindrome/</id>
    <published>2018-03-30T09:10:06.000Z</published>
    <updated>2019-03-18T06:14:06.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给出一个包含大小写字母的字符串。求出由这些字母构成的最长的回文串的长度是多少。</p><p>数据是大小写敏感的，也就是说，<code>&quot;Aa&quot;</code> 并不会被认为是一个回文串。</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>假设字符串的长度不会超过 <code>1010</code>。</p><a id="more"></a><h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><p>给出 s = <code>&quot;abccccdd&quot;</code> 返回 <code>7</code></p><p>一种可以构建出来的最长回文串方案是 <code>&quot;dccaccd&quot;</code>。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>看到题目，第一个关键是看到，这道题只要求长度即可，不需要求出具体的回文串，所以会方便很多。</p><p>既然只要求出长度，那么一定是有一些简单的方法算出来不用求出具体的回文串到底如何的。</p><p>那我们就思考，要组成回文串需要什么样的条件呢？</p><ol><li>单个字母，放在回文串中间，一定是回文串</li><li>两个相同的字母，一定能组成回文串</li><li>两个或者多个不同的字母，一定不能组成回文串</li></ol><p>这里的关键是第二点，两个相同的字母一定能组成回文串，所以我们就先考虑一下，如果一个字母在给定字符串中出现了偶数次数，那么一定能组成回文串。</p><p>那如果一个字母出现了奇数次呢？</p><p>思考一下就能想到，奇数次的出现次数，等于偶数次+1。</p><p>根据上面的第一和第三点，如果说有出现奇数次的字母，那么这些字母中可以选择一个放在回文串中间，这样长度可以+1。</p><p>最后剩下的就是一些边界情况处理了，比如，如果所有的字母都出现偶数次。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param s: a string which consists of lowercase or uppercase letters</span></span><br><span class="line"><span class="string">    @return: the length of the longest palindromes that can be built</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        odd = list()</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> odd:</span><br><span class="line">                odd.append(ch)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                odd.remove(ch)</span><br><span class="line"></span><br><span class="line">        num = len(odd)</span><br><span class="line">        <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> len(s) - num</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h1&gt;&lt;p&gt;给出一个包含大小写字母的字符串。求出由这些字母构成的最长的回文串的长度是多少。&lt;/p&gt;
&lt;p&gt;数据是大小写敏感的，也就是说，&lt;code&gt;&amp;quot;Aa&amp;quot;&lt;/code&gt; 并不会被认为是一个回文串。&lt;/p&gt;
&lt;h5 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h5&gt;&lt;p&gt;假设字符串的长度不会超过 &lt;code&gt;1010&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://purewhite.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://purewhite.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LintCode" scheme="https://purewhite.io/tags/LintCode/"/>
    
      <category term="数据结构" scheme="https://purewhite.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Helm进行本地开发</title>
    <link href="https://purewhite.io/2018/01/17/helm-local-dev/"/>
    <id>https://purewhite.io/2018/01/17/helm-local-dev/</id>
    <published>2018-01-17T04:49:30.000Z</published>
    <updated>2019-03-18T06:14:04.391Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a>是kubernetes的官方包管理工具。根据官网上的描述<code>Helm is the best way to find, share, and use software built for Kubernetes.</code>可以看出helm在kubernetes社区中的定位。</p><p>这篇文章并不是helm的入门文章，而是着重于如何在本地开发chart。希望进行helm入门的同学可以参考官方文档。</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文会分为两个部分来探讨如何在本地开发chart，分别是：</p><ul><li>Chart的规范</li><li>Helm提供的本地开发功能</li></ul><h1 id="Chart的规范"><a href="#Chart的规范" class="headerlink" title="Chart的规范"></a>Chart的规范</h1><p>根据定义，一个Chart是一些有相关性的Kubernetes资源的集合。一个chart可以是一个简单的应用，比如memcached，或者是一个复杂的集合，比如一个full-stack的web的应用，含有server，ui，database，cache等等。</p><p>Chart从本质上只不过是一些文件，不过这些文件需要满足一定的规范，比如目录的规范和文件名的规范。</p><h2 id="Chart的目录结构"><a href="#Chart的目录结构" class="headerlink" title="Chart的目录结构"></a>Chart的目录结构</h2><p>根据规定，符合如下目录结构的目录就是一个Chart，目录名即为Chart名（不包含版本信息）：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wordpress/</span><br><span class="line">  Chart.yaml          <span class="comment"># A YAML file containing information about the chart</span></span><br><span class="line">  LICENSE             <span class="comment"># OPTIONAL: A plain text file containing the license for the chart</span></span><br><span class="line">  README.md           <span class="comment"># OPTIONAL: A human-readable README file</span></span><br><span class="line">  requirements.yaml   <span class="comment"># OPTIONAL: A YAML file listing dependencies for the chart</span></span><br><span class="line">  values.yaml         <span class="comment"># The default configuration values for this chart</span></span><br><span class="line">  charts/             <span class="comment"># OPTIONAL: A directory containing any charts upon which this chart depends.</span></span><br><span class="line">  templates/          <span class="comment"># OPTIONAL: A directory of templates that, when combined with values,</span></span><br><span class="line">                      <span class="comment"># will generate valid Kubernetes manifest files.</span></span><br><span class="line">  templates/NOTES.txt <span class="comment"># OPTIONAL: A plain text file containing short usage notes</span></span><br></pre></td></tr></table></figure><p>虽然这里看到charts和templates文件夹都是optional的，但是至少需要有一个存在，chart才是合法的。</p><h2 id="Chart-yaml文件"><a href="#Chart-yaml文件" class="headerlink" title="Chart.yaml文件"></a>Chart.yaml文件</h2><p>每个Chart都必须有一个<code>Chart.yaml</code>文件，这个文件的内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">The</span> <span class="string">name</span> <span class="string">of</span> <span class="string">the</span> <span class="string">chart</span> <span class="string">(required)</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">A</span> <span class="string">SemVer</span> <span class="number">2</span> <span class="string">version</span> <span class="string">(required)</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">single-sentence</span> <span class="string">description</span> <span class="string">of</span> <span class="string">this</span> <span class="string">project</span> <span class="string">(optional)</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">A</span> <span class="string">list</span> <span class="string">of</span> <span class="string">keywords</span> <span class="string">about</span> <span class="string">this</span> <span class="string">project</span> <span class="string">(optional)</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">The</span> <span class="string">URL</span> <span class="string">of</span> <span class="string">this</span> <span class="string">project's</span> <span class="string">home</span> <span class="string">page</span> <span class="string">(optional)</span></span><br><span class="line"><span class="attr">sources:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">A</span> <span class="string">list</span> <span class="string">of</span> <span class="string">URLs</span> <span class="string">to</span> <span class="string">source</span> <span class="string">code</span> <span class="string">for</span> <span class="string">this</span> <span class="string">project</span> <span class="string">(optional)</span></span><br><span class="line"><span class="attr">maintainers:</span> <span class="comment"># (optional)</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">The</span> <span class="string">maintainer's</span> <span class="string">name</span> <span class="string">(required</span> <span class="string">for</span> <span class="string">each</span> <span class="string">maintainer)</span></span><br><span class="line"><span class="attr">    email:</span> <span class="string">The</span> <span class="string">maintainer's</span> <span class="string">email</span> <span class="string">(optional</span> <span class="string">for</span> <span class="string">each</span> <span class="string">maintainer)</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">A</span> <span class="string">URL</span> <span class="string">for</span> <span class="string">the</span> <span class="string">maintainer</span> <span class="string">(optional</span> <span class="string">for</span> <span class="string">each</span> <span class="string">maintainer)</span></span><br><span class="line"><span class="attr">engine:</span> <span class="string">gotpl</span> <span class="comment"># The name of the template engine (optional, defaults to gotpl)</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">A</span> <span class="string">URL</span> <span class="string">to</span> <span class="string">an</span> <span class="string">SVG</span> <span class="string">or</span> <span class="string">PNG</span> <span class="string">image</span> <span class="string">to</span> <span class="string">be</span> <span class="string">used</span> <span class="string">as</span> <span class="string">an</span> <span class="string">icon</span> <span class="string">(optional).</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="string">The</span> <span class="string">version</span> <span class="string">of</span> <span class="string">the</span> <span class="string">app</span> <span class="string">that</span> <span class="string">this</span> <span class="string">contains</span> <span class="string">(optional).</span> <span class="string">This</span> <span class="string">needn't</span> <span class="string">be</span> <span class="string">SemVer.</span></span><br><span class="line"><span class="attr">deprecated:</span> <span class="string">Whether</span> <span class="string">or</span> <span class="string">not</span> <span class="string">this</span> <span class="string">chart</span> <span class="string">is</span> <span class="string">deprecated</span> <span class="string">(optional,</span> <span class="string">boolean)</span></span><br><span class="line"><span class="attr">tillerVersion:</span> <span class="string">The</span> <span class="string">version</span> <span class="string">of</span> <span class="string">Tiller</span> <span class="string">that</span> <span class="string">this</span> <span class="string">chart</span> <span class="string">requires.</span> <span class="string">This</span> <span class="string">should</span> <span class="string">be</span> <span class="string">expressed</span> <span class="string">as</span> <span class="string">a</span> <span class="string">SemVer</span> <span class="attr">range:</span> <span class="string">"&gt;2.0.0"</span> <span class="string">(optional)</span></span><br></pre></td></tr></table></figure><h2 id="Chart的版本"><a href="#Chart的版本" class="headerlink" title="Chart的版本"></a>Chart的版本</h2><p>每个Chart都必须有一个版本号，版本号必须遵守<a href="http://semver.org/" target="_blank" rel="noopener">语义化版本规范V2</a>。每个package（Chart打包后的东西）同时由name和version来唯一确定。</p><p>比如，一个叫做<code>nginx</code>的版本为<code>1.2.3</code>的Chart，打包后就是<code>nginx-1.2.3.tgz</code>。</p><p>更复杂的语义化版本号是被支持的，比如<code>version: 1.2.3-alpha.1+ef365</code>但是非语义化的版本是不被允许的。</p><p>Helm和Tiller都会使用Chart的名称+版本来唯一标识一个package，所以Chart.yaml里面的版本一定要对应package的文件名。</p><h2 id="appVersion"><a href="#appVersion" class="headerlink" title="appVersion"></a>appVersion</h2><p>appVersion其实并没啥用，只是指定了Chart包含的应用的版本，对helm和tiller来说并不会有啥影响，也不需要和Chart的version一致。自己随便写都可以……</p><h2 id="Deprecating-Chart"><a href="#Deprecating-Chart" class="headerlink" title="Deprecating Chart"></a>Deprecating Chart</h2><p>可以通过在<code>Chart.yaml</code>里面把<code>deprecated</code>设为<code>true</code>来标识一个Chart已经是deprecated状态。</p><h2 id="License，ReadME和Notes"><a href="#License，ReadME和Notes" class="headerlink" title="License，ReadME和Notes"></a>License，ReadME和Notes</h2><p>一个Chart还可以有License来标识License信息，README.md来包含一些介绍信息，以及一个templates/NOTES.txt文件来指导如何去安装或者使用。</p><p>templates/NOTES.txt文件会被当做普通的template来对待（意味着其中可以有变量），并且会在每次<code>helm status</code>之后和<code>helm install</code>之后被打印到STDOUT。</p><p>比如<code>stable/mysql</code>的NOTES.txt如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">MySQL can be accessed via<span class="built_in"> port </span>3306 on the following<span class="built_in"> DNS </span>name <span class="keyword">from</span> within your cluster:</span><br><span class="line">&#123;&#123; template <span class="string">"mysql.fullname"</span> . &#125;&#125;.&#123;&#123; .Release.Namespace &#125;&#125;.svc.cluster.local</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> <span class="builtin-name">get</span> your root password run:</span><br><span class="line"></span><br><span class="line">    <span class="attribute">MYSQL_ROOT_PASSWORD</span>=$(kubectl <span class="builtin-name">get</span><span class="built_in"> secret </span>--namespace &#123;&#123; .Release.Namespace &#125;&#125; &#123;&#123; template <span class="string">"mysql.fullname"</span> . &#125;&#125; -o <span class="attribute">jsonpath</span>=<span class="string">"&#123;.data.mysql-root-password&#125;"</span> | base64 --decode; echo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> connect <span class="keyword">to</span> your database:</span><br><span class="line"></span><br><span class="line">1. <span class="builtin-name">Run</span> an Ubuntu pod that you can use as a client:</span><br><span class="line"></span><br><span class="line">    kubectl <span class="builtin-name">run</span> -i --tty ubuntu <span class="attribute">--image</span>=ubuntu:16.04 <span class="attribute">--restart</span>=Never -- bash -il</span><br><span class="line"></span><br><span class="line">2. Install the mysql client:</span><br><span class="line"></span><br><span class="line">    $ apt-<span class="builtin-name">get</span> update &amp;&amp; apt-<span class="builtin-name">get</span> install mysql-client -y</span><br><span class="line"></span><br><span class="line">3. Connect using the mysql cli, then provide your password:</span><br><span class="line">    $ mysql -h &#123;&#123; template <span class="string">"mysql.fullname"</span> . &#125;&#125; -p</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> connect <span class="keyword">to</span> your database directly <span class="keyword">from</span> outside the K8s cluster:</span><br><span class="line">    &#123;&#123;- <span class="keyword">if</span> contains <span class="string">"NodePort"</span> .Values.service.type &#125;&#125;</span><br><span class="line">    <span class="attribute">MYSQL_HOST</span>=$(kubectl <span class="builtin-name">get</span> nodes --namespace &#123;&#123; .Release.Namespace &#125;&#125; -o <span class="attribute">jsonpath</span>=<span class="string">'&#123;.items[0].status.addresses[0].address&#125;'</span>)</span><br><span class="line">    <span class="attribute">MYSQL_PORT</span>=$(kubectl <span class="builtin-name">get</span> svc --namespace &#123;&#123; .Release.Namespace &#125;&#125; &#123;&#123; template <span class="string">"mysql.fullname"</span> . &#125;&#125; -o <span class="attribute">jsonpath</span>=<span class="string">'&#123;.spec.ports[0].nodePort&#125;'</span>)</span><br><span class="line"></span><br><span class="line">    &#123;&#123;- <span class="keyword">else</span> <span class="keyword">if</span> contains <span class="string">"ClusterIP"</span> .Values.service.type &#125;&#125;</span><br><span class="line">    <span class="attribute">MYSQL_HOST</span>=127.0.0.1</span><br><span class="line">    MYSQL_PORT=&#123;&#123;<span class="built_in"> default </span><span class="string">"3306"</span> .Values.service.port &#125;&#125;</span><br><span class="line"></span><br><span class="line">    # Execute the following commands <span class="keyword">to</span><span class="built_in"> route </span>the connection:</span><br><span class="line">    <span class="builtin-name">export</span> <span class="attribute">POD_NAME</span>=$(kubectl <span class="builtin-name">get</span> pods --namespace &#123;&#123; .Release.Namespace &#125;&#125; -l <span class="string">"app=&#123;&#123; template "</span>mysql.fullname<span class="string">" . &#125;&#125;"</span> -o <span class="attribute">jsonpath</span>=<span class="string">"&#123;.items[0].metadata.name&#125;"</span>)</span><br><span class="line">    kubectl port-forward <span class="variable">$POD_NAME</span> &#123;&#123;<span class="built_in"> default </span><span class="string">"3306"</span> .Values.service.port &#125;&#125;:&#123;&#123;<span class="built_in"> default </span><span class="string">"3306"</span> .Values.service.port &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">    mysql -h <span class="variable">$&#123;MYSQL_HOST&#125;</span> -P<span class="variable">$&#123;MYSQL_PORT&#125;</span> -u root -p<span class="variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span></span><br></pre></td></tr></table></figure><p>可以看出来，NOTES.txt是用来给用户作使用上的指导的。</p><h2 id="Chart的依赖"><a href="#Chart的依赖" class="headerlink" title="Chart的依赖"></a>Chart的依赖</h2><p>我们都知道，软件开发过程中，复用是一个很重要的概念，同样的，Chart也可以依赖于其它的Chart，可以复用其它的Chart的内容。</p><h3 id="使用requirements-yaml"><a href="#使用requirements-yaml" class="headerlink" title="使用requirements.yaml"></a>使用requirements.yaml</h3><p>Helm提供了两种对Chart复用的方法，第一种是在<code>requirements.yaml</code>中指定依赖的Chart，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">1.2</span><span class="number">.3</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="attr">http://example.com/charts</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">3.2</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="attr">http://another.example.com/charts</span></span><br></pre></td></tr></table></figure><p>如果说需要对一个chart复用多次，可以这么干：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parentchart/requirements.yaml</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">subchart</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="attr">http://localhost:10191</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">    alias:</span> <span class="string">new-subchart-1</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">subchart</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="attr">http://localhost:10191</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">    alias:</span> <span class="string">new-subchart-2</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">subchart</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="attr">http://localhost:10191</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>除此之外，Helm还可以选择性的去使用依赖的chart，具体可以参考<a href="https://docs.helm.sh/developing_charts/#tags-and-condition-fields-in-requirements-yaml" target="_blank" rel="noopener">tags and condition</a>。</p><h3 id="直接使用charts来手动管理"><a href="#直接使用charts来手动管理" class="headerlink" title="直接使用charts来手动管理"></a>直接使用charts来手动管理</h3><p>第二种是直接把需要用的Chart放到<code>charts</code>文件夹下。一般情况下推荐使用第一种，第二种是在需要对依赖的chart做魔改的情况下用到的。</p><p>Helm还提供了<code>helm dep</code>这个命令来方便对依赖的管理，之后会介绍到。</p><h3 id="依赖的一些实现细节"><a href="#依赖的一些实现细节" class="headerlink" title="依赖的一些实现细节"></a>依赖的一些实现细节</h3><p>在<code>helm install</code>和<code>helm upgrade</code>的时候，helm会把依赖和当前chart打包成一个集合一起送给tiller，然后（目前是）按照类型+字母顺序来apply，并不是先去install依赖再去install当前的chart。</p><p>例如，我们有一个chart，会有以下三个东西：</p><ul><li>namespace “A-Namespace”</li><li>statefulset “A-StatefulSet”</li><li>service “A-Service”</li></ul><p>这个chart依赖于另一个chart，有如下三个东西：</p><ul><li>namespace “B-Namespace”</li><li>replicaset “B-ReplicaSet”</li><li>service “B-Service”</li></ul><p>那么在安装或者升级的过程中，顺序如下：</p><ul><li>A-Namespace</li><li>B-Namespace</li><li>A-StatefulSet</li><li>B-ReplicaSet</li><li>A-Service</li><li>B-Service</li></ul><h1 id="Helm客户端提供的和本地开发相关的功能"><a href="#Helm客户端提供的和本地开发相关的功能" class="headerlink" title="Helm客户端提供的和本地开发相关的功能"></a>Helm客户端提供的和本地开发相关的功能</h1><p>Helm的客户端提供了一些和本地开发相关的命令，这里简单介绍一下。</p><h2 id="helm-completion"><a href="#helm-completion" class="headerlink" title="helm completion"></a>helm completion</h2><p>顾名思义，提供了命令补全，使用方式也比较简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> &lt;(helm completion zsh)</span></span><br></pre></td></tr></table></figure><h2 id="helm-create"><a href="#helm-create" class="headerlink" title="helm create"></a>helm create</h2><p>可以通过这个命令直接创建出一个符合Chart规范的目录出来，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm create myweb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tree myweb</span></span><br><span class="line">myweb</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── charts</span><br><span class="line">├── templates</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── values.yaml</span><br><span class="line"></span><br><span class="line">2 directories, 7 files</span><br></pre></td></tr></table></figure><h2 id="helm-dependency"><a href="#helm-dependency" class="headerlink" title="helm dependency"></a>helm dependency</h2><p>顾名思义，是用来进行依赖管理的，可以被简写为<code>helm dep</code>，具体使用如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm dep</span></span><br><span class="line">Manage the dependencies of a chart.</span><br><span class="line"></span><br><span class="line">Helm charts store their dependencies in 'charts/'. For chart developers, it is</span><br><span class="line">often easier to manage a single dependency file ('requirements.yaml')</span><br><span class="line">which declares all dependencies.</span><br><span class="line"></span><br><span class="line">The dependency commands operate on that file, making it easy to synchronize</span><br><span class="line">between the desired dependencies and the actual dependencies stored in the</span><br><span class="line">'charts/' directory.</span><br><span class="line"></span><br><span class="line">A 'requirements.yaml' file is a YAML file in which developers can declare chart</span><br><span class="line">dependencies, along with the location of the chart and the desired version.</span><br><span class="line">For example, this requirements file declares two dependencies:</span><br><span class="line"></span><br><span class="line">    # requirements.yaml</span><br><span class="line">    dependencies:</span><br><span class="line">    - name: nginx</span><br><span class="line">      version: "1.2.3"</span><br><span class="line">      repository: "https://example.com/charts"</span><br><span class="line">    - name: memcached</span><br><span class="line">      version: "3.2.1"</span><br><span class="line">      repository: "https://another.example.com/charts"</span><br><span class="line"></span><br><span class="line">The 'name' should be the name of a chart, where that name must match the name</span><br><span class="line">in that chart's 'Chart.yaml' file.</span><br><span class="line"></span><br><span class="line">The 'version' field should contain a semantic version or version range.</span><br><span class="line"></span><br><span class="line">The 'repository' URL should point to a Chart Repository. Helm expects that by</span><br><span class="line">appending '/index.yaml' to the URL, it should be able to retrieve the chart</span><br><span class="line">repository's index. Note: 'repository' can be an alias. The alias must start</span><br><span class="line">with 'alias:' or '@'.</span><br><span class="line"></span><br><span class="line">Starting from 2.2.0, repository can be defined as the path to the directory of</span><br><span class="line">the dependency charts stored locally. The path should start with a prefix of</span><br><span class="line">"file://". For example,</span><br><span class="line"></span><br><span class="line">    # requirements.yaml</span><br><span class="line">    dependencies:</span><br><span class="line">    - name: nginx</span><br><span class="line">      version: "1.2.3"</span><br><span class="line">      repository: "file://../dependency_chart/nginx"</span><br><span class="line"></span><br><span class="line">If the dependency chart is retrieved locally, it is not required to have the</span><br><span class="line">repository added to helm by "helm add repo". Version matching is also supported</span><br><span class="line">for this case.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  helm dependency [command]</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  dependency, dep, dependencies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  build       rebuild the charts/ directory based on the requirements.lock file</span><br><span class="line">  list        list the dependencies for the given chart</span><br><span class="line">  update      update charts/ based on the contents of requirements.yaml</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help   help for dependency</span><br><span class="line"></span><br><span class="line">Use "helm dependency [command] --help" for more information about a command.</span><br></pre></td></tr></table></figure><h2 id="helm-fetch"><a href="#helm-fetch" class="headerlink" title="helm fetch"></a>helm fetch</h2><p>一看这就是个下载别的chart的命令，为啥我要说和本地开发有关系呢？</p><p>因为我认为，helm的官方repo里面的chart最大的作用就是作为一个best practice来展示给使用者一个示例。</p><p>所以，当不知道该怎么写的时候，去抄吧😁。</p><h2 id="helm-lint"><a href="#helm-lint" class="headerlink" title="helm lint"></a>helm lint</h2><p>顾名思义，用来检查一个Chart是否存在问题。</p><p>如果说有错误，会报出error，并返回非零值。</p><p>我们就用刚才的myweb来试手：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm lint myweb</span></span><br><span class="line">==&gt; Linting myweb</span><br><span class="line">[INFO] Chart.yaml: icon is recommended</span><br><span class="line"></span><br><span class="line">1 chart(s) linted, no failures</span><br></pre></td></tr></table></figure><h2 id="helm-package"><a href="#helm-package" class="headerlink" title="helm package"></a>helm package</h2><p>这个命令是当一个chart写完后用来把一个chart打包成<code>chartName-version.tgz</code>的。一般只有在发布的时候使用，提供了比较多的功能，比如sign之类的，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm package --<span class="built_in">help</span></span></span><br><span class="line">This command packages a chart into a versioned chart archive file. If a path</span><br><span class="line">is given, this will look at that path for a chart (which must contain a</span><br><span class="line">Chart.yaml file) and then package that directory.</span><br><span class="line"></span><br><span class="line">If no path is given, this will look in the present working directory for a</span><br><span class="line">Chart.yaml file, and (if found) build the current directory into a chart.</span><br><span class="line"></span><br><span class="line">Versioned chart archives are used by Helm package repositories.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  helm package [flags] [CHART_PATH] [...]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -u, --dependency-update    update dependencies from "requirements.yaml" to dir "charts/" before packaging</span><br><span class="line">  -d, --destination string   location to write the chart. (default ".")</span><br><span class="line">      --key string           name of the key to use when signing. Used if --sign is true</span><br><span class="line">      --keyring string       location of a public keyring (default "/Users/daniel/.gnupg/pubring.gpg")</span><br><span class="line">      --save                 save packaged chart to local chart repository (default true)</span><br><span class="line">      --sign                 use a PGP private key to sign this package</span><br><span class="line">      --version string       set the version on the chart to this semver version</span><br></pre></td></tr></table></figure><p>我们还是用刚才的myweb作为例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm package myweb</span></span><br><span class="line">Successfully packaged chart and saved it to: /Users/daniel/Works/k8s/helm/myweb-0.1.0.tgz</span><br></pre></td></tr></table></figure><h2 id="helm-serve"><a href="#helm-serve" class="headerlink" title="helm serve"></a>helm serve</h2><p>这个命令是用来在本地开启一个repo server的，可以用来本地测试使用。</p><h2 id="helm-template"><a href="#helm-template" class="headerlink" title="helm template"></a>helm template</h2><p>这个命令可以在本地渲染出template来检查是否正确，具体使用如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm template --<span class="built_in">help</span></span></span><br><span class="line">Render chart templates locally and display the output.</span><br><span class="line"></span><br><span class="line">This does not require Tiller. However, any values that would normally be</span><br><span class="line">looked up or retrieved in-cluster will be faked locally. Additionally, none</span><br><span class="line">of the server-side testing of chart validity (e.g. whether an API is supported)</span><br><span class="line">is done.</span><br><span class="line"></span><br><span class="line">To render just one template in a chart, use '-x':</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> helm template mychart -x templates/deployment.yaml</span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  helm template [flags] CHART</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -x, --execute stringArray    only execute the given templates</span><br><span class="line">      --kube-version string    override the Kubernetes version used as Capabilities.KubeVersion.Major/Minor (e.g. 1.7)</span><br><span class="line">  -n, --name string            release name (default "RELEASE-NAME")</span><br><span class="line">      --name-template string   specify template used to name the release</span><br><span class="line">      --namespace string       namespace to install the release into</span><br><span class="line">      --notes                  show the computed NOTES.txt file as well</span><br><span class="line">      --set stringArray        set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">  -f, --values valueFiles      specify values in a YAML file (can specify multiple) (default [])</span><br></pre></td></tr></table></figure><p>我们仍然以myweb作为例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm template myweb</span></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> Source: myweb/templates/service.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: RELEASE-NAME-myweb</span><br><span class="line">  labels:</span><br><span class="line">    app: myweb</span><br><span class="line">    chart: myweb-0.1.0</span><br><span class="line">    release: RELEASE-NAME</span><br><span class="line">    heritage: Tiller</span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">      name: nginx</span><br><span class="line">  selector:</span><br><span class="line">    app: myweb</span><br><span class="line">    release: RELEASE-NAME</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> Source: myweb/templates/deployment.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: RELEASE-NAME-myweb</span><br><span class="line">  labels:</span><br><span class="line">    app: myweb</span><br><span class="line">    chart: myweb-0.1.0</span><br><span class="line">    release: RELEASE-NAME</span><br><span class="line">    heritage: Tiller</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: myweb</span><br><span class="line">        release: RELEASE-NAME</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: myweb</span><br><span class="line">          image: "nginx:stable"</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">          livenessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /</span><br><span class="line">              port: 80</span><br><span class="line">          readinessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /</span><br><span class="line">              port: 80</span><br><span class="line">          resources:</span><br><span class="line">            &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> Source: myweb/templates/ingress.yaml</span></span><br></pre></td></tr></table></figure><h2 id="helm-verify"><a href="#helm-verify" class="headerlink" title="helm verify"></a>helm verify</h2><p>这个命令是用来验证一个给定的chart是否被sign。在对安全性要求高的环境下有用。</p><h2 id="helm-plugin"><a href="#helm-plugin" class="headerlink" title="helm plugin"></a>helm plugin</h2><p>最后是这个<code>helm plugin</code>，看到这个我们就能感觉到，helm瞬间有了无数的扩展性，需要什么功能如果helm不提供咱们就自己干一个加上去。</p><p>helm目前现在已经有了一些比较好的plugin，比如有一个plugin支持用template render出来之后再进行验证查错之类的。</p><p>如果有一些别的定制化的需求也可以通过自己写个plugin来完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm&lt;/a&gt;是kubernetes的官方包管理工具。根据官网上的描述&lt;code&gt;Helm is the best way to find, share, and use software built for Kubernetes.&lt;/code&gt;可以看出helm在kubernetes社区中的定位。&lt;/p&gt;
&lt;p&gt;这篇文章并不是helm的入门文章，而是着重于如何在本地开发chart。希望进行helm入门的同学可以参考官方文档。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Helm中如何传递value</title>
    <link href="https://purewhite.io/2018/01/17/helm-provide-value/"/>
    <id>https://purewhite.io/2018/01/17/helm-provide-value/</id>
    <published>2018-01-17T03:25:15.000Z</published>
    <updated>2019-03-18T06:14:04.563Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a>是kubernetes的官方包管理工具。根据官网上的描述<code>Helm is the best way to find, share, and use software built for Kubernetes.</code>可以看出helm在kubernetes社区中的定位。</p><p>这篇文章并不是helm的入门文章，而是着重于helm中的chart之间如何传递value。希望进行helm入门的同学可以参考官方文档。</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在helm的使用过程中，经常会出现两种需求：</p><ol><li>在父chart中<strong>读取</strong>子chart的某些value的值</li><li>在父chart中<strong>修改</strong>子chart的某些value的值</li></ol><p>helm对于这两种场景提供了比较完备的支持，下面我们来具体讲一下解决方案。</p><h1 id="在父chart中读取子chart的值"><a href="#在父chart中读取子chart的值" class="headerlink" title="在父chart中读取子chart的值"></a>在父chart中读取子chart的值</h1><p>helm提供了两种方法来应对这种情况：</p><h2 id="使用export格式"><a href="#使用export格式" class="headerlink" title="使用export格式"></a>使用export格式</h2><p>如果说一个child的chart在values的root下有一个叫做<code>export</code>的key，那么它的parent chart就可以直接在requirements里面通过指定需要import的key来将值import到自身的values里面，例子如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parent's requirements.yaml file</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">    import-values:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">data</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># child's values.yaml file</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">exports:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    myint:</span> <span class="number">99</span></span><br></pre></td></tr></table></figure><p>helm会发现，我们指定了要import <code>data</code>这个key，所以就去child的values.yaml里面寻找，发现了这个key有被export，于是就import了它的内容。</p><p>这时候的parent的values如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parent's values file</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">myint:</span> <span class="number">99</span></span><br></pre></td></tr></table></figure><p>需要注意，在parent的values中<code>data</code>这个key不会被import进来，只会import <code>data</code>的内容。如果希望把这个key也一起import进来，可以使用下面说的方法。</p><h2 id="使用child-parent格式"><a href="#使用child-parent格式" class="headerlink" title="使用child/parent格式"></a>使用child/parent格式</h2><p>如果我们想要获得一些不在exports这个key下面的值，我们就必须指定在child中要import的路径，以及在parent中的对应路径，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parent's requirements.yaml file</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">subchart1</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="attr">http://localhost:10191</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">    import-values:</span></span><br><span class="line"><span class="attr">      - child:</span> <span class="string">default.data</span></span><br><span class="line"><span class="attr">        parent:</span> <span class="string">myimports</span></span><br></pre></td></tr></table></figure><p>根据如上的这个requirements文件，helm将会在child的chart中寻找default.data的值，并导入到parent中的myimports这个路径下。</p><p>假设parent和child初始的values如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parent's values.yaml file</span></span><br><span class="line"></span><br><span class="line"><span class="attr">myimports:</span></span><br><span class="line"><span class="attr">  myint:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  mybool:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  mystring:</span> <span class="string">"helm rocks!"</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># subchart1's values.yaml file</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    myint:</span> <span class="number">999</span></span><br><span class="line"><span class="attr">    mybool:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>那么导入之后，真正渲染出来的parent的values的值为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parent's final values</span></span><br><span class="line"></span><br><span class="line"><span class="attr">myimports:</span></span><br><span class="line"><span class="attr">  myint:</span> <span class="number">999</span></span><br><span class="line"><span class="attr">  mybool:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mystring:</span> <span class="string">"helm rocks!"</span></span><br></pre></td></tr></table></figure><p>可以看出来，parent中的values把myint和mybool从subchart1里面import了进来。</p><h1 id="在父chart中修改子chart的值"><a href="#在父chart中修改子chart的值" class="headerlink" title="在父chart中修改子chart的值"></a>在父chart中修改子chart的值</h1><p>想要再父chart中修改子chart的值比较容易，假设子chart的名字是<code>mychartabc</code>，那么我们可以很简单地在父chart的values中通过以下方式进行修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in parent's values.yaml</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mychartabc:</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure><p>这样就可以修改子chart的值了。</p><h1 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h1><p><a href="https://docs.helm.sh/developing_charts/#importing-child-values-via-requirements-yaml" target="_blank" rel="noopener">https://docs.helm.sh/developing_charts/#importing-child-values-via-requirements-yaml</a></p><p><a href="https://docs.helm.sh/chart_template_guide/#overriding-values-from-a-parent-chart" target="_blank" rel="noopener">https://docs.helm.sh/chart_template_guide/#overriding-values-from-a-parent-chart</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm&lt;/a&gt;是kubernetes的官方包管理工具。根据官网上的描述&lt;code&gt;Helm is the best way to find, share, and use software built for Kubernetes.&lt;/code&gt;可以看出helm在kubernetes社区中的定位。&lt;/p&gt;
&lt;p&gt;这篇文章并不是helm的入门文章，而是着重于helm中的chart之间如何传递value。希望进行helm入门的同学可以参考官方文档。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes中的Network</title>
    <link href="https://purewhite.io/2018/01/08/kubernetes-network/"/>
    <id>https://purewhite.io/2018/01/08/kubernetes-network/</id>
    <published>2018-01-08T08:01:50.000Z</published>
    <updated>2019-03-18T06:14:05.726Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes 处理网络的方式和Docker不同，主要需要解决四种问题：</p><ol><li>高度耦合的Container之间的网络通信：这个由Pod和localhost通信解决了；</li><li>Pod和Pod之间的网络通信，这个是本篇的主要内容；</li><li>Pod和Service之间的通信，这个是由Service解决的；</li><li>外部Service和内部Service之间的通信，这个也是由Service解决的。</li></ol><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Kubernetes 假设 Pod 之间可以互相通信，无论它们在哪个主机上。我们给每个Pod一个单独的IP地址，那么我们就不用专门在Pod之间创建链接，或者映射container的port到主机的port来使得外部可以访问到container了。这使得我们创建了一个非常干净，向后兼容的模型，在这个模型里面Pod可以就被当做为一个VM或者甚至一个物理机，这给了我们很多方面的方便，比如port的分配，命名，服务注册、发现，负载均衡，应用程序设置和迁移等。</p><p>为了达成这个目标，我们必须规定如何设置集群的网络。</p><h1 id="Docker的模型"><a href="#Docker的模型" class="headerlink" title="Docker的模型"></a>Docker的模型</h1><p>在讨论Kubernetes处理网络的方法之前，我们需要先复习一下Docker是如何处理网络的。在默认情况下，Docker用的是主机私有的网络，默认情况下会创建一个叫做docker0的虚拟网桥，并且分配一段子网给它。对于每个Docker创建的container，都会分配一个虚拟的附加于这个网桥的网络设备（被称为<code>veth</code>），这个<code>veth</code>其实是通过linux的namespace来映射到container里面的<code>eth0</code>的。这个容器里的<code>eth0</code>会被分配一个虚拟网桥的网段里面的IP地址。</p><p>结果就是，Docker的容器只能和在同一个机器（也就是在同一个网桥）里面的容器交流，不能和外部别的机器上的容器之间建立连接。事实上，不同机器上的容器，可能会有同样的网段和IP地址。</p><p>如果说要让Docker容器能跨Node交流，那么必须给他们分配主机上的port，并通过这个port和主机IP来唯一确定一个容器的地址，然后主机会把请求转发给container。这显然会带来很多的问题。</p><h1 id="Kubernetes的模型"><a href="#Kubernetes的模型" class="headerlink" title="Kubernetes的模型"></a>Kubernetes的模型</h1><p>在大量的开发者之间协调port的使用很明显是非常难以扩展和管理的。动态分配port又会给系统带来很大的复杂性——每一个应用程序都必须把port作为一个flag，API Server必须知道如何去把动态的port插入到配置块里面，Service必须知道如何去找到彼此，等等。与其解决这么多的问题，不如咱们自己干，重头设计。</p><p>Kubernetes规定了如下的网络实现规范（除非有意不这么做）：</p><ul><li>所有的container都可以在不使用NAT的情况下访问到任何别的container</li><li>所有的node都可以在不使用NAT的情况下访问到任何别的container（反之亦然）</li><li>每个container自己看到的自己的IP地址，和被人看到的是一样的</li></ul><p>这些要求其实就是说，你不能直接在两台机器上装上Docker，然后指望Kubernetes会工作，你必须保证这些基础要求被满足。</p><p>这个模型不止简单了很多，而且还吻合了Kubernetes对于把app从vm迁移到container的方便性要求。意思是，如果你之前的app是运行在vm里面的，那么vm和vm之间能通过IP地址互相通信是一个基本的要求。反之，放到container里面也是这样。</p><p>不过事实上，Kubernetes中并不是每一个container都会有自己的IP地址，其实Kubernetes是以Pod作为最小的分配IP地址的单位的——Pod中的container会共享同一个IP地址——也就是共享同一个network namespace。这使得所有的同一个Pod里面的container都能通过localhost直接访问到彼此。不过这个带来的问题是每个Pod里面的container需要协调好port的使用，防止冲突，但是这个和在VM里面是相同的，所以并不是什么太大的问题。我们称之为“IP-per-pod”模型。</p><p>在Docker里面，请求一个host port是可行的，但是这个模型使得操作更加简单。我们会在每个host Node上分配一个port，并把所有的traffic都转发给Pod。Pod本身并不需要知道这些，只当自己是一个vm或者甚至物理机就好了。</p><h1 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h1><p>目前有很多方法能实现这个网络模型，比如说如下的这些方案：</p><h2 id="Cilium"><a href="#Cilium" class="headerlink" title="Cilium"></a>Cilium</h2><p>Cilium是一个开源的网络模型，实现了L3-L7层的安全策略，具体的可以看一下文档。</p><h2 id="Contiv"><a href="#Contiv" class="headerlink" title="Contiv"></a>Contiv</h2><p>Contiv提供了可设置的网络模型。</p><h2 id="Flannel"><a href="#Flannel" class="headerlink" title="Flannel"></a>Flannel</h2><p>Flannel是一个非常简单的网络层，不过很多人都说好用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>实现的方案非常多，我就不一一列举了，大家可以直接去参考官方文档中的内容。</p><p>网络是个很复杂的东西，很多时候问题都会出在网络上，不同的业务模型需要使用不同的网络插件，没有万金油的解决方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes 处理网络的方式和Docker不同，主要需要解决四种问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;高度耦合的Container之间的网络通信：这个由Pod和localhost通信解决了；&lt;/li&gt;
&lt;li&gt;Pod和Pod之间的网络通信，这个是本篇的主要内容；&lt;/li&gt;
&lt;li&gt;Pod和Service之间的通信，这个是由Service解决的；&lt;/li&gt;
&lt;li&gt;外部Service和内部Service之间的通信，这个也是由Service解决的。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 中的 ingress</title>
    <link href="https://purewhite.io/2017/12/28/kubernetes-ingress/"/>
    <id>https://purewhite.io/2017/12/28/kubernetes-ingress/</id>
    <published>2017-12-28T08:56:45.000Z</published>
    <updated>2019-03-18T06:14:05.618Z</updated>
    
    <content type="html"><![CDATA[<p>在我之前的<a href="https://purewhite.io/2017/12/23/kubernetes-service/">kubernetes中的Service</a>中，我们可以看到如何使用Service来让我们的应用可以被集群外所访问到。但是在实际使用中，仍然存在一些问题。对于我们经常用的NodePort和LoadBalancer这两个type，LoadBalancer需要底层的infra支持，并且哪怕支持了我们也不能轻易用，因为LoadBalancer资源是有限的，而且最重要的是贵，贵，贵。而对于NodePort来说，我们需要经常更新我们的proxy设置，并且追踪哪些Port被使用了，所以也是很麻烦的。</p><p>万能的程序猿总是有解决方案，ingress应运而生。</p><a id="more"></a><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>通过使用Service，路由的规则是直接附属到一个特定的Service上，并且生命周期和Service一样。如果说，我们能把路由规则和应用解耦，那么我们就可以随意的去更新应用而不影响访问，或者随意的去更改路由规则了。Ingress正是做这个的。</p><p>根据Kubernetes官方文档：</p><p><code>An Ingress is a collection of rules that allow inbound connections to reach the cluster Services.</code></p><p>Ingress实际上做了一个Layer 7的HTTP load balancer，并且提供了以下功能：</p><ul><li>TLS(Transport Layer Security)</li><li>Name-based virtual hosting</li><li>Path-based routing</li><li>Custom rules</li></ul><p><img src="https://static.purewhite.io/images/2017-12-28-AEE4364B-EE2F-451A-8361-DF5A6AE92116.png" alt="AEE4364B-EE2F-451A-8361-DF5A6AE92116"></p><p>通过Ingress，用户不需要直接连接到Service，用户可以直接访问到ingress的endpoint，然后通过Ingress再转发到Service。样例Ingress配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">web-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">blue.myweb.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span> </span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">blue-service</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">green.myweb.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">green-service</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>根据这个配置，用户访问blue.myweb.com和green.myweb.com将会访问到同一个ingress的endpoint，并且再被转发到blue-service和green-service中。这个就是之前说的<code>Name-based virtual hosting</code>。</p><p>我们也可以用Fan Out Ingress rules，比如我们访问myweb.com/blue和myweb.com/green，然后这些也会被转发到blue-service和green-service：</p><p><img src="https://static.purewhite.io/images/2017-12-28-6E68B099-8D89-40B4-9744-475C4E1E61B0.png" alt="6E68B099-8D89-40B4-9744-475C4E1E61B0"></p><p>Ingress这个Resource其实并不做转发，而是由Ingress Controller来做的。</p><h1 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h1><p>Ingress Controller其实就是一个监听master node上API Server对Ingress Resource的改变然后改变这个Layer 7 Load Balancer的Controller。Kubernetes有好多种不同的Ingress Controllers，比如说GCE L7 Load Balancer和Nginx Ingress Controller。当然，如果我们需要的话也可以写一个自己的。</p><p>需要保证Ingress Controller被启用，Ingress才可以使用。</p><h1 id="创建一个Ingress-Resource"><a href="#创建一个Ingress-Resource" class="headerlink" title="创建一个Ingress Resource"></a>创建一个Ingress Resource</h1><p>我们可以通过<code>kubectl create</code>来创建一个ingress资源，比如假设我们有一个叫做myweb-ingress.yaml的文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">web-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">blue.myweb.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span> </span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">blue-service</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">green.myweb.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">green-service</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>我们可以通过：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f myweb-ingress.yaml</span></span><br></pre></td></tr></table></figure><p>来创建这个ingress的资源。然后只要修改我们的域名dns，指向ingress的endpoint即可（在本机上可以通过修改/etc/hosts来达成目的）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我之前的&lt;a href=&quot;https://purewhite.io/2017/12/23/kubernetes-service/&quot;&gt;kubernetes中的Service&lt;/a&gt;中，我们可以看到如何使用Service来让我们的应用可以被集群外所访问到。但是在实际使用中，仍然存在一些问题。对于我们经常用的NodePort和LoadBalancer这两个type，LoadBalancer需要底层的infra支持，并且哪怕支持了我们也不能轻易用，因为LoadBalancer资源是有限的，而且最重要的是贵，贵，贵。而对于NodePort来说，我们需要经常更新我们的proxy设置，并且追踪哪些Port被使用了，所以也是很麻烦的。&lt;/p&gt;
&lt;p&gt;万能的程序猿总是有解决方案，ingress应运而生。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 中的 ConfigMap 和 Secret</title>
    <link href="https://purewhite.io/2017/12/28/kubernetes-configmap-and-secret/"/>
    <id>https://purewhite.io/2017/12/28/kubernetes-configmap-and-secret/</id>
    <published>2017-12-28T07:50:20.000Z</published>
    <updated>2019-03-18T06:14:05.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要有这俩玩意儿？"><a href="#为什么要有这俩玩意儿？" class="headerlink" title="为什么要有这俩玩意儿？"></a>为什么要有这俩玩意儿？</h1><p>我们在kubernetes上部署应用的时候，经常会需要传一些配置给我们的应用，比如数据库地址啊，用户名密码啊之类的。我们要做到这个，有好多种方案，比如：</p><ul><li>我们可以直接在打包镜像的时候写在应用配置文件里面，但是这种方式的坏处显而易见而且非常明显。</li><li>我们可以在配置文件里面通过env环境变量传入，但是这样的话我们要修改env就必须去修改yaml文件，而且需要重启所有的container才行。</li><li>我们可以在应用启动的时候去数据库或者某个特定的地方拿，没问题！但是第一，实现起来麻烦；第二，如果配置的地方变了怎么办？</li></ul><p>当然还有别的方案，但是各种方案都有各自的问题。</p><p>而且，还有一个问题就是，如果说我的一个配置，是要多个应用一起使用的，以上除了第三种方案，都没办法进行配置的共享，就是说我如果要改配置的话，那得一个一个手动改。假如我们有100个应用，就得改100份配置，以此类推……</p><p>kubernetes对这个问题提供了一个很好的解决方案，就是用<strong>ConfigMap</strong>和<strong>Secret</strong>。</p><a id="more"></a><h1 id="创建ConfigMap"><a href="#创建ConfigMap" class="headerlink" title="创建ConfigMap"></a>创建ConfigMap</h1><p>ConfigMap让我们能够从容器镜像中把配置的详细信息给解耦出来。通过ConfigMap我们能够把配置以key-value对的形式传递到container或者别的系统组件（比如Controller）里面。我们可以通过两种方式来创建ConfigMap：</p><h2 id="From-Literal-Values"><a href="#From-Literal-Values" class="headerlink" title="From Literal Values"></a>From Literal Values</h2><p>我们可以用<code>kubectl create</code>来创建一个ConfigMap，然后通过<code>kubectl get</code>来获取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Create the ConfigMap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2</span></span><br><span class="line">configmap "my-config" created </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get the ConfigMap Details <span class="keyword">for</span> my-config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get configmaps my-config -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  key1: value1</span><br><span class="line">  key2: value2</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: 2017-05-31T07:21:55Z</span><br><span class="line">  name: my-config</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: "241345"</span><br><span class="line">  selfLink: /api/v1/namespaces/default/configmaps/my-config</span><br><span class="line">  uid: d35f0a3d-45d1-11e7-9e62-080027a46057</span><br></pre></td></tr></table></figure><p><code>-o yaml</code>的作用是通过yaml的形式来返回我们所要求的配置信息。</p><h2 id="From-Configuration-File"><a href="#From-Configuration-File" class="headerlink" title="From Configuration File"></a>From Configuration File</h2><p>除了上面的方式，我们还可以直接通过配置文件来创建（好吧，虽然我感觉是同一种，只不过是放到文件里面了而已……），首先，我们得有一个配置文件，假设名字叫做<code>myconfigmap.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">customer1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="attr">  TEXT1:</span> <span class="string">Customer1_Company</span></span><br><span class="line"><span class="attr">  TEXT2:</span> <span class="string">Welcomes</span> <span class="string">You</span></span><br><span class="line"><span class="attr">  COMPANY:</span> <span class="string">Customer1</span> <span class="string">Company</span> <span class="string">Technology</span> <span class="string">Pct.</span> <span class="string">Ltd.</span></span><br></pre></td></tr></table></figure><p>然后，我们可以通过<code>kubectl create -f</code>来创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f myconfigmap.yaml</span></span><br><span class="line">configmap "customer1" created</span><br></pre></td></tr></table></figure><h1 id="使用ConfigMap"><a href="#使用ConfigMap" class="headerlink" title="使用ConfigMap"></a>使用ConfigMap</h1><p>我们可以有两种方法来使用ConfigMap：</p><h2 id="通过env"><a href="#通过env" class="headerlink" title="通过env"></a>通过env</h2><p>我们可以设置env从ConfigMap读取：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">....</span></span><br><span class="line"><span class="attr"> containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">rsvp-app</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">teamcloudyuga/rsvpapp</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MONGODB_HOST</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">TEXT1</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            configMapKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">customer1</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">TEXT1</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">TEXT2</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            configMapKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">customer1</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">TEXT2</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">COMPANY</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            configMapKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">customer1</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">COMPANY</span></span><br><span class="line"></span><br><span class="line"><span class="string">....</span></span><br></pre></td></tr></table></figure><p>这样，我们的container就可以读取到ConfigMap里面存储的信息了。</p><p>不过一般情况下，我个人推荐使用另一种方式：</p><h2 id="通过Volume"><a href="#通过Volume" class="headerlink" title="通过Volume"></a>通过Volume</h2><p>这种方式我比较推荐，因为随着ConfigMap被修改（比如你想要更新一些设置），container里面对应的文件内容也会被修改，这样可以不用重启Container就让应用能够得到最新的配置信息。</p><p>这个内容需要一些Volume相关的知识，在此不做更多讲解，大家可以去参考<a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#adding-configmap-data-to-a-volume" target="_blank" rel="noopener">官方文档</a>。</p><h1 id="创建Secret"><a href="#创建Secret" class="headerlink" title="创建Secret"></a>创建Secret</h1><p>通过上面的部分，我们可以看到ConfigMap是用来做一些配置信息的，那么如果我们有一些机密信息比如说密钥、密码之类的信息，应该存在哪里呢？看到这个名字大家应该就明白了吧，kubernetes提供了Secret来存储相关的信息。</p><p>具体为什么要存在Secret里面，Secret和ConfigMap有什么区别，后面会讲到。</p><h2 id="创建Secret-1"><a href="#创建Secret-1" class="headerlink" title="创建Secret"></a>创建Secret</h2><p>我们可以通过<code>kubectl create secret</code>来通过一个文件创建一个secret，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Create a file with password</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'mysqlpassword'</span> &gt; password.txt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Make sure there is no trailing newline <span class="keyword">in</span> the file, after our password. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To remove any newline, we can use the tr <span class="built_in">command</span>:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tr -Ccsu <span class="string">'\n'</span> &lt; password.txt &gt; .strippedpassword.txt &amp;&amp; mv .strippedpassword.txt password.txt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create the Secret </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl create secret generic my-password --from-file=password.txt</span></span><br><span class="line">secret "my-password" created</span><br></pre></td></tr></table></figure><p>我们也可以手动创建一个Secret，不过要注意，所有的secret的data都要以base64进行加密：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat password.txt | base64</span></span><br><span class="line">bXlzcWxwYXN3b3JkCg==</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> and <span class="keyword">then</span> use it <span class="keyword">in</span> the configuration file:</span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: my-password</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  password: bXlzcWxwYXN3b3JkCg==</span><br></pre></td></tr></table></figure><h1 id="使用Secret"><a href="#使用Secret" class="headerlink" title="使用Secret"></a>使用Secret</h1><h2 id="获取Secret"><a href="#获取Secret" class="headerlink" title="获取Secret"></a>获取Secret</h2><p>我们可以通过<code>get</code>和<code>describe</code>来获取Secret，不过我们发现，<code>kubectl</code>并没有向我们返回Secret具体的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get secret my-password</span></span><br><span class="line">NAME          TYPE     DATA   AGE </span><br><span class="line">my-password   Opaque   1      8m</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl describe secret my-password</span></span><br><span class="line">Name:          my-password</span><br><span class="line">Namespace:     default</span><br><span class="line">Labels:        &lt;none&gt;</span><br><span class="line">Annotations:   &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type  Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password.txt:  13 bytes</span><br></pre></td></tr></table></figure><h2 id="在Pod里面使用"><a href="#在Pod里面使用" class="headerlink" title="在Pod里面使用"></a>在Pod里面使用</h2><p>和ConfigMap一样，我们可以通过设置成env或者挂载成volume来使容器可以使用我们的secret。</p><p>具体格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.....</span></span><br><span class="line"><span class="attr">         spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="attr">wordpress:4.7.3-apache</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">WORDPRESS_DB_HOST</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">wordpress-mysql</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">WORDPRESS_DB_PASSWORD</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            secretKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">my-password</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">password.txt</span></span><br><span class="line"><span class="string">.....</span></span><br></pre></td></tr></table></figure><p>关于如何在Volume中使用的还是需要自行查询文档学习。</p><h1 id="扯淡的Secret"><a href="#扯淡的Secret" class="headerlink" title="扯淡的Secret"></a>扯淡的Secret</h1><p>好了，总算正文部分完了，可以讲讲Secret和ConfigMap的关系了，以及讲讲Secret到底有多扯淡……</p><p>其实目前Secret的实现，就是ConfigMap把value用base64 encode了一下……</p><p>所以，其实不存在任何安全性……</p><p>只要decode一下就能出现原来结果，相当于明文存储……</p><p>base64这玩意儿都不能叫做加密，只能叫做编码……</p><p>所以我们都不说encrypt，而是encode和decode……</p><p>当然，k8s社区有在计划对Secret进行下一步的安全性增强，当然这是后话了……</p><p>反正目前为止，Secret基本和ConfigMap一样是明文存储……</p><p>知道有多扯淡了吧……</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么要有这俩玩意儿？&quot;&gt;&lt;a href=&quot;#为什么要有这俩玩意儿？&quot; class=&quot;headerlink&quot; title=&quot;为什么要有这俩玩意儿？&quot;&gt;&lt;/a&gt;为什么要有这俩玩意儿？&lt;/h1&gt;&lt;p&gt;我们在kubernetes上部署应用的时候，经常会需要传一些配置给我们的应用，比如数据库地址啊，用户名密码啊之类的。我们要做到这个，有好多种方案，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以直接在打包镜像的时候写在应用配置文件里面，但是这种方式的坏处显而易见而且非常明显。&lt;/li&gt;
&lt;li&gt;我们可以在配置文件里面通过env环境变量传入，但是这样的话我们要修改env就必须去修改yaml文件，而且需要重启所有的container才行。&lt;/li&gt;
&lt;li&gt;我们可以在应用启动的时候去数据库或者某个特定的地方拿，没问题！但是第一，实现起来麻烦；第二，如果配置的地方变了怎么办？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然还有别的方案，但是各种方案都有各自的问题。&lt;/p&gt;
&lt;p&gt;而且，还有一个问题就是，如果说我的一个配置，是要多个应用一起使用的，以上除了第三种方案，都没办法进行配置的共享，就是说我如果要改配置的话，那得一个一个手动改。假如我们有100个应用，就得改100份配置，以此类推……&lt;/p&gt;
&lt;p&gt;kubernetes对这个问题提供了一个很好的解决方案，就是用&lt;strong&gt;ConfigMap&lt;/strong&gt;和&lt;strong&gt;Secret&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes中的Volume</title>
    <link href="https://purewhite.io/2017/12/25/kubernetes-volumes/"/>
    <id>https://purewhite.io/2017/12/25/kubernetes-volumes/</id>
    <published>2017-12-25T03:04:48.000Z</published>
    <updated>2019-03-18T06:14:05.978Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道，容器是一个短暂的不稳定的存在（随时可能挂掉），挂掉之后里面的所有数据都没了，但是我们会有很多数据是需要一直存下来（持久化）的，那怎么办呢？思路很简单，把容器里面的数据存到一个可以持久化的地方（比如s3上）。</p><a id="more"></a><h1 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h1><p>为了解决上面这个问题，kubernetes提供了Volume。一个Volume其实就是由一个存储中间件锁支持的一个directory，具体是什么存储中间件是由Volume的类型确定的。</p><p><img src="https://static.purewhite.io/images/2017-12-25-A00784D4-9D6B-4091-B78E-16834F743338.png" alt="A00784D4-9D6B-4091-B78E-16834F743338"></p><p>如上图，在k8s里面，一个Volume会attach到一个Pod上，我们之前也有说过在Pod里面网络和存储是共享的，所以这个Volume可以被Pod中所有的container所共享。一个Volume和Pod的生命周期是一样的，不过却比containers要更长，这样可以使得数据可以在容器之间共享。</p><h1 id="Volume-Types"><a href="#Volume-Types" class="headerlink" title="Volume Types"></a>Volume Types</h1><p>一个mount到Pod里面的directory是由底层的Volume Type支持的，Volume Type决定了这个directory的属性，比如大小，内容等等。下面列举一部分的Volume Type：</p><h2 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h2><p>顾名思义，这就是一个“空的”Volume。这个空的Volume会在Pod被调度到node上的时候被创建。这种类型的Volume的生命周期和Pod一样，如果Pod挂了，那么这种Volume里面的所有数据也就没了。</p><h2 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h2><p>同样顾名思义，这就是把主机上的某个path映射到pod里面，如果Pod挂了，数据还在host上，不过如果host挂了，数据也就没了。</p><h2 id="gcePersistentDisk"><a href="#gcePersistentDisk" class="headerlink" title="gcePersistentDisk"></a>gcePersistentDisk</h2><p>顾名思义，强耦合gce，不多说了。</p><h2 id="awsElasticBlockStore"><a href="#awsElasticBlockStore" class="headerlink" title="awsElasticBlockStore"></a>awsElasticBlockStore</h2><p>同上</p><h2 id="nfs"><a href="#nfs" class="headerlink" title="nfs"></a>nfs</h2><p>通过nfs，我们可以mount一个nfs share到pod里。</p><h2 id="iscsi"><a href="#iscsi" class="headerlink" title="iscsi"></a>iscsi</h2><p>同上</p><h2 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h2><p>我们可以用这个type来把我们放在secret里面的那些比如密码呀token呀之类的信息挂载到pod上，让应用可以使用。</p><h2 id="persistentVolumeClaim"><a href="#persistentVolumeClaim" class="headerlink" title="persistentVolumeClaim"></a>persistentVolumeClaim</h2><p>这个是最重要的一种，也是最常用的一种，我们可以把一个<code>Persistent Volume(PV)</code>挂载到Pod里面，通过<code>persistentVolumeClaim(PVC)</code>。</p><h1 id="Persistent-Volumes"><a href="#Persistent-Volumes" class="headerlink" title="Persistent Volumes"></a>Persistent Volumes</h1><p>在传统的IT环境中，一般存储是由系统管理员来管理的，终端用户只是获得如何去使用的指导，但是不用管底层到底存储是怎么管理的。</p><p>在容器世界里面，也是一样的。Kubernetes有一个叫做Persistent Volumes的子系统，管理员通过Persistent Volume API向其中添加和管理Persistent Volume，然后用户使用Persistent Volume Claim API来使用。</p><p>一个PV就是一个通过网络挂载到集群上的存储。</p><p><img src="https://static.purewhite.io/images/2017-12-25-73BBB017-7870-4014-88E4-67B1AE5BC73F.png" alt="73BBB017-7870-4014-88E4-67B1AE5BC73F"></p><p>PV可以通过StorageClass这个resource被静态地创建，也可以动态地被添加。一个StorageClass包含了预定义好的创建PV的初始化器和参数。</p><p>一些支持使用PV进行管理的Volume Types是：</p><ul><li>GCEPersistentDisk</li><li>AWSElasticBlockStore</li><li>AzureFile</li><li>NFS</li><li>iSCSI</li><li>CephFS</li><li>Cinder</li><li>etc.</li></ul><h1 id="Persistent-Volume-Claims"><a href="#Persistent-Volume-Claims" class="headerlink" title="Persistent Volume Claims"></a>Persistent Volume Claims</h1><p>一个Persistent Volume Claim(PVC)就是一个用户想要使用storage的请求。用户通过指定比如大小、访问权限等来申请PV资源，当有一个合适的资源(PV)被找到的时候，就会和PVC绑定在一起：</p><p><img src="https://static.purewhite.io/images/2017-12-25-CD52FF8E-EFFE-4519-AAD8-073BE55E97E5.png" alt="CD52FF8E-EFFE-4519-AAD8-073BE55E97E5"></p><p>当bind成功之后，这个PVC就可以在Pod里面使用了：</p><p><img src="https://static.purewhite.io/images/2017-12-25-2AECAABF-FE93-4F51-9716-CDBB334BE549.png" alt="2AECAABF-FE93-4F51-9716-CDBB334BE549"></p><p>当一个用户结束使用之后，绑定的PV就可以被归还(release)了，就可以重新被申明(reclaimed)和使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道，容器是一个短暂的不稳定的存在（随时可能挂掉），挂掉之后里面的所有数据都没了，但是我们会有很多数据是需要一直存下来（持久化）的，那怎么办呢？思路很简单，把容器里面的数据存到一个可以持久化的地方（比如s3上）。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes中的Service</title>
    <link href="https://purewhite.io/2017/12/23/kubernetes-service/"/>
    <id>https://purewhite.io/2017/12/23/kubernetes-service/</id>
    <published>2017-12-22T16:52:22.000Z</published>
    <updated>2019-03-18T06:14:05.845Z</updated>
    
    <content type="html"><![CDATA[<p>Service 是kubernetes中一个很重要的，也是很有用的概念，我们可以通过service来将pod进行分组，并提供外网的访问endpoint。在这个过程中还有比如<code>kube-proxy</code>提供了对service的访问。</p><a id="more"></a><h1 id="Connecting-Users-to-Pods"><a href="#Connecting-Users-to-Pods" class="headerlink" title="Connecting Users to Pods"></a>Connecting Users to Pods</h1><p>如果我们要让一个用户能够使用应用程序，用户需要能访问到pod，但是pod是一个短暂存在的东西，很可能突然挂了然后重启，这时候ip地址就会改变，所以pod的ip地址并不是静态的。比如说：</p><p><img src="https://static.purewhite.io/images/2017-12-23-E3FACD27-1617-40FE-A1EC-2099FD6AFF35.png" alt="E3FACD27-1617-40FE-A1EC-2099FD6AFF35"></p><p>用户在这张图里面通过ip地址访问到了4个pod，突然其中有一个pod挂了，然后controller又起了一个pod：</p><p><img src="https://static.purewhite.io/images/2017-12-23-BE6386EA-2846-4AD8-ACD3-80A6163AD935.png" alt="BE6386EA-2846-4AD8-ACD3-80A6163AD935"></p><p>这时候用户就访问不到了，因为用户不知道新的ip地址是多少。</p><p>kubernetes为了解决这个问题，提供了一个高层的抽象，叫做Service。Service从逻辑上把pod进行分组，并且设置访问的策略。一般我们是通过label和selector来达到分组的目的的。</p><h1 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h1><p>比如，我们用app作为key，db和frontend作为value来区分pod：</p><p><img src="https://static.purewhite.io/images/2017-12-23-23B63A0F-40BC-4FF7-AAEC-4D1C11C54970.png" alt="23B63A0F-40BC-4FF7-AAEC-4D1C11C54970"></p><p>通过selector（app=frontend和app=db），我们就可以把这些pod分为两个逻辑组了。</p><p>这个时候，我们再给这两个逻辑组加上一个名称，比如<code>frontend-svc</code>和<code>db-svc</code>，就是service了：</p><p><img src="https://static.purewhite.io/images/2017-12-23-F67805E2-CE2D-40A8-9CFD-DE79CFD832E4.png" alt="F67805E2-CE2D-40A8-9CFD-DE79CFD832E4"></p><h1 id="Service对象模型"><a href="#Service对象模型" class="headerlink" title="Service对象模型"></a>Service对象模型</h1><p>一个service对象模型大致如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">frontend-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p>在这个对象模型中，我们创建了一个叫做<code>frontend-svc</code>的Service，这个service选择了所有的<code>app=frontend</code>的pod。在默认情况下，每个service都会有一个cluster内部可以访问到的ip地址，也被称为<code>ClusterIP</code>：</p><p><img src="https://static.purewhite.io/images/2017-12-23-3232AECF-82CA-45DF-B971-1EB278EFD552.png" alt="3232AECF-82CA-45DF-B971-1EB278EFD552"></p><p>用户现在可以通过service的ip地址来访问到pod了，service会负责做负载均衡。</p><p>当转发请求的时候，我们可以选择pod上的目标端口，比如在我们的例子里面，frontend-svc通过80端口来接受用户的请求，然后转发到pod的5000端口。如果目标端口没有被显式声明，那么会默认转发到service接受请求的端口（和service端口一样）。</p><p>一个pod、ip地址和目标端口的元组代表了一个service的endpoint，比如在这个例子里面，frontend-svc有3个endpoints，分别是<code>10.0.1.3:5000</code>, <code>10.0.1.4:5000</code>和<code>10.0.1.5:5000</code>。</p><h1 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h1><p>所有的worker node都有一个后台任务，叫做<code>kube-proxy</code>。这个kube-proxy会检测API Server上对于service和endpoint的新增或者移除。对于每个新的service，在每个node上，kube-proxy都会设置相应的iptables的规则来记录应该转发的地址。当一个service被删除的时候，kube-proxy会在所有的pod上移除这些iptables的规则。</p><p><img src="https://static.purewhite.io/images/2017-12-23-0608F78E-6A96-403A-A9E1-3095AE3625F3.png" alt="0608F78E-6A96-403A-A9E1-3095AE3625F3"></p><h1 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h1><p>我们已经知道，Service是和kubernetes进行沟通的主要方式，那么我们就需要有一个办法来在运行的时候能够对已有的服务进行发现。Kubernetes提供了两种方法：</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>每个pod在worker node上启动的时候，kubelet都会通过环境变量把所有目前可用的service的信息传进去。举个例子，我们有一个叫做<code>redis-master</code>的service，这个service expose了6379的端口，并且ClusterIP是172.17.0.6，那么在一个新创建的pod上，我们可以看到以下环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REDIS_MASTER_SERVICE_HOST=172.17.0.6</span><br><span class="line">REDIS_MASTER_SERVICE_PORT=6379</span><br><span class="line">REDIS_MASTER_PORT=tcp://172.17.0.6:6379</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP=tcp://172.17.0.6:6379</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_PROTO=tcp</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_PORT=6379</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_ADDR=172.17.0.6</span><br></pre></td></tr></table></figure><p>如果使用这个解决方案，我们必须非常小心启动服务的顺序，因为pod不会获得自己启动之后的service的env。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>kubernetes有一些dns的addon，这些addon会自动为所有service创建一个类似<code>my-svc.my-namespace.svc.cluster.local</code>的dns解析，并且在同一个namespace里面的service可以直接用service name进行访问。这是最为推荐的方法。</p><h1 id="Service类型"><a href="#Service类型" class="headerlink" title="Service类型"></a>Service类型</h1><p>当我们定义一个service的时候，我们可以选择可访问的范围，比如：</p><ul><li>是否只能在cluster内部访问</li><li>是否同时可以被cluster内部和外部访问</li><li>是否是映射到一个集群外的entity上</li></ul><p>可访问的范围由service的类型决定，service的类型可以在创建service的时候声明。</p><h3 id="ClusterIP-和-NodePort"><a href="#ClusterIP-和-NodePort" class="headerlink" title="ClusterIP 和 NodePort"></a>ClusterIP 和 NodePort</h3><p>ClusterIP是默认的service type，一个service通过ClusterIP来获取自己的Virtual IP，这个IP是用来和别的service通信的，只能在集群内部被访问。</p><p>NodePort的service type除了会创建一个ClusterIP之外，还会把所有worker node上的一个30000-32767之间的端口映射到这个service，比如假设<code>32233</code>端口映射到了<code>frontend-svc</code>，那么不管我们连接到哪个worker node，我们都会被转发到service分配的ClusterIP——172.17.0.4。</p><p>默认情况下，当expose到有一个nodeport的时候，kubernetes master会自动随机选择一个30000-32767之间的port，当然，我们自己也可以手动指定这个port。</p><p><img src="https://static.purewhite.io/images/2017-12-23-A943E99B-5473-4177-B8AF-543939949F0B.png" alt="A943E99B-5473-4177-B8AF-543939949F0B"></p><p>NodePort的这个service type在我们想要让外网访问我们服务的时候非常有用，用户通过访问node上指定的port就可以访问到这个service。管理员可以在kubernetes集群外再搭一个反向代理就可以更方便地进行访问了。</p><h3 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h3><p>对于LoadBalancer这个Servicetype：</p><ul><li>NodePort和ClusterIP会被自动创建，外部的load balancer会自动路由上去</li><li>service会在一个静态的端口上被暴露</li><li>通过底层的cloud provider提供的load balancer来暴露到外网</li></ul><p><img src="https://static.purewhite.io/images/2017-12-23-8C099E38-B51E-4688-B693-1FF2F46FCE0B.png" alt="8C099E38-B51E-4688-B693-1FF2F46FCE0B"></p><p>LoadBalancer这个service type只有在底层的基础架构支持了自动创建load balancer的时候kubernetes才支持，比如Google Cloud Platform和aws。</p><h3 id="ExternalIP"><a href="#ExternalIP" class="headerlink" title="ExternalIP"></a>ExternalIP</h3><p>如果一个service可以路由到一个或者多个worker node上，那么它可以被映射到一个ExternalIP地址。通过这个ExternalIP进入到集群的流量会被路由到其中一个endpoint上。</p><p><img src="https://static.purewhite.io/images/2017-12-23-1B599B5F-0EA5-46A5-B505-2FC2658AC55C.png" alt="1B599B5F-0EA5-46A5-B505-2FC2658AC55C"></p><p>需要注意的是，ExternalIP并不是由k8s自动管理的，是由管理员手动设置路由到其中的一个node上的。</p><h3 id="ExternalName"><a href="#ExternalName" class="headerlink" title="ExternalName"></a>ExternalName</h3><p>ExternalName是一个特定的service type，这种service type没有任何的selector也没有任何声明的endpoint。当在集群中访问到这个service的时候，会返回一个外部服务的CNAME。</p><p>这个service一般是用来让一个外部的服务在集群内部可以访问到的，比如我们有一个外部服务叫做<code>my-database.example.com</code>，那么我们可以通过设置ExternalName类型的Service，让内部的其它service通过<code>my-database</code>之类的名字访问到这个服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Service 是kubernetes中一个很重要的，也是很有用的概念，我们可以通过service来将pod进行分组，并提供外网的访问endpoint。在这个过程中还有比如&lt;code&gt;kube-proxy&lt;/code&gt;提供了对service的访问。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Building Blocks</title>
    <link href="https://purewhite.io/2017/12/22/kubernetes-building-blocks/"/>
    <id>https://purewhite.io/2017/12/22/kubernetes-building-blocks/</id>
    <published>2017-12-22T15:44:37.000Z</published>
    <updated>2019-03-18T06:14:05.277Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes中有很多积木（Building Blocks），比如object model，pod，rs，deployment，namespace之类，这些都是kubernetes中很重要的东西。</p><a id="more"></a><h1 id="Kubernetes-Object-Model"><a href="#Kubernetes-Object-Model" class="headerlink" title="Kubernetes Object Model"></a>Kubernetes Object Model</h1><p>kubernetes有一个非常完善的对象模型，kubernetes集群可以通过这个对象模型来表现出不同的持久化的整体，比如：</p><ul><li>我们是在哪个node上运行哪个容器化的应用程序？</li><li>应用程序资源消耗</li><li>应用程序不同的策略</li></ul><p>对于每个对象，我们用<code>spec</code>这个field声明我们期望的状态，随后kubernetes会通过<code>status</code>这个field记录对象实际的状态并加以管理。随后，kubernetes的controller manager会想办法让这个对象实际的状态和我们声明期望的状态相同。</p><p>kubernetes中的例子比如：Pods，Deployments，ReplicaSets之类。</p><p>如果我们要创建一个对象，我们需要把<code>spec</code>这个field提供给API Server，这个field会描述我们期望的状态以及一些基础的信息，比如名称。创建对象的API请求必须有<code>spec</code>这个field以及其它详细信息，并且需要是JSON的格式。一般情况下，我们用yaml格式来提供一个对象的声明，kubectl会把这个声明转换成JSON格式，然后传给API Server。</p><p>下面是一个Deployment对象的例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">    replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">             - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.7.9</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>插播一条广告：</p><blockquote><h3 id="Apps"><a href="#Apps" class="headerlink" title="Apps"></a>Apps</h3><p>The core workloads API, which is composed of the DaemonSet, Deployment, ReplicaSet, and StatefulSet kinds, has been promoted to GA stability in the apps/v1 group version. As such, the apps/v1beta2 group version is deprecated, and all new code should use the kinds in the apps/v1 group version.</p></blockquote><p>接着说，apiVersion指定了我们调用的api的endpoint；通过kind field，我们指定了我们要创建的对象的类型；通过metadata，我们给对象附加上了最基本的信息，比如名字；你可以发现这里面有两个<code>spec</code>的field（<code>spec</code>和<code>spec.template.spec</code>），通过 <code>spec</code>，我们定义了我们对deployment的期望状态，在我们的例子中，我们想要确认，在任何时候，都有至少3个pod在运行。我们再在<code>spec.template.spec</code>里面定义我们要运行的每个pod都应该是什么状态，所以这就是为啥这里会有两个spec的原因。</p><p>一旦这个对象被创建了，kubernetes会直接给对象添加一个<code>status</code>的field，如下：</p><p><img src="https://static.purewhite.io/images/2017-12-22-70B197CF-63EA-401C-B029-AFC9F9271D91.png" alt="70B197CF-63EA-401C-B029-AFC9F9271D91"></p><h1 id="Pods"><a href="#Pods" class="headerlink" title="Pods"></a>Pods</h1><p>Pod是kubernetes中最简单也是最小的一个对象，是kubernetes部署的一个单元，代表了应用的一个单一实例。一个Pod是一个或者多个容器的逻辑上的集合，这些容器拥有以下的特性：</p><ul><li>在同一个host上一起进行调度</li><li>共享同一个network namespace</li><li>挂载同样的external storage（volumes）</li></ul><p><img src="https://static.purewhite.io/images/2017-12-22-38D8B067-9AD2-4CE0-85C5-70C3D5538FB0.png" alt="38D8B067-9AD2-4CE0-85C5-70C3D5538FB0"></p><p>Pod并非一个持久化的东西，很有可能突然挂了，并且没有能力自我修复，这就是为啥我们把它们和controller一起用，这样可以来控制pod的replica，容错，自我修复等等。比较有名的例子比如Deployments，ReplicaSets等。我们通过把Pod的定义（specification，也就是<code>spec</code>）附加到别的对象（也就是之前用的<code>template.spec</code>）来完成。</p><h1 id="Labels"><a href="#Labels" class="headerlink" title="Labels"></a>Labels</h1><p>Labels都是键值对，这些键值对可以被attach到kubernetes的对象上，比如Pod。Labels一般被用来组织和选择一些符合条件的对象。label不提供唯一性。</p><p><img src="https://static.purewhite.io/images/2017-12-22-5594660A-4922-497F-9BB6-69CDE96238B3.png" alt="5594660A-4922-497F-9BB6-69CDE96238B3"></p><p>通过这个图片，我们可以看到我们用了两个label：<code>app</code>和<code>env</code>。基于我们的需求，我们可以给我们的pod不同的值。</p><h1 id="Label-Selectors"><a href="#Label-Selectors" class="headerlink" title="Label Selectors"></a>Label Selectors</h1><p>通过Label  Selectors，我们可以选择一系列的对象，Kubernetes支持两种Selector类型：</p><h3 id="Equality-Based-Selectors"><a href="#Equality-Based-Selectors" class="headerlink" title="Equality-Based Selectors"></a>Equality-Based Selectors</h3><p>顾名思义，这种selector通过 <code>==</code> 或者 <code>!=</code> 来进行选择，比如我们选择一个 <code>env==dev</code> 的对象，就会找出所有有env label，并且值为dev的。</p><h3 id="Set-Based-Selectors"><a href="#Set-Based-Selectors" class="headerlink" title="Set-Based Selectors"></a>Set-Based Selectors</h3><p>这种selector支持通过一系列的值来进行过滤，比如通过<code>in</code>, <code>notin</code>和<code>exist</code>。</p><p>举例：<code>env in (dev, qa)</code></p><p><img src="https://static.purewhite.io/images/2017-12-22-9DCAECB6-54CF-4789-94B8-4332BABE4B53.png" alt="9DCAECB6-54CF-4789-94B8-4332BABE4B53"></p><h1 id="Replication-Controllers"><a href="#Replication-Controllers" class="headerlink" title="Replication Controllers"></a>Replication Controllers</h1><p>一个 ReplicationController（rc）是master node上Controller Manager的一部分，主要作用是保证每个pod的replica都达到了预期值。不然的话会通过杀死或者新建pod的办法来达到。不过现在已经被ReplicaSet(rs)取代了。</p><h1 id="Replica-Sets"><a href="#Replica-Sets" class="headerlink" title="Replica Sets"></a>Replica Sets</h1><p>Replica Set是下一代的Replication Controller，好处在于同时支持equality 和 set based selector（rc只支持equality-based）。目前这是唯一的区别。</p><p>Rs可以单独使用，不过一般是配合deployment一起用。Deployment会自动创建rs来管理下面的pod。</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>deployment提供了对于pod和rs的陈述性更新。DeploymentController是master node上Controller Manager的一部分，作用和Controller manager别的一样——确保当前的状态和期望的状态相同。</p><p>在下面这个例子中，我们的deployment创建了一个 rs A，然后rs A又创建了3个pod，并且在每个pod中，都有一个跑了nginx:1.7.9镜像的容器。</p><p><img src="https://static.purewhite.io/images/2017-12-22-1A74F83F-00D9-4954-9737-D6C1BBAE3EF3.png" alt="1A74F83F-00D9-4954-9737-D6C1BBAE3EF3"></p><p>接下来，在下一个deployment中，我们修改了pod的template，把nginx从1.7.9升级到了1.9.1。因为我们升级了期望的状态，所以deployment会创建一个新的rs B，这个过程被称为Deployment rollout：</p><p><img src="https://static.purewhite.io/images/2017-12-22-D9667D97-B328-4C19-AA9F-FD9E7CDEDD65.png" alt="D9667D97-B328-4C19-AA9F-FD9E7CDEDD65"></p><p>当rs B创建完毕的时候，deployment开始指向它：</p><p><img src="https://static.purewhite.io/images/2017-12-22-652F4886-8F15-4C27-9DDF-8C1DA7D1DF11.png" alt="652F4886-8F15-4C27-9DDF-8C1DA7D1DF11"></p><p>在rs之上，deployment提供了很多特性比如recording，通过这个特性，如果说更新出错，或者更新后的应用出了bug，我们可以rollback到原先的状态。</p><h1 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h1><p>如果我们有无数个用户，我们想把这些用户组织到不同的team或者project，我们可以通过namespace把kubernetes集群分成好多个小集群。所有在namespace中创建的resources/objects都是唯一的，不会跨命名空间。</p><p>一般来说，k8s会有两个默认namespace：kube-system和default。kube-system一般会用来放一些kubernetes系统的组件，default会用来放一些属于其它namespace的对象。我们默认情况下是会连接到default命名空间。kube-public是一个特殊的namespace，可以被所有的用户读，一般用于特殊情况比如初始化一个集群。</p><p>我们可以通过使用资源配额（Resource Quotas）来限制每个命名空间的资源。</p><p>最后再插播一条广告：</p><blockquote><p><img src="https://static.purewhite.io/images/2017-12-22-C8E9D1AC-E8F8-4544-8DB0-F4EAA6905F56.png" alt="C8E9D1AC-E8F8-4544-8DB0-F4EAA6905F56"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes中有很多积木（Building Blocks），比如object model，pod，rs，deployment，namespace之类，这些都是kubernetes中很重要的东西。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes安装</title>
    <link href="https://purewhite.io/2017/12/22/install-kubernetes/"/>
    <id>https://purewhite.io/2017/12/22/install-kubernetes/</id>
    <published>2017-12-22T09:43:49.000Z</published>
    <updated>2019-03-18T06:14:05.096Z</updated>
    
    <content type="html"><![CDATA[<p>在这篇文章里，会主要记录一下kubernetes安装相关的信息。</p><a id="more"></a><h1 id="Kubernetes-设置"><a href="#Kubernetes-设置" class="headerlink" title="Kubernetes 设置"></a>Kubernetes 设置</h1><p>Kubernetes可以通过不同的设置安装，比较普遍的四种安装方法如下：</p><h3 id="All-in-One-Single-Node-Installation"><a href="#All-in-One-Single-Node-Installation" class="headerlink" title="All-in-One Single-Node Installation"></a>All-in-One Single-Node Installation</h3><p>在这种模式下，所有的master和worker组件都被安装在一个node上，这对学习、开发和测试非常有用，但是不应该被用在生产环境中。minikube就是一个例子。</p><h3 id="Single-Node-etcd-Single-Master-and-Multi-Worker-Installation"><a href="#Single-Node-etcd-Single-Master-and-Multi-Worker-Installation" class="headerlink" title="Single-Node etcd, Single-Master, and Multi-Worker Installation"></a>Single-Node etcd, Single-Master, and Multi-Worker Installation</h3><p>在这种模式下，我们有一个单独的master node，在这个master node上同时也跑了一个单节点的etcd实例。多个worker node都连接到这一个master node。</p><h3 id="Single-Node-etcd-Multi-Master-and-Multi-Worker-Installation"><a href="#Single-Node-etcd-Multi-Master-and-Multi-Worker-Installation" class="headerlink" title="Single-Node etcd, Multi-Master, and Multi-Worker Installation"></a>Single-Node etcd, Multi-Master, and Multi-Worker Installation</h3><p>在这种模式下，我们有多个Master node，master node将会在HA模式下工作，但是我们只有一个单节点的etcd实例。多个的worker node都会连接到多个master node上去。</p><h3 id="Multi-Node-etcd-Multi-Master-and-Multi-Worker-Installation"><a href="#Multi-Node-etcd-Multi-Master-and-Multi-Worker-Installation" class="headerlink" title="Multi-Node etcd, Multi-Master, and Multi-Worker Installation"></a>Multi-Node etcd, Multi-Master, and Multi-Worker Installation</h3><p>在这种模式下，etcd被设置成了集群模式，并且在kubernetes集群之外。所有的Node都会连接到它上面去。所有的master node都被设置为HA模式，并且连接到所有的worker node上。Production都应该这么玩。</p><h1 id="Kubernetes需要的基础设施"><a href="#Kubernetes需要的基础设施" class="headerlink" title="Kubernetes需要的基础设施"></a>Kubernetes需要的基础设施</h1><p>当我们决定了安装的类型，我们同时需要决定一下基础架构相关的决定，比如：</p><ul><li>我们应该在裸机上安装k8s，还是在公有云，还是在私有云？</li><li>我们应该用哪种操作系统？RHEL，CoreOS，CentOS？</li><li>我们应该用哪种网络解决方案？</li><li>以及其它的。</li></ul><h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><p>本地安装推荐使用 minikube。</p><h3 id="在虚拟机或者裸机上"><a href="#在虚拟机或者裸机上" class="headerlink" title="在虚拟机或者裸机上"></a>在虚拟机或者裸机上</h3><p>kubernetes都支持安装在虚拟机或者裸机上，有很多工具比如ansible和kubeadm同时支持这两种安装。</p><h3 id="安装在云上"><a href="#安装在云上" class="headerlink" title="安装在云上"></a>安装在云上</h3><p>这个就不用多说了，交保护费即可。</p><h1 id="Kubernetes安装工具"><a href="#Kubernetes安装工具" class="headerlink" title="Kubernetes安装工具"></a>Kubernetes安装工具</h1><p>目前比较有名的有三个：kubeadm, kubespray, kops。</p><p>区别在于，kubeadm支持任何环境，kubespray是基于ansible的，kops目前和aws和gce强耦合。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这篇文章里，会主要记录一下kubernetes安装相关的信息。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 架构 Overview</title>
    <link href="https://purewhite.io/2017/12/22/kubernetes-concepts/"/>
    <id>https://purewhite.io/2017/12/22/kubernetes-concepts/</id>
    <published>2017-12-22T05:51:13.000Z</published>
    <updated>2019-03-18T06:14:05.383Z</updated>
    
    <content type="html"><![CDATA[<p>最近正在复习准备考试，于是一边复习一遍写成博客，印证自己所学。</p><a id="more"></a><h1 id="Kubernetes架构"><a href="#Kubernetes架构" class="headerlink" title="Kubernetes架构"></a>Kubernetes架构</h1><p>从高层看，kubernetes是由如下东西组成的：</p><ul><li>一个或多个master node</li><li>一个或多个worker node</li><li>一个分布式的key-value存储，比如<code>etcd</code></li></ul><p><img src="https://static.purewhite.io/images/2017-12-22-2FDF2789-F7EA-4EE6-8561-6FE7AD4A79D6.png" alt="2FDF2789-F7EA-4EE6-8561-6FE7AD4A79D6"></p><h1 id="Master-Node"><a href="#Master-Node" class="headerlink" title="Master Node"></a>Master Node</h1><p>Master node 是集群管理者，我们发出的所有请求都是到master node的api server上。</p><p>一个集群可以有多个master node做HA，当有多个master node的时候，只有一个会提供服务，剩下的都是follower。</p><p>集群的状态一般存储在<code>etcd</code>里面，所有的master node都会连接到etcd。etcd是一个分布式k-v存储。etcd可以是master内部的，也可以是外部的。</p><h3 id="Master-node的组件"><a href="#Master-node的组件" class="headerlink" title="Master node的组件"></a>Master node的组件</h3><p>master node一般都有如下组件：</p><h4 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h4><p>所有的操作都是通过 API Server 去完成的。每个用户/操作者通过发送REST请求到api server，然后api server先验证然后执行这些操作。在执行完之后把集群的状态存到etcd里面。</p><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><p>顾名思义，Scheduler的作用是调度，Scheduler拥有所有worker node的资源使用情况，同时也知道用户设置的资源需求，比如说一个 <code>disk=ssd</code>的label。在调度之前，scheduler还会考虑到service requirements，data locality，affinity，anti-affinity等。scheduler负责的是service和pod的调度。</p><h4 id="Controller-Manager"><a href="#Controller-Manager" class="headerlink" title="Controller Manager"></a>Controller Manager</h4><p>简单来说，Controller Manager是负责启动和关闭pod的。Controller Manager的任务是让集群维持在期望的状态上。Controller Manager知道每个Pod的状态应该是什么样，然后会不断检测是否有不达标的pod。</p><h1 id="Worker-Node"><a href="#Worker-Node" class="headerlink" title="Worker Node"></a>Worker Node</h1><p>Worker Node就是一个被master node控制的机器，Pod一般都是调度到worker node里面的。Worker node会有一些可以运行以及连接容器的工具。Pod是kubernetes里面的调度单元，是一个或多个容器组成的通常一起调度的逻辑上的集合。</p><p><img src="https://static.purewhite.io/images/2017-12-22-D012D35E-5431-411E-AD4A-829A268E0875.png" alt="D012D35E-5431-411E-AD4A-829A268E0875"></p><h3 id="Worker-Node组件"><a href="#Worker-Node组件" class="headerlink" title="Worker Node组件"></a>Worker Node组件</h3><p>一个worker node一般会有以下组件：</p><h4 id="Contrainer-Runtime"><a href="#Contrainer-Runtime" class="headerlink" title="Contrainer Runtime"></a>Contrainer Runtime</h4><p>不用多说了，运行容器必备的，默认用的是Docker</p><h4 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h4><p>kubelet是在每个worker node上都会运行的，用来和master node通信的。kubelet从master接收pod的定义，然后启动里面的容器，并监控容器是否一直正常运行。</p><h4 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h4><p>kube-proxy简单来说，就是对外提供代理服务的。换句话说，没有kube-proxy，我们要访问其中的application，就得直接访问到worker node上，这显然是不合理的。我们可以通过kube-proxy来做load balancer等。以前版本的Service也借助了kube-proxy。</p><h1 id="用etcd来管理状态"><a href="#用etcd来管理状态" class="headerlink" title="用etcd来管理状态"></a>用etcd来管理状态</h1><p>在kubernetes里面，都是用的etcd来管理所有的状态。除了集群的状态之外，还会用来存放一些信息，比如configmap，secret。</p><h1 id="网络需求"><a href="#网络需求" class="headerlink" title="网络需求"></a>网络需求</h1><p>为了启动一个全功能的kubernetes集群，我们需要先确认以下信息：</p><ul><li>每个Pod有唯一一个独立的IP</li><li>每个Pod里面的容器可以互相沟通</li><li>Pod之间可以互相沟通</li><li>通过设置，在Pod里面的application可以被外部访问到</li></ul><p>这些问题都是需要在部署之前被解决的。</p><p>我们一个个看：</p><h3 id="给每个Pod分配一个独立的IP"><a href="#给每个Pod分配一个独立的IP" class="headerlink" title="给每个Pod分配一个独立的IP"></a>给每个Pod分配一个独立的IP</h3><p>在kubernetes里面，每个Pod都要有一个独立的IP。一般容器网络有两种规格：</p><ul><li>Container Network Model (CNM)</li><li>Container Network Interface (CNI)</li></ul><p>Kubernetes用CNI来给Pod分配IP</p><p><img src="https://static.purewhite.io/images/2017-12-22-CA97E57F-D3C7-4BF0-BD0F-AB8E83838655.png" alt="CA97E57F-D3C7-4BF0-BD0F-AB8E83838655"></p><p>简单来说，容器运行时向CNI申请IP，然后CNI通过其下面指定的plugin来获取到IP，并且返回给容器运行时。</p><h3 id="容器之间交流"><a href="#容器之间交流" class="headerlink" title="容器之间交流"></a>容器之间交流</h3><p>一般基于底层操作系统的帮助，所有的容器运行时都会给每个容器创建一个独立的隔离的网络整体。在Linux上，这个整体被称为Network Namespace，这些Network Namespace可以在容器之间共享。</p><p>在一个Pod里面，容器共享Network Namespace，所以所有在同一个Pod里面的容器可以通过localhost来互相访问。</p><h3 id="跨Node的Pod之间访问"><a href="#跨Node的Pod之间访问" class="headerlink" title="跨Node的Pod之间访问"></a>跨Node的Pod之间访问</h3><p>在一个集群的环境下，每个Pod可以被调度到任何一个Node上，我们需要让在不同机器上的Pod也可以相互通信，并且任何Node都可以访问到任何Pod。Kubernetes设定了一个条件：不能有任何的NAT转换，我们可以通过以下方式来达成：</p><ul><li>可路由（Routable）的Pod和Node，通过底层的服务，比如GCE。</li><li>通过一些软件定义的网络（Software Defined Networking），比如flannel，weave，calico等</li></ul><p>更多的信息可以看看kubernetes的官方文档。</p><h3 id="外网和集群之间的访问"><a href="#外网和集群之间的访问" class="headerlink" title="外网和集群之间的访问"></a>外网和集群之间的访问</h3><p>我们可以通过<code>kube-proxy</code>来暴露我们的service，然后就能从外面访问到我们集群里面的应用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正在复习准备考试，于是一边复习一遍写成博客，印证自己所学。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>《Head First 设计模式》读书笔记0.5 —— 引子</title>
    <link href="https://purewhite.io/2017/12/21/design-pattern-opening-words/"/>
    <id>https://purewhite.io/2017/12/21/design-pattern-opening-words/</id>
    <published>2017-12-21T09:23:12.000Z</published>
    <updated>2019-03-18T06:14:03.392Z</updated>
    
    <content type="html"><![CDATA[<p>为什么引子我还要写一篇文章呢？因为引子介绍了很多关于大脑认知的知识，这本书运用了其中的很多知识来写作，这也是这本书为什么如此火如此出名的原因。我认为这可能会对我工作或者学习产生帮助，所以记录下来。</p><a id="more"></a><h2 id="大脑总是渴求一些奇怪的东西"><a href="#大脑总是渴求一些奇怪的东西" class="headerlink" title="大脑总是渴求一些奇怪的东西"></a>大脑总是渴求一些<code>奇怪</code>的东西</h2><p>好吧，原文意思是，大脑总是渴求一些新奇的东西，或者不寻常的事物发生，我们的大脑不会注意一些习以为常的东西，比如我们不会注意很平常的路人，但是会注意到很多“特立独行”的人。</p><p>比如说，当你拿到一本500页的教科书，书上密密麻麻都是文字，你的大脑肯定想着“**，又是这种玩意儿，无聊……”</p><p>但是如果当你拿到一本 日本H二次元漫画，还是 时崎狂三 或者 穹妹 的这个时候你的大脑就会……</p><p>或者再举个例子，如果你就普通的在路上走，你的大脑会努力的去排除那些不重要的东西，但是如果你走着走着，突然你面前蹦出一个大老虎，你的大脑肯定一下子就情绪爆发（原文）了。</p><p>Head first系列通过一些最新的认知科学、神经生物学和教育心理学来创作，有以下一些原则：</p><ol><li>看得到。与单纯的文字相比，图片更能让人记得住，通过图片，学习效率会更高，甚至能有多达89%的提高。</li><li>采用一种针对个人式的交谈式风格。</li><li>让学习的人想得更深。</li><li>引起读者的注意，而且要让他一直保持注意。</li><li>影响读者的情绪。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么引子我还要写一篇文章呢？因为引子介绍了很多关于大脑认知的知识，这本书运用了其中的很多知识来写作，这也是这本书为什么如此火如此出名的原因。我认为这可能会对我工作或者学习产生帮助，所以记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://purewhite.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://purewhite.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="go" scheme="https://purewhite.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>使用 kubeadm 创建一个 kubernetes 集群</title>
    <link href="https://purewhite.io/2017/12/17/use-kubeadm-setup-k8s/"/>
    <id>https://purewhite.io/2017/12/17/use-kubeadm-setup-k8s/</id>
    <published>2017-12-17T09:22:34.000Z</published>
    <updated>2019-03-18T06:14:08.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>kubeadm</code>是一个<code>kubernetes</code>官方提供的快速安装和初始化拥有<strong>最佳实践（best practice）</strong>的<code>kubernetes</code>集群的工具，虽然目前还处于 beta 和 alpha 状态，还不能用在生产环境，但是我们可以通过学习这种部署方法来体会一些官方推荐的kubernetes最佳实践的设计和思想。</p><a id="more"></a><p><code>kubeadm</code>的目标是提供一个最小可用的可以通过<code>Kubernetes一致性测试</code>的集群，所以并不会安装任何除此之外的非必须的addon。</p><p><code>kubeadm</code>默认情况下并不会安装一个网络解决方案，所以用<code>kubeadm</code>安装完之后 需要自己来安装一个网络的插件。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p><code>kubeadm</code>支持多种系统，这里简单介绍一下需要的系统要求：</p><ol><li>Ubuntu16.04+ / Debian 9 / CentOS 7 / RHEL 7 / Fedora 25/26(best-effort) / HypriotOS v1.0.1+ / Other</li><li>2GB或者以上的RAM（否则将没有足够空间留给app）</li><li>2核以上CPU</li><li>集群的机器之间必须能通过网络互相通信</li><li><strong><u>SWAP必须被关闭，否则<code>kubelet</code>会出错！</u></strong></li></ol><p>具体的详细信息可以在官方网站上看到。</p><p>本篇内容基于aws的ap-northeast-1的ec2，<code>CentOS 7</code>的操作系统（ami-4dd5522b），实例类型t2.medium 2核4GB，3台机器，1 master，2 nodes，kubernetes 1.9 版本。为了方便起见，在安全组里面打开了所有的端口和IP访问。</p><p>机器配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[centos@ip-172-31-24-49 ~]$ uname -a</span><br><span class="line">Linux ip-172-31-24-49.ap-northeast-1.compute.internal 3.10.0-693.5.2.el7.x86_64 #1 SMP Fri Oct 20 20:32:50 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>首先 ，我们关闭selinux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/sysconfig/selinux</span></span><br></pre></td></tr></table></figure><p><img src="https://static.purewhite.io/images/2017-12-17-91C23F22-58A4-4F03-842F-97018D78F9D8.png" alt="91C23F22-58A4-4F03-842F-97018D78F9D8"></p><p>把SELINUX改成disabled，然后保存退出。</p><p>在我用的ami中，swap是默认关闭的，所以不需要我手动关闭，大家需要确认 自己的环境中swap是否有关闭掉，否则会在之后的环节中出问题。</p><p>为了方便我们安装，我们将sshd设置为keepalive：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo -i</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"ClientAliveInterval 10"</span> &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"TCPKeepAlive yes"</span> &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart sshd.service</span></span><br></pre></td></tr></table></figure><p>接下来我们重启一下机器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo sync</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo reboot</span></span><br></pre></td></tr></table></figure><p>至此，准备阶段结束。</p><h2 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h2><p>首先，我们需要在所有机器上都安装<code>docker</code>, <code>kubeadm</code>, <code>kubelet</code>和<code>kubectl</code>。</p><p>切记：<strong><code>kubeadm</code>不会自动去安装和管理 <code>kubelet</code>和<code>kubectl</code>，所以需要自己去确保安装的版本和你想要安装的<code>kubernetes</code>版本相同。</strong></p><p>安装<code>docker</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker &amp;&amp; sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><p>在RHEL/CentOS 7 系统上可能会路由失败，我们需要设置一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo -i</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sysctl --system</span></span><br></pre></td></tr></table></figure><p>接下来我们需要安装<code>kubeadm</code>, <code>kubelet</code>和<code>kubectl</code>了，我们需要先加一个repo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y kubelet kubeadm kubectl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> kubelet &amp;&amp; sudo systemctl start kubelet</span></span><br></pre></td></tr></table></figure><p>至此，在所有机器上安装所需的软件已经结束。</p><h2 id="使用kubeadm初始化master"><a href="#使用kubeadm初始化master" class="headerlink" title="使用kubeadm初始化master"></a>使用kubeadm初始化master</h2><p>安装完所有的依赖之后，我们就可以用<code>kubeadm</code>初始化master了。</p><p>最简单的初始化方法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubeadm init</span></span><br></pre></td></tr></table></figure><p>除此之外，<code>kubeadm</code>还支持多种方法来配置，具体可以查看一下官方文档。</p><p>我们在初始化的时候指定一下kubernetes版本，并设置一下pod-network-cidr（后面的flannel会用到）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo -i</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubeadm init --kubernetes-version=v1.9.0 --pod-network-cidr=10.244.0.0/16</span></span><br></pre></td></tr></table></figure><p>在这个过程中<code>kubeadm</code>执行了一系列的操作，包括一些pre-check，生成ca证书，安装etcd和其它控制组件等。</p><p>界面差不多如下：</p><p><img src="https://static.purewhite.io/images/2017-12-17-2256534A-2144-4118-843C-7179EF34EC49.png" alt="2256534A-2144-4118-843C-7179EF34EC49"></p><p>最下面的这行<code>kubeadm join</code>什么的，就是用来让别的node加入集群的，可以看出非常方便。我们要保存好这一行东西，这是我们之后让node加入集群的凭据，一会儿会用到。</p><p>这个时候，我们还不能通过<code>kubectl</code>来控制集群，要让<code>kubectl</code>可用，我们需要做：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对于非root用户</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p <span class="variable">$HOME</span>/.kube</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于root用户</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以直接放到~/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"export KUBECONFIG=/etc/kubernetes/admin.conf"</span> &gt;&gt; ~/.bash_profile</span></span><br></pre></td></tr></table></figure><p>接下来要注意，我们<strong>必须</strong>自己来安装一个network  addon。</p><p><strong><u>network addon必须在任何app部署之前安装好。同样的，<code>kube-dns</code>也会在network addon安装好之后才启动。<code>kubeadm</code>只支持CNI-based networks（不支持<code>kubenet</code>）。</u></strong></p><p>比较常见的network addon有：<code>Calico</code>, <code>Canal</code>, <code>Flannel</code>, <code>Kube-router</code>, <code>Romana</code>, <code>Weave Net</code>等。这里我们使用<code>Flannel</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml</span></span><br></pre></td></tr></table></figure><p>安装完network之后，你可以通过<code>kubectl get pods --all-namespaces</code>来查看<code>kube-dns</code>是否在running来判断network是否安装成功。</p><p>默认情况下，为了保证master的安全，master是不会被调度到app的。你可以取消这个限制通过输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl taint nodes --all node-role.kubernetes.io/master-</span></span><br></pre></td></tr></table></figure><h2 id="加入nodes"><a href="#加入nodes" class="headerlink" title="加入nodes"></a>加入nodes</h2><p>终于部署完了我们的master！</p><p>现在我们开始加入一些node到我们的集群里面吧！</p><p>ssh到我们的node节点上，执行刚才下面给出的那个 <code>kubeadm join</code>的命令（每个人不同）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo -i</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubeadm join --token 72a8a4.2ed9076cd668b8b7 172.31.31.60:6443 --discovery-token-ca-cert-hash sha256:f0894e55d475f882dd40d52c6d01f758017ec5729be632294049f687330f60d2</span></span><br></pre></td></tr></table></figure><p>输出差不多如下图：</p><p><img src="https://static.purewhite.io/images/2017-12-17-1E93FFDE-F0FE-4C7B-9207-6B8DF3EE7787.png" alt="1E93FFDE-F0FE-4C7B-9207-6B8DF3EE7787"></p><p>这时候，我们去master上输入<code>kubectl get nodes</code>查看一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@i-071abd86ed304dc84 ~]# kubectl get nodes</span><br><span class="line">NAME                  STATUS    ROLES     AGE       VERSION</span><br><span class="line">i-071abd86ed304dc84   Ready     master    12m       v1.9.0</span><br><span class="line">i-0c559ad3c0b16fd36   Ready     &lt;none&gt;    1m        v1.9.0</span><br><span class="line">i-0f3f7462b0a004b5e   Ready     &lt;none&gt;    47s       v1.9.0</span><br></pre></td></tr></table></figure><p>成功！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们可以看到，用<code>kubeadm</code>部署可以让我们比手动部署方便得多，虽然比不上<code>kops</code>这样的一键部署生产Kubernetes集群的工具，但是<code>kubeadm</code>最初的设计也并非是傻瓜式使用。</p><p><code>kubeadm</code>给了用户很多的灵活性，让用户可以完全自定义地去配置自己的集群。</p><p>不过目前（截止博客发布为止），<code>kubeadm</code>还只是在测试，官方还不建议在生产环境中使用，不过预计会在2018年春季可以投入生产使用。</p><p>最后，我们总结一下<code>kubeadm</code>最核心的几个概念：</p><ul><li>官方认为的 最佳实践（best-practice）</li><li>合理的安全（reasonably secure）</li><li>可扩展（extensible）</li><li>最小可用（minimum viable）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;kubeadm&lt;/code&gt;是一个&lt;code&gt;kubernetes&lt;/code&gt;官方提供的快速安装和初始化拥有&lt;strong&gt;最佳实践（best practice）&lt;/strong&gt;的&lt;code&gt;kubernetes&lt;/code&gt;集群的工具，虽然目前还处于 beta 和 alpha 状态，还不能用在生产环境，但是我们可以通过学习这种部署方法来体会一些官方推荐的kubernetes最佳实践的设计和思想。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://purewhite.io/categories/kubernetes/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="kubernetes" scheme="https://purewhite.io/tags/kubernetes/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CAS认证</title>
    <link href="https://purewhite.io/2017/12/14/cas-authentication/"/>
    <id>https://purewhite.io/2017/12/14/cas-authentication/</id>
    <published>2017-12-14T01:51:49.000Z</published>
    <updated>2019-03-18T06:14:03.157Z</updated>
    
    <content type="html"><![CDATA[<p>工作需要学习CAS，所以边学边写博客来印证自己所学。</p><p>CAS——Central Authentication Service，集中式认证服务，顾名思义就是把一个网站群的用户认证挪到同一个地方去进行。</p><a id="more"></a><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>CAS架构如下图：</p><p><img src="https://static.purewhite.io/images/2017-12-14-cas_architecture.png" alt="cas_architecture"></p><p>可以看出来，CAS主要是用在网站群里面。想想也是，如果有好多个网站都需要用户认证，不可能每个网站自己维护一套用户认证系统，不然维护和开发起来不是太麻烦了，所以需要把用户认证挪到同一个地方去集中地进行，这就是CAS的思想。</p><p>CAS服务器和App服务器通过协议进行交互，其实也就是相当于我们经常说的“解耦”，把用户认证的体系给单独剥离出来，使得用户认证体系可以在所有网站中复用。这么说来还有点微服务的意思？其实很多想法都是殊途同归的。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://static.purewhite.io/images/2017-12-14-cas_flow_diagram.png" alt="cas_flow_diagram"></p><p>这是CAS主要的流程，简单来说就是在访问服务器的时候，如果发现没有session，就去CAS Server验证一下，CAS的TGT是为了不让用户重复登录的一个ticket。</p><p>CAS Server验证完了身份，就给一个ST，让用户拿给app，app用ST去CAS Server获取到用户的信息，于是创建session。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作需要学习CAS，所以边学边写博客来印证自己所学。&lt;/p&gt;
&lt;p&gt;CAS——Central Authentication Service，集中式认证服务，顾名思义就是把一个网站群的用户认证挪到同一个地方去进行。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://purewhite.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>《Head First 设计模式》读书笔记0 —— 总览</title>
    <link href="https://purewhite.io/2017/12/11/design-pattern-overview/"/>
    <id>https://purewhite.io/2017/12/11/design-pattern-overview/</id>
    <published>2017-12-11T11:56:07.000Z</published>
    <updated>2019-03-18T06:14:03.525Z</updated>
    
    <content type="html"><![CDATA[<p>开始看《Head First 设计模式》，接下来（可能）会写一系列的博客关于设计模式，先在这里挖个坑。。。</p><a id="more"></a><h2 id="为什么要学设计模式"><a href="#为什么要学设计模式" class="headerlink" title="为什么要学设计模式"></a>为什么要学设计模式</h2><p>因为<strong>有些人已经解决你的问题了</strong>。你的问题别人已经遇到过了，也解决了，我们应该学习别人的经验并进行复用。</p><p>设计模式大都是一些良好的OO实践，其中能反映出很多OO的设计原则。</p><p>使用模式最好的方法是：“<strong>把模式装进脑子里，然后在你的设计和已有的应用中，寻找何处可以使用它们</strong>。”</p><h2 id="大致有哪些设计模式"><a href="#大致有哪些设计模式" class="headerlink" title="大致有哪些设计模式"></a>大致有哪些设计模式</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h4 id="让你的对象知悉现状"><a href="#让你的对象知悉现状" class="headerlink" title="让你的对象知悉现状"></a>让你的对象知悉现状</h4><p><strong>有趣的事情发生时，可千万别错过了！</strong></p><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><h4 id="装饰对象"><a href="#装饰对象" class="headerlink" title="装饰对象"></a>装饰对象</h4><p><strong>给爱用继承的人一个全新的设计眼界</strong></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="烘烤OO的精华"><a href="#烘烤OO的精华" class="headerlink" title="烘烤OO的精华"></a>烘烤OO的精华</h4><p><strong>装备好开始烘烤某些松耦合的OO设计。</strong></p><h3 id="单实例模式"><a href="#单实例模式" class="headerlink" title="单实例模式"></a>单实例模式</h3><h4 id="独一无二的对象"><a href="#独一无二的对象" class="headerlink" title="独一无二的对象"></a>独一无二的对象</h4><p><strong>单实例模式：用来创建独一无二的，只能有一个实例的对象的入场券。</strong></p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h4 id="封装调用"><a href="#封装调用" class="headerlink" title="封装调用"></a>封装调用</h4><p><strong>把封装带到一个全新的境界：把方法调用封装起来。</strong></p><h3 id="适配器模式与外观模式"><a href="#适配器模式与外观模式" class="headerlink" title="适配器模式与外观模式"></a>适配器模式与外观模式</h3><h4 id="随遇而安"><a href="#随遇而安" class="headerlink" title="随遇而安"></a>随遇而安</h4><p><strong>把方块放进圆洞中。</strong></p><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><h4 id="封装算法"><a href="#封装算法" class="headerlink" title="封装算法"></a>封装算法</h4><p><strong>封装完对象……接下来呢？</strong></p><h3 id="迭代器与组合模式"><a href="#迭代器与组合模式" class="headerlink" title="迭代器与组合模式"></a>迭代器与组合模式</h3><h4 id="管理良好的集合"><a href="#管理良好的集合" class="headerlink" title="管理良好的集合"></a>管理良好的集合</h4><p><strong>有许多种方法可以把对象堆起来成为一个集合。</strong></p><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h4 id="事物的状态"><a href="#事物的状态" class="headerlink" title="事物的状态"></a>事物的状态</h4><p><strong>基本常识：策略模式和状态模式是双胞胎，在出生时才分开。</strong></p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="控制对象访问"><a href="#控制对象访问" class="headerlink" title="控制对象访问"></a>控制对象访问</h4><p><strong>玩过扮白脸、扮黑脸的游戏吗？</strong></p><h3 id="复合模式"><a href="#复合模式" class="headerlink" title="复合模式"></a>复合模式</h3><h4 id="模式中的模式"><a href="#模式中的模式" class="headerlink" title="模式中的模式"></a>模式中的模式</h4><p><strong>谁料得到模式居然可以携手合作？</strong></p><h2 id="与设计模式相处"><a href="#与设计模式相处" class="headerlink" title="与设计模式相处"></a>与设计模式相处</h2><h3 id="真实世界中的模式"><a href="#真实世界中的模式" class="headerlink" title="真实世界中的模式"></a>真实世界中的模式</h3><p><strong>现在你已经准备好迎接一个充满设计模式的崭新世界。</strong></p><h2 id="其它设计模式"><a href="#其它设计模式" class="headerlink" title="其它设计模式"></a>其它设计模式</h2><p>略……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始看《Head First 设计模式》，接下来（可能）会写一系列的博客关于设计模式，先在这里挖个坑。。。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://purewhite.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://purewhite.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="go" scheme="https://purewhite.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>东华大学DHU抢课助手使用手册 &amp; 更新地址</title>
    <link href="https://purewhite.io/2017/06/08/readme-for-dhu-select-course/"/>
    <id>https://purewhite.io/2017/06/08/readme-for-dhu-select-course/</id>
    <published>2017-06-08T13:00:00.000Z</published>
    <updated>2019-03-18T06:14:07.334Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最新版本：V2.1，20171225，支持第二次选课，下载地址在最下方</strong></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>作者保留一切权利，<strong>禁止任何第三方销售</strong>及对程序进行逆向工程。由于每个学期选课参数将调整，所以作者不保证过时版本的可用性。</p><p><strong>作者制作这个软件是以学习为目的，并基于方便大家的精神而将软件公开给大家使用。使用者需要认可使用本软件引起的一切后果都与作者无关。</strong></p><p>作者QQ：3117474288</p><p>作者博客：<a href="https://purewhite.io/">Pure White</a></p><a id="more"></a><p><strong>一定要在第二次选课正式开始后再使用！</strong></p><p><strong>一定要在第二次选课正式开始后再使用！</strong></p><p><strong>一定要在第二次选课正式开始后再使用！</strong></p><p>提前使用学校选课系统的状态还是第一次选课，所以不会抢到，而且第二次选课开始后会提示你已选。解决方法是去已选的课中删除未录取的课。</p><p><strong>新版本开放最低间隔抢课！能不能抢到就看大家自己的运气和恒心了！</strong></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>当然是DHU抢课&amp;选课啦~</p><p>程序会在后台不停地刷新抢课，直到选到了课为止。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在in.txt文件里面输入以下信息：</p><p>学号</p><p>密码</p><p><img src="https://static.purewhite.io/images/2017-12-11-1.png" alt="1">课程编号（大的界面里面的编号）</p><p><img src="https://static.purewhite.io/images/2017-12-11-2.png" alt="2">选课序号（小的界面里面的编号）</p><p><strong>各占一行！注意不能有任何多余的空格或者其它字符！</strong></p><p><strong>各占一行！注意不能有任何多余的空格或者其它字符！</strong></p><p><strong>各占一行！注意不能有任何多余的空格或者其它字符！</strong></p><p>样例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">161616666</span><br><span class="line">123thisispassword</span><br><span class="line">123456</span><br><span class="line">654321</span><br></pre></td></tr></table></figure><p><strong>使用时一定要连接上学校的vpn才可以，学校的vpn不稳定可以在vpn的客户端里面设置断线重连</strong></p><p>选课成功后会出现<code>Congratulations! The course has already been selected!</code>字样。</p><p>如果需要选多个课程的话，只需要把应用程序和in.txt复制到多个文件夹中即可。</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><h3 id="我已知晓并同意使用此软件引起的一切后果与作者无关，作者无需为各类后果负任何责任，一切责任由使用者承担，并且作者无需保证软件可用性，作者也没有因为此软件有任何收入。"><a href="#我已知晓并同意使用此软件引起的一切后果与作者无关，作者无需为各类后果负任何责任，一切责任由使用者承担，并且作者无需保证软件可用性，作者也没有因为此软件有任何收入。" class="headerlink" title="我已知晓并同意使用此软件引起的一切后果与作者无关，作者无需为各类后果负任何责任，一切责任由使用者承担，并且作者无需保证软件可用性，作者也没有因为此软件有任何收入。"></a><a href="https://static.purewhite.io/DHU%E6%8A%A2%E8%AF%BE%E8%BD%AF%E4%BB%B62.1%E6%97%A0%E9%99%90%E5%88%B6%E7%89%88%E6%9C%AC.zip" target="_blank" rel="noopener">我已知晓并同意使用此软件引起的一切后果与作者无关，作者无需为各类后果负任何责任，一切责任由使用者承担，并且作者无需保证软件可用性，作者也没有因为此软件有任何收入。</a></h3><h3 id="已知bug"><a href="#已知bug" class="headerlink" title="已知bug"></a>已知bug</h3><p>如果课程编号不存在，那么还是会输出<code>Congratulations! The course has already been selected!</code>字样。</p><p>请大家仔细检查核对需要选课的课程编号和选课序号。</p><p>这个软件尚存在很多bug，由于时间精力原因本人也没有办法将这个软件做得非常完善，大家使用的时候输入正确的信息可以正常使用即可，如果输入正确信息无法使用可以联系我。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;最新版本：V2.1，20171225，支持第二次选课，下载地址在最下方&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;p&gt;作者保留一切权利，&lt;strong&gt;禁止任何第三方销售&lt;/strong&gt;及对程序进行逆向工程。由于每个学期选课参数将调整，所以作者不保证过时版本的可用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者制作这个软件是以学习为目的，并基于方便大家的精神而将软件公开给大家使用。使用者需要认可使用本软件引起的一切后果都与作者无关。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作者QQ：3117474288&lt;/p&gt;
&lt;p&gt;作者博客：&lt;a href=&quot;https://purewhite.io/&quot;&gt;Pure White&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://purewhite.io/categories/python/"/>
    
    
      <category term="python" scheme="https://purewhite.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>如何在Mac上卸载Python</title>
    <link href="https://purewhite.io/2017/05/21/how-to-delete-python-on-mac/"/>
    <id>https://purewhite.io/2017/05/21/how-to-delete-python-on-mac/</id>
    <published>2017-05-21T09:47:46.000Z</published>
    <updated>2019-03-18T06:14:04.884Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Remove the Python 2.7 framework</p><p><code>sudo rm -rf /Library/Frameworks/Python.framework/Versions/2.7</code></p></li><li><p>Remove the Python 2.7 applications directory</p><p><code>sudo rm -rf &quot;/Applications/Python 2.7&quot;</code></p></li><li><p>Remove the symbolic links in <code>/usr/local/bin</code> that point to this Python version see <code>ls -l /usr/local/bin | grep &#39;../Library/Frameworks/Python.framework/Versions/2.7&#39;</code> and then run the following command to remove all the links:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">ls -l /usr/<span class="built_in">local</span>/bin | grep <span class="string">'../Library/Frameworks/Python.framework/Versions/2.7'</span> | awk <span class="string">'&#123;print $9&#125;'</span> | tr -d @ | xargs rm</span><br></pre></td></tr></table></figure></li><li><p>If necessary, edit your shell profile file(s) to remove adding <code>/Library/Frameworks/Python.framework/Versions/2.7</code> to your <code>PATH</code> environment file. Depending on which shell you use, any of the following files may have been modified: <code>~/.bash_login</code>, <code>~/.bash_profile</code>, <code>~/.cshrc</code>, <code>~/.profile</code>, <code>~/.tcshrc</code>, and/or <code>~/.zprofile</code>.</p></li></ol><a id="more"></a><p>转自：<a href="http://stackoverflow.com/questions/3819449/how-to-uninstall-python-2-7-on-a-mac-os-x-10-6-4" target="_blank" rel="noopener">How to uninstall Python 2.7 on a Mac OS X 10.6.4?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Remove the Python 2.7 framework&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf /Library/Frameworks/Python.framework/Versions/2.7&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the Python 2.7 applications directory&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf &amp;quot;/Applications/Python 2.7&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the symbolic links in &lt;code&gt;/usr/local/bin&lt;/code&gt; that point to this Python version see &lt;code&gt;ls -l /usr/local/bin | grep &amp;#39;../Library/Frameworks/Python.framework/Versions/2.7&amp;#39;&lt;/code&gt; and then run the following command to remove all the links:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -l /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin | grep &lt;span class=&quot;string&quot;&gt;&#39;../Library/Frameworks/Python.framework/Versions/2.7&#39;&lt;/span&gt; | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $9&amp;#125;&#39;&lt;/span&gt; | tr -d @ | xargs rm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If necessary, edit your shell profile file(s) to remove adding &lt;code&gt;/Library/Frameworks/Python.framework/Versions/2.7&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment file. Depending on which shell you use, any of the following files may have been modified: &lt;code&gt;~/.bash_login&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.cshrc&lt;/code&gt;, &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.tcshrc&lt;/code&gt;, and/or &lt;code&gt;~/.zprofile&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="python" scheme="https://purewhite.io/categories/python/"/>
    
    
      <category term="mac" scheme="https://purewhite.io/tags/mac/"/>
    
      <category term="python" scheme="https://purewhite.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySql存储引擎的比较</title>
    <link href="https://purewhite.io/2017/05/20/mysql-engines-compare/"/>
    <id>https://purewhite.io/2017/05/20/mysql-engines-compare/</id>
    <published>2017-05-19T16:44:21.000Z</published>
    <updated>2019-03-18T06:14:06.925Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，MySql提供了很多存储引擎，这里来比较一下常见引擎的优劣。</p><h2 id="查看所有存储引擎"><a href="#查看所有存储引擎" class="headerlink" title="查看所有存储引擎"></a>查看所有存储引擎</h2><p>我们可以通过<code>show engines</code>命令来看到我们的mysql server提供了哪些引擎：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="InnoDB-存储引擎"><a href="#InnoDB-存储引擎" class="headerlink" title="InnoDB 存储引擎"></a>InnoDB 存储引擎</h2><p>InnoDB是事务性数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL5.5.5之后，InnoDB作为默认存储引擎。InnoDB主要特性有：</p><ol><li>InnoDB给MySQL提供了具有提交、回滚和崩溃恢复能力的事务安全（ACID兼容）存储引擎。InnoDB锁定在行级并且也在SELECT语句中提供一个类似Oracle的非锁定读。这些功能增加了多用户部署和性能。在SQL查询中，可以自由地将InnoDB类型的表与其他MySQL的表的类型混合起来，甚至在同一个查询中也可以混合。</li><li>InnoDB是为处理巨大数据量所设计的性能为重的，它的CPU效率可能是任何其他基于磁盘的关系数据库引擎所不能匹敌的。</li><li>InnoDB存储引擎完全与MySQL服务器整合，InnoDB存储引擎在主内存中维持了自己的缓冲池来缓存数据和索引。InnoDB将它的表和索引存在一个逻辑表空间中，表空间可以包含数个文件（或原始磁盘分区）。这与MyISAM表不同，比如在MyISAM表中每个表被存在分离的文件中。InnoDB表可以是任何尺寸，即使在文件尺寸被限制在2GB的操作系统上。</li><li>InnoDB支持外键完整性约束（FOREIGN KEY）。存储表中的数据时，每张表的存储都按主键顺序存放，如果没有显式在表定义时制定主键，InnoDB会为每一行生成一个6B的ROWID，并以此作为主键。</li><li>InnoDB被用在众多需要高性能的大型数据库站点上。</li><li>InnoDB不创建目录，使用InnoDB时，MySQL将在MySQL数据目录下创建一个名为ibdata1的10MB大小的自动扩展数据文件，以及两个名为ib_logfile0和ib_logfile1的5MB大小的日志文件。</li></ol><h2 id="MyISAM-存储引擎"><a href="#MyISAM-存储引擎" class="headerlink" title="MyISAM 存储引擎"></a>MyISAM 存储引擎</h2><p>MyISAM是基于ISAM的存储引擎，并对其进行扩展。它是在Web、数据存储和其他应用环境下最常使用的存储引擎之一。MyISAM拥有较高的插入、查询速度，但不支持事务。在MySQL5.5.5之前的版本中，MyISAM是默认存储引擎。MyISAM主要特性有：</p><ol><li>大文件（达63位文件长度）在支持大文件的文件系统和操作系统上被支持。</li><li>当把删除、更新及插入操作混合使用的时候，动态尺寸的行产生更少碎片。这要通过合并相邻被删除的块，以及若下一个块被删除，就扩展到下一块来自动完成。</li><li>每个MyISAM表最大索引数是64，这可以通过重新编译来改变。每个索引最大的列数是16个。</li><li>最大的键长度是1000B，这也可以通过编译来改变。对于键长度超过250B的情况，一个超过1024B的键将被用上。</li><li>BLOB和TEXT列可以被索引。</li><li>NULL值被允许在索引的列中。这个值占每个键的0-1个字节。</li><li>所有数字键值以高字节优先被存储以允许一个更高的索引压缩。</li><li>每表一个AUTO_INCREMENT列的内部处理。MyISAM为INSERT和UPDATE操作自动更新这一列。这使得AUTO_INCREMENT列更快（至少10%）。在序列项的值被删除之后就不能再利用。</li><li>可以把数据文件和索引文件放在不同目录。</li><li>每个字符列可以有不同的字符集。</li><li>有VARCHAR的表可以固定或动态记录长度。</li><li>VARCHAR和CHAR列可以多达64KB。</li><li>使用MyISAM引擎创建数据库，将产生3个文件。文件的名字以表的名字开始，扩展名代表了文件的类型：frm文件存储表定义，myd代表数据文件，myi代表索引文件。</li></ol><h2 id="MEMORY-存储引擎"><a href="#MEMORY-存储引擎" class="headerlink" title="MEMORY 存储引擎"></a>MEMORY 存储引擎</h2><p>MEMORY存储引擎将表中的数据存储到内存中，为查询和引用其他表数据提供快速访问。MEMORY主要特性有：</p><ol><li>MEMORY表的每个表可以有多达32个索引，每个索引16列，以及500B的最大键长度。</li><li>MEMORY存储引擎执行HASH 和 BTREE索引。</li><li>可以在一个MEMORY表中有非唯一键。</li><li>MEMORY表使用一个固定的记录长度格式。</li><li>MEMORY不支持BLOG或TEXT列。</li><li>MEMORY支持AUTO_INCREMENT列和对可包含NULL值的列的索引。</li><li>MEMORY表在所有客户端之间共享（就像其他任何非TEMPORARY表）。</li><li>MEMORY表内容被存在内存中，内存是MEMORY表和服务器在查询处理时的空闲中创建的内部表共享的。</li><li>当不再需要MEMORY表的内容时，要释放被MEMORY表使用的内存，应该执行DELETE FROM或TRUNCATE TABLE，或者删除整个表（用DROP TABLE）。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，MySql提供了很多存储引擎，这里来比较一下常见引擎的优劣。&lt;/p&gt;
&lt;h2 id=&quot;查看所有存储引擎&quot;&gt;&lt;a href=&quot;#查看所有存储引擎&quot; class=&quot;headerlink&quot; title=&quot;查看所有存储引擎&quot;&gt;&lt;/a&gt;查看所有存储引擎&lt;/h2&gt;&lt;p&gt;我们可以通过&lt;code&gt;show engines&lt;/code&gt;命令来看到我们的mysql server提供了哪些引擎：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;show engines;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9 rows in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://purewhite.io/categories/mysql/"/>
    
    
      <category term="架构" scheme="https://purewhite.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="mysql" scheme="https://purewhite.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验——简单文件系统</title>
    <link href="https://purewhite.io/2017/05/17/os-simple-file-system/"/>
    <id>https://purewhite.io/2017/05/17/os-simple-file-system/</id>
    <published>2017-05-17T07:51:47.000Z</published>
    <updated>2019-03-18T06:14:07.169Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下学校的操作系统实验内容：</p><p><strong>(1)实验目的</strong><br>本实验的目的是通过一个简单多用户文件系统的设计，加深理解文件系统的内部功能及内部实现。<br><strong>(2)实验内容</strong><br>为DOS系统设计一个简单的二级文件系统。要求做到以下几点：<br>①可以实现下列命令：<br>login 用户登录<br>dir 列文件目录<br>create 创建文件<br>delete 删除文件<br>open 打开文件<br>close 关闭文件<br>read 读文件<br>write 写文件</p><p>总结：</p><p>Map是个好东西</p><p>代码如下：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Pure White on 2017/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSystem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, User&gt; users = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.containsKey(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!exist(username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        User user = users.get(username);</span><br><span class="line">        <span class="keyword">return</span> user.authenticate(password) ? user : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">createUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exist(username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        users.put(username, user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">authenticate</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password.equals(password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;User, HashMap&lt;String, File&gt;&gt; userFiles = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> User nowUser;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">"Please input command: "</span>);</span><br><span class="line">            String cmd = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">            String username;</span><br><span class="line">            String password;</span><br><span class="line">            String filename;</span><br><span class="line">            String content;</span><br><span class="line">            User user;</span><br><span class="line">            <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"login"</span>:</span><br><span class="line">                    System.out.print(<span class="string">"Username: "</span>);</span><br><span class="line">                    username = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    System.out.print(<span class="string">"Password: "</span>);</span><br><span class="line">                    password = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    user = UserSystem.login(username, password);</span><br><span class="line">                    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Invalid User！"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        nowUser = user;</span><br><span class="line">                        System.out.println(<span class="string">"Login success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"adduser"</span>:</span><br><span class="line">                    System.out.print(<span class="string">"Username: "</span>);</span><br><span class="line">                    username = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    System.out.print(<span class="string">"Password: "</span>);</span><br><span class="line">                    password = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    user = UserSystem.createUser(username, password);</span><br><span class="line">                    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"User already exists!"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        nowUser = user;</span><br><span class="line">                        userFiles.put(nowUser, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">                        System.out.println(<span class="string">"Create user success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"ls"</span>:</span><br><span class="line">                    <span class="keyword">if</span> (nowUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Please login first!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (File file : userFiles.get(nowUser).values()) &#123;</span><br><span class="line">                        System.out.printf(<span class="string">"-- %s\n"</span>, file.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"create"</span>:</span><br><span class="line">                    <span class="keyword">if</span> (nowUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Please login first!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"Filename: "</span>);</span><br><span class="line">                    filename = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    <span class="keyword">if</span> (userFiles.get(nowUser).containsKey(filename)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"File already exists!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        File file = <span class="keyword">new</span> File(filename, nowUser);</span><br><span class="line">                        userFiles.get(nowUser).put(filename, file);</span><br><span class="line">                        System.out.println(<span class="string">"Create file success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"delete"</span>:</span><br><span class="line">                    <span class="keyword">if</span> (nowUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Please login first!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"Filename: "</span>);</span><br><span class="line">                    filename = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    <span class="keyword">if</span> (!userFiles.get(nowUser).containsKey(filename)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"File doesn't exist!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        File file = userFiles.get(nowUser).get(filename);</span><br><span class="line">                        <span class="keyword">if</span> (!file.getWriteLockState()) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"File has already been opened!"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        userFiles.get(nowUser).remove(filename);</span><br><span class="line">                        System.out.println(<span class="string">"Delete file success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"open"</span>:</span><br><span class="line">                    <span class="keyword">if</span> (nowUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Please login first!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"Filename: "</span>);</span><br><span class="line">                    filename = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    <span class="keyword">if</span> (!userFiles.get(nowUser).containsKey(filename)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"File doesn't exist!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        File file = userFiles.get(nowUser).get(filename);</span><br><span class="line">                        <span class="keyword">if</span> (!file.getWriteLockState()) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"File has already been opened!"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        file.writeLock();</span><br><span class="line">                        System.out.println(<span class="string">"Open file success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"close"</span>:</span><br><span class="line">                    <span class="keyword">if</span> (nowUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Please login first!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"Filename: "</span>);</span><br><span class="line">                    filename = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    <span class="keyword">if</span> (!userFiles.get(nowUser).containsKey(filename)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"File doesn't exist!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        File file = userFiles.get(nowUser).get(filename);</span><br><span class="line">                        <span class="keyword">if</span> (file.getWriteLockState()) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"File hasn't been opened!"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        file.writeUnlock();</span><br><span class="line">                        System.out.println(<span class="string">"Close file success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"write"</span>:</span><br><span class="line">                    <span class="keyword">if</span> (nowUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Please login first!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"Filename: "</span>);</span><br><span class="line">                    filename = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    <span class="keyword">if</span> (!userFiles.get(nowUser).containsKey(filename)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"File doesn't exist!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        File file = userFiles.get(nowUser).get(filename);</span><br><span class="line">                        <span class="keyword">if</span> (file.getWriteLockState()) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"File hasn't been opened!"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.print(<span class="string">"Content: "</span>);</span><br><span class="line">                        content = scanner.nextLine();</span><br><span class="line">                        file.setContent(content);</span><br><span class="line">                        System.out.println(<span class="string">"Write file success!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"read"</span>:</span><br><span class="line">                    <span class="keyword">if</span> (nowUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Please login first!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"Filename: "</span>);</span><br><span class="line">                    filename = scanner.nextLine().toLowerCase().trim();</span><br><span class="line">                    <span class="keyword">if</span> (!userFiles.get(nowUser).containsKey(filename)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"File doesn't exist!"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        File file = userFiles.get(nowUser).get(filename);</span><br><span class="line">                        <span class="keyword">if</span> (!file.getWriteLockState()) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"File has already been opened for write!"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        file.readLock();</span><br><span class="line">                        content = file.getContent();</span><br><span class="line">                        file.readUnlock();</span><br><span class="line">                        System.out.println(<span class="string">"Read file success!"</span>);</span><br><span class="line">                        System.out.printf(<span class="string">"Content: %s\n"</span>, content);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"Command error!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> User owner;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> opened;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> reading;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String name, User user)</span> </span>&#123;</span><br><span class="line">        setName(name);</span><br><span class="line">        setOwner(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getOwner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOwner</span><span class="params">(User owner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.owner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reading = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reading = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.opened = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.opened = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getWriteLockState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.opened;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下学校的操作系统实验内容：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)实验目的&lt;/strong&gt;&lt;br&gt;本实验的目的是通过一个简单多用户文件系统的设计，加深理解文件系统的内部功能及内部实现。&lt;br&gt;&lt;strong&gt;(2)实验内容&lt;/strong&gt;&lt;br&gt;为DOS系统设计一个简单的二级文件系统。要求做到以下几点：&lt;br&gt;①可以实现下列命令：&lt;br&gt;login 用户登录&lt;br&gt;dir 列文件目录&lt;br&gt;create 创建文件&lt;br&gt;delete 删除文件&lt;br&gt;open 打开文件&lt;br&gt;close 关闭文件&lt;br&gt;read 读文件&lt;br&gt;write 写文件&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;Map是个好东西&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="作业" scheme="https://purewhite.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="system" scheme="https://purewhite.io/tags/system/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
      <category term="操作系统" scheme="https://purewhite.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="os" scheme="https://purewhite.io/tags/os/"/>
    
      <category term="file" scheme="https://purewhite.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>如何选择开源协议</title>
    <link href="https://purewhite.io/2017/05/16/how-to-choose-free-software-licenses/"/>
    <id>https://purewhite.io/2017/05/16/how-to-choose-free-software-licenses/</id>
    <published>2017-05-16T04:13:31.000Z</published>
    <updated>2019-03-18T06:14:04.812Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.purewhite.io/images/2017-12-11-free_software_licenses.png" alt="free_software_licenses"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://static.purewhite.io/images/2017-12-11-free_software_licenses.png&quot; alt=&quot;free_software_licenses&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="https://purewhite.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="开源" scheme="https://purewhite.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="随笔" scheme="https://purewhite.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译Go程序</title>
    <link href="https://purewhite.io/2017/05/12/go-cross-compile/"/>
    <id>https://purewhite.io/2017/05/12/go-cross-compile/</id>
    <published>2017-05-12T14:08:45.000Z</published>
    <updated>2019-03-18T06:14:04.184Z</updated>
    
    <content type="html"><![CDATA[<p>你只需设置 <strong>GOOS</strong> 和 <strong>GOARCH </strong>两个环境变量就能生成所需平台的Go程序。</p><p>比如使用下面的代码测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"runtime"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"OS: %s\nArchitecture: %s\n"</span>, runtime.GOOS, runtime.GOARCH)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译它： <code>$ GOOS=darwin GOARCH=386 go build test.go</code><br>就可以生成运行在<code>OS X</code>上的程序。</p><a id="more"></a><p>可用的OS和ARCH的值如下：</p><table><thead><tr><th></th><th><code>$GOOS</code></th><th><code>$GOARCH</code></th></tr></thead><tbody><tr><td></td><td><code>darwin</code></td><td><code>386</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>arm64</code></td></tr><tr><td></td><td><code>dragonfly</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>386</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>arm64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>ppc64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>ppc64le</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>plan9</code></td><td><code>386</code></td></tr><tr><td></td><td><code>plan9</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>solaris</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>windows</code></td><td><code>386</code></td></tr><tr><td></td><td><code>windows</code></td><td><code>amd64</code></td></tr></tbody></table><p>不同的操作系统下的库可能有不同的实现， 比如<a href="https://golang.org/src/syscall/" target="_blank" rel="noopener">syscall</a>库。go build没有内置的<code>#define</code>或者预处理器之类的处理平台相关的代码取舍， 而是采用tag和文件后缀的方式实现。<br><strong>tag方式</strong><br>tag遵循一下规则</p><ol><li>a build tag is evaluated as the OR of space-separated options</li><li>each option evaluates as the AND of its comma-separated terms</li><li>each term is an alphanumeric word or, preceded by !, its negation</li></ol><p>在文件的头部增加tag:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build darwin freebsd netbsd openbsd</span></span><br></pre></td></tr></table></figure><p>可以有多个tag,之间是<strong>AND</strong>的关系</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build linux darwin</span></span><br><span class="line"><span class="comment">// +build 386</span></span><br></pre></td></tr></table></figure><p>注意tag和package中间需要有空行分隔，下面的例子是不对的:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build !linux</span></span><br><span class="line"><span class="keyword">package</span> mypkg <span class="comment">// wrong</span></span><br></pre></td></tr></table></figure><p><strong>文件后缀方式</strong><br>以<em>_$GOOS.go</em>为后缀的文件只在此平台上编译，其它平台上编译时就当此文件不存在。完整的后缀如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_$GOOS_$GOARCH.go</span><br></pre></td></tr></table></figure><p>如syscall_linux_amd64.go,syscall_windows_386.go,syscall_windows.go等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你只需设置 &lt;strong&gt;GOOS&lt;/strong&gt; 和 &lt;strong&gt;GOARCH &lt;/strong&gt;两个环境变量就能生成所需平台的Go程序。&lt;/p&gt;
&lt;p&gt;比如使用下面的代码测试：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;OS: %s\nArchitecture: %s\n&quot;&lt;/span&gt;, runtime.GOOS, runtime.GOARCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译它： &lt;code&gt;$ GOOS=darwin GOARCH=386 go build test.go&lt;/code&gt;&lt;br&gt;就可以生成运行在&lt;code&gt;OS X&lt;/code&gt;上的程序。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://purewhite.io/categories/go/"/>
    
    
      <category term="go" scheme="https://purewhite.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>在debian8 jessie上安装openjdk-8-jre-headless 或者 oracle-java8-install</title>
    <link href="https://purewhite.io/2017/05/10/install-openjdk-8-jre-headless-on-debian-jessie/"/>
    <id>https://purewhite.io/2017/05/10/install-openjdk-8-jre-headless-on-debian-jessie/</id>
    <published>2017-05-09T18:33:43.000Z</published>
    <updated>2019-03-18T06:14:05.197Z</updated>
    
    <content type="html"><![CDATA[<p>最近在折腾docker，写Dockerfile的时候需要在jessie里面安装openjdk-8-jre，一直失败，网上搜罗了一圈，尝试了N种方法终于有一个work的，记录下来。</p><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://http.debian.net/debian jessie-backports main"</span> &gt; /etc/apt/sources.list.d/jessie-backports.list</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y -t jessie-backports openjdk-8-jre-headless ca-certificates-java</span><br></pre></td></tr></table></figure><p>这样就OK啦！</p><p>如果需要装oracle java并自动选择同意的话：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> oracle-java8-installer shared/accepted-oracle-license-v1-1 select <span class="literal">true</span> | sudo /usr/bin/debconf-set-selections</span><br><span class="line">apt-get install -y oracle-java8-installer</span><br></pre></td></tr></table></figure><p>就可以了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在折腾docker，写Dockerfile的时候需要在jessie里面安装openjdk-8-jre，一直失败，网上搜罗了一圈，尝试了N种方法终于有一个work的，记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://purewhite.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>将Django从1.7升级到1.8小计</title>
    <link href="https://purewhite.io/2017/05/08/upgrade-django-from-1-7-to-1-8/"/>
    <id>https://purewhite.io/2017/05/08/upgrade-django-from-1-7-to-1-8/</id>
    <published>2017-05-07T22:12:27.000Z</published>
    <updated>2019-03-18T06:14:08.034Z</updated>
    
    <content type="html"><![CDATA[<p>之前在项目中将Django从1.7升级到1.8，现在想起来记录一下相关的步骤和过程。</p><p>由于项目一开始用的是1.6，所以用<code>python manage.py startapp</code>默认没有migrations这个package，而之前又有一些model是使用syncdb的，并且之后再没修改过，所以在用1.7的时候一直都没什么问题，而且1.7会自动去侦测没有makemigrations的model并自动migrate，导致了在升级1.8的过程中出现了一些小插曲，这里来记录一下。</p><a id="more"></a><p>1.7和1.8在migrate时的顺序不同（具体可以看一下源代码），所以导致了1.7能正常migrate，但是在1.8的时候会报错ColoumDoesNotExist，解决方案是看看报错信息中到底说的是哪个表没有渲染成功。我们只要先给这个app makemigrations就可以了，如果还出错的话就追根溯源到第一个报错的表，然后按顺序一个一个去makemigrations即可。</p><p>解决了migrations的差异之后，1.7和1.8基本是完全兼容的，别的都不需要进行修改。不过升级到1.8之后就算在debug模式下<code>127.0.0.1</code>默认也不在<code>settings</code>中的<code>ALLOWED_HOSTS</code>中了，所以需要添加进去才能在本地访问。</p><p>还有就是1.8用了新的TEMPLATES的设置方法，具体的看看文档稍微修改下就好了，非常简单问题不大。</p><p>附上1.8要回退1.7的脚本（经测试有效）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate auth 0001</span><br><span class="line">python manage.py migrate contenttypes 0001</span><br><span class="line">pip install django==1.7.11</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在项目中将Django从1.7升级到1.8，现在想起来记录一下相关的步骤和过程。&lt;/p&gt;
&lt;p&gt;由于项目一开始用的是1.6，所以用&lt;code&gt;python manage.py startapp&lt;/code&gt;默认没有migrations这个package，而之前又有一些model是使用syncdb的，并且之后再没修改过，所以在用1.7的时候一直都没什么问题，而且1.7会自动去侦测没有makemigrations的model并自动migrate，导致了在升级1.8的过程中出现了一些小插曲，这里来记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://purewhite.io/categories/python/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
      <category term="python" scheme="https://purewhite.io/tags/python/"/>
    
      <category term="django" scheme="https://purewhite.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu+nginx下使用letsencrypt加密https</title>
    <link href="https://purewhite.io/2017/05/06/letsencrypt-ubuntu-nginx-https/"/>
    <id>https://purewhite.io/2017/05/06/letsencrypt-ubuntu-nginx-https/</id>
    <published>2017-05-06T12:34:47.000Z</published>
    <updated>2019-03-18T06:14:06.092Z</updated>
    
    <content type="html"><![CDATA[<p>因为服务器太乱，我清理了一下服务器并且重新使用letsencrypt加密了https，现在将我的经验分享出来。</p><p>本文基于ubuntu16.04、nginx环境</p><h2 id="第一步：安装-Certbot"><a href="#第一步：安装-Certbot" class="headerlink" title="第一步：安装 Certbot"></a>第一步：安装 Certbot</h2><p>第一步是安装<code>letsencrypt</code>提供的certbot工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install certbot</span><br></pre></td></tr></table></figure><h2 id="第二步：-获得SSL的证书"><a href="#第二步：-获得SSL的证书" class="headerlink" title="第二步： 获得SSL的证书"></a>第二步： 获得SSL的证书</h2><p>我们使用<code>WebRoot</code>这个插件。</p><a id="more"></a><p>这里以nginx的default的site作为示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>在server的块中，加入以下内容</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">~ /.well-known</span> &#123;</span><br><span class="line">        allow all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确认root是你网站的根目录，比如默认情况下是<code>/var/www/html</code></p><p>保存退出之后，测试并重启你的nginx：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>然后我们获取到相关的SSL证书：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot certonly --webroot --webroot-path=/var/www/html -d example.com -d www.example.com -d third.another.com</span><br></pre></td></tr></table></figure><p>记得把上面的<code>/var/www/html</code>改成你自己的网站根目录。如果需要同时对多个域名进行认证的话只要同时使用多个<code>-d</code>就可以了，并且这些域名并不一定都需要为<code>example.com</code>，可以为别的域名。</p><p>然后根据提示，输入对应的信息，如果完成后应该会看到类似的信息：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate <span class="keyword">and</span> chain have been saved at</span><br><span class="line">   /etc/letsencrypt/live/example.com/fullchain.pem. Your cert</span><br><span class="line">   will expire <span class="literal">on</span> <span class="number">2017</span>-<span class="number">07</span>-<span class="number">26.</span> To obtain a <span class="keyword">new</span> <span class="keyword">or</span> tweaked version <span class="keyword">of</span></span><br><span class="line">   <span class="keyword">this</span> certificate <span class="keyword">in</span> the future, simply run certbot again. To</span><br><span class="line">   non-interactively renew *all* <span class="keyword">of</span> your certificates, run <span class="string">"certbot</span></span><br><span class="line"><span class="string">   renew"</span></span><br><span class="line"> - If you lose your account credentials, you can recover through</span><br><span class="line">   e-mails sent <span class="keyword">to</span> sammy@example.com.</span><br><span class="line"> - Your account credentials have been saved <span class="keyword">in</span> your Certbot</span><br><span class="line">   configuration directory at /etc/letsencrypt. You should make a</span><br><span class="line">   secure backup <span class="keyword">of</span> <span class="keyword">this</span> folder now. This configuration directory will</span><br><span class="line">   also contain certificates <span class="keyword">and</span> private keys obtained <span class="keyword">by</span> Certbot so</span><br><span class="line">   making regular backups <span class="keyword">of</span> <span class="keyword">this</span> folder <span class="keyword">is</span> ideal.</span><br><span class="line"> - If you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating <span class="keyword">to</span> ISRG / Let<span class="string">'s Encrypt:   https://letsencrypt.org/donate</span></span><br><span class="line"><span class="string">   Donating to EFF:                    https://eff.org/donate-le</span></span><br></pre></td></tr></table></figure><p>认证成功后，我们来生成一下更强的<code>dhparam</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</span><br></pre></td></tr></table></figure><p>这一步应该会消耗一定的时间</p><h2 id="第三步：在nginx上设置TLS-SSL"><a href="#第三步：在nginx上设置TLS-SSL" class="headerlink" title="第三步：在nginx上设置TLS/SSL"></a>第三步：在nginx上设置TLS/SSL</h2><p>我们先创建一个新的脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/snippets/ssl-example.com.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br></pre></td></tr></table></figure><p>保存退出后，再创建一个脚本用来设置ssl的参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/snippets/ssl-params.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from https://cipherli.st/</span></span><br><span class="line"><span class="comment"># and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> <span class="string">"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH"</span>;</span><br><span class="line"><span class="attribute">ssl_ecdh_curve</span> secp384r1;</span><br><span class="line"><span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">resolver</span> <span class="number">8.8.8.8</span> <span class="number">8.8.4.4</span> valid=<span class="number">300s</span>;</span><br><span class="line"><span class="attribute">resolver_timeout</span> <span class="number">5s</span>;</span><br><span class="line"><span class="comment"># disable HSTS header for now</span></span><br><span class="line"><span class="comment">#add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";</span></span><br><span class="line"><span class="attribute">add_header</span> X-Frame-Options DENY;</span><br><span class="line"><span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_dhparam</span> /etc/ssl/certs/dhparam.pem;</span><br></pre></td></tr></table></figure><p>保存退出。</p><p>然后修改一下site的配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>改成这样：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span> default_server;</span><br><span class="line">    listen [::]:<span class="number">80</span> default_server;</span><br><span class="line">    listen <span class="number">443</span> ssl http2 default_server;</span><br><span class="line">    listen [::]:<span class="number">443</span> ssl http2 default_server;</span><br><span class="line"></span><br><span class="line">    server_name example.com www.example.com;</span><br><span class="line">    <span class="meta"><span class="meta-keyword">include</span> snippets/ssl-example.com.conf;</span></span><br><span class="line">    <span class="meta"><span class="meta-keyword">include</span> snippets/ssl-params.conf;</span></span><br><span class="line"></span><br><span class="line">    . . .</span><br></pre></td></tr></table></figure><p>保存退出。</p><h2 id="第四步：在防火墙中Allow-Nginx"><a href="#第四步：在防火墙中Allow-Nginx" class="headerlink" title="第四步：在防火墙中Allow Nginx"></a>第四步：在防火墙中Allow Nginx</h2><p>执行以下脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow <span class="string">'Nginx Full'</span></span><br><span class="line">sudo nginx -t</span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="第五步：自动更新SSL证书"><a href="#第五步：自动更新SSL证书" class="headerlink" title="第五步：自动更新SSL证书"></a>第五步：自动更新SSL证书</h2><p>因为letsencrypt提供的证书是有期限的，所以我们需要设置自动更新证书。</p><p>执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure><p>在最后加上这么一行：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">30 </span><span class="number">0</span> * * <span class="number">1</span> /<span class="keyword">usr</span>/bin/certbot renew --quiet --renew-hook <span class="string">"/bin/systemctl reload nginx"</span></span><br></pre></td></tr></table></figure><p>完成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为服务器太乱，我清理了一下服务器并且重新使用letsencrypt加密了https，现在将我的经验分享出来。&lt;/p&gt;
&lt;p&gt;本文基于ubuntu16.04、nginx环境&lt;/p&gt;
&lt;h2 id=&quot;第一步：安装-Certbot&quot;&gt;&lt;a href=&quot;#第一步：安装-Certbot&quot; class=&quot;headerlink&quot; title=&quot;第一步：安装 Certbot&quot;&gt;&lt;/a&gt;第一步：安装 Certbot&lt;/h2&gt;&lt;p&gt;第一步是安装&lt;code&gt;letsencrypt&lt;/code&gt;提供的certbot工具&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo add-apt-repository ppa:certbot/certbot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install certbot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;第二步：-获得SSL的证书&quot;&gt;&lt;a href=&quot;#第二步：-获得SSL的证书&quot; class=&quot;headerlink&quot; title=&quot;第二步： 获得SSL的证书&quot;&gt;&lt;/a&gt;第二步： 获得SSL的证书&lt;/h2&gt;&lt;p&gt;我们使用&lt;code&gt;WebRoot&lt;/code&gt;这个插件。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://purewhite.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础技术——AUFS</title>
    <link href="https://purewhite.io/2017/05/06/docker-aufs/"/>
    <id>https://purewhite.io/2017/05/06/docker-aufs/</id>
    <published>2017-05-06T08:23:43.000Z</published>
    <updated>2019-03-18T06:14:03.681Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习docker，看到了一篇比较好的文章，于是转载了过来，原文出处在最后。</p><p>AUFS是一种Union File System，所谓UnionFS就是把不同物理位置的目录合并mount到同一个目录中。UnionFS的一个最主要的应用是，把一张CD/DVD和一个硬盘目录给联合 mount在一起，然后，你就可以对这个只读的CD/DVD上的文件进行修改（当然，修改的文件存于硬盘上的目录里）。</p><p><a id="more"></a><img src="http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png" alt></p><p>AUFS又叫Another UnionFS，后来叫Alternative UnionFS，后来可能觉得不够霸气，叫成Advance UnionFS。是个叫Junjiro Okajima（岡島順治郎）在2006年开发的，AUFS完全重写了早期的UnionFS 1.x，其主要目的是为了可靠性和性能，并且引入了一些新的功能，比如可写分支的负载均衡。AUFS在使用上全兼容UnionFS，而且比之前的UnionFS在稳定性和性能上都要好很多，后来的UnionFS 2.x开始抄AUFS中的功能。但是他居然没有进到Linux主干里，就是因为Linus不让，基本上是因为代码量比较多，而且写得烂（相对于只有3000行的union mount和10000行的UnionFS，以及其它平均下来只有6000行代码左右的VFS，AUFS居然有30000行代码），所以，岡島不断地改进代码质量，不断地提交，不断地被Linus拒掉，所以，到今天AUFS都还进不了Linux主干（今天你可以看到AUFS的代码其实还好了，比起OpenSSL好N倍，要么就是Linus对代码的质量要求非常高，要么就是Linus就是不喜欢AUFS）。</p><p>不过，好在有很多发行版都用了AUFS，比如：Ubuntu 10.04，Debian6.0, Gentoo Live CD支持AUFS，所以，也OK了。</p><p>好了，扯完这些闲话，我们还是看一个示例吧（环境：Ubuntu 14.04）</p><p>首先，我们建上两个目录（水果和蔬菜），并在这两个目录中放上一些文件，水果中有苹果和蕃茄，蔬菜有胡萝卜和蕃茄。</p><p>然后，我们输入以下命令：</p><p>我们可以看到在./mnt目录下有三个文件，苹果apple、胡萝卜carrots和蕃茄tomato。水果和蔬菜的目录被union到了./mnt目录下了。</p><p>我们来修改一下其中的文件内容：</p><p>上面的示例，我们可以看到./mnt/apple的内容改了，./fruits/apple的内容也改了。</p><p>上面的示例，我们可以看到，我们修改了./mnt/carrots的文件内容，./vegetables/carrots并没有变化，反而是./fruits/carrots的目录中出现了carrots文件，其内容是我们在./mnt/carrots里的内容。</p><p>也就是说，我们在mount aufs命令中，我们没有指它vegetables和fruits的目录权限，默认上来说，命令行上第一个（最左边）的目录是可读可写的，后面的全都是只读的。（一般来说，最前面的目录应该是可写的，而后面的都应该是只读的）</p><p>所以，如果我们像下面这样指定权限来mount aufs，你就会发现有不一样的效果（记得先把上面./fruits/carrots的文件删除了）：</p><p>现在，在这情况下，如果我们要修改./mnt/tomato这个文件，那么究竟是哪个文件会被改写？</p><p>可见，如果有重复的文件名，在mount命令行上，越往前的就优先级越高。</p><p>你可以用这个例子做一些各种各样的试验，我这里主要是给大家一个感性认识，就不展开试验下去了。</p><p>那么，这种UnionFS有什么用？</p><p>历史上，有一个叫<a href="http://zh.wikipedia.org/wiki/Knoppix" target="_blank" rel="noopener">Knoppix的Linux发行版</a>，其主要用于Linux演示、光盘教学、系统急救，以及商业产品的演示，不需要硬盘安装，直接把CD/DVD上的image运行在一个可写的存储设备上（比如一个U盘上），其实，也就是把CD/DVD这个文件系统和USB这个可写的系统给联合mount起来，这样你对CD/DVD上的image做的任何改动都会在被应用在U盘上，于是乎，你可以对CD/DVD上的内容进行任意的修改，因为改动都在U盘上，所以你改不坏原来的东西。</p><p>我们可以再发挥一下想像力，你也可以把一个目录，比如你的源代码，作为一个只读的template，和另一个你的working directory给union在一起，然后你就可以做各种修改而不用害怕会把源代码改坏了。有点像一个ad hoc snapshot。</p><p>Docker把UnionFS的想像力发挥到了容器的镜像。你是否还记得我在<a href="http://coolshell.cn/articles/17010.html" target="_blank" rel="noopener">介绍Linux Namespace上篇</a>中用mount namespace和chroot山寨了一镜像。现在当你看过了这个UnionFS的技术后，你是不是就明白了，你完全可以用UnionFS这样的技术做出分层的镜像来。</p><p>下图来自Docker的官方文档<a href="http://docs.docker.com/terms/layer/" target="_blank" rel="noopener">Layer</a>，其很好的展示了Docker用UnionFS搭建的分层镜像。</p><p><img src="http://coolshell.cn//wp-content/uploads/2015/04/docker-filesystems-multilayer.png" alt="docker-filesystems-multilayer"></p><p>关于docker的分层镜像，除了aufs，docker还支持btrfs, devicemapper和vfs，你可以使用 -s 或 –storage-driver= 选项来指定相关的镜像存储。在Ubuntu 14.04下，docker默认Ubuntu的 aufs（在CentOS7下，用的是devicemapper，关于devicemapper，我会以以后的文章中讲解）你可以在下面的目录中查看相关的每个层的镜像：</p><p>在docker执行起来后（比如：docker run -it ubuntu /bin/bash ），你可以从/sys/fs/aufs/si_[id]目录下查看aufs的mount的情况，下面是个示例：</p><p>你会看到只有最顶上的层（branch）是rw权限，其它的都是ro+wh权限只读的。</p><p>关于docker的aufs的配置，你可以在/var/lib/docker/repositories-aufs这个文件中看到。</p><h4 id="AUFS的一些特性"><a href="#AUFS的一些特性" class="headerlink" title="AUFS的一些特性"></a>AUFS的一些特性</h4><p>AUFS有所有Union FS的特性，把多个目录，合并成同一个目录，并可以为每个需要合并的目录指定相应的权限，实时的添加、删除、修改已经被mount好的目录。而且，他还能在多个可写的branch/dir间进行负载均衡。</p><p>上面的例子，我们已经看到AUFS的mount的示例了。下面我们来看一看被union的目录（分支）的相关权限：</p><ul><li>rw表示可写可读read-write。</li><li>ro表示read-only，如果你不指权限，那么除了第一个外ro是默认值，对于ro分支，其永远不会收到写操作，也不会收到查找whiteout的操作。</li><li>rr表示real-read-only，与read-only不同的是，rr标记的是天生就是只读的分支，这样，AUFS可以提高性能，比如不再设置inotify来检查文件变动通知。</li></ul><p>权限中，我们看到了一个术语：whiteout，下面我来解释一下这个术语。</p><p>一般来说ro的分支都会有wh的属性，比如 “[dir]=ro+wh”。所谓whiteout的意思，如果在union中删除的某个文件，实际上是位于一个readonly的分支（目录）上，那么，在mount的union这个目录中你将看不到这个文件，但是read-only这个层上我们无法做任何的修改，所以，我们就需要对这个readonly目录里的文件作whiteout。AUFS的whiteout的实现是通过在上层的可写的目录下建立对应的whiteout隐藏文件来实现的。</p><p>看个例子：</p><p>假设我们有三个目录和文件如下所示（test是个空目录）：</p><p>我们如下mount：</p><p>现在我们在权限为rw的test目录下建个whiteout的隐藏文件.wh.apple，你就会发现./mnt/apple这个文件就消失了:</p><p>上面这个操作和 rm ./mnt/apple是一样的。</p><h5 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h5><p><strong>Branch</strong> – 就是各个要被union起来的目录（就是我在上面使用的dirs的命令行参数）</p><ul><li>Branch根据被union的顺序形成一个stack，一般来说最上面的是可写的，下面的都是只读的。</li><li>Branch的stack可以在被mount后进行修改，比如：修改顺序，加入新的branch，或是删除其中的branch，或是直接修改branch的权限</li></ul><p><strong>Whiteout</strong> 和 <strong>Opaque</strong></p><ul><li>如果UnionFS中的某个目录被删除了，那么就应该不可见了，就算是在底层的branch中还有这个目录，那也应该不可见了。</li></ul><ul><li>Whiteout就是某个上层目录覆盖了下层的相同名字的目录。用于隐藏低层分支的文件，也用于阻止readdir进入低层分支。</li></ul><ul><li>Opaque的意思就是不允许任何下层的某个目录显示出来。</li></ul><ul><li>在隐藏低层档的情况下，whiteout的名字是’.wh.<filename>’。</filename></li></ul><ul><li>在阻止readdir的情况下，名字是’.wh..wh..opq’或者 ’.wh.__dir_opaque’。</li></ul><h5 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h5><p>看到上面这些，你一定会有几个问题：</p><p><strong>其一、你可能会问，要有文件在原来的地方被修改了会怎么样？</strong>mount的目录会一起改变吗？答案是会的，也可以是不会的。因为你可以指定一个叫udba的参数（全称：User’s Direct Branch Access），这个参数有三个取值：</p><ul><li><strong>udba=none</strong> – 设置上这个参数后，AUFS会运转的更快，因为那些不在mount目录里发生的修改，aufs不会同步过来了，所以会有数据出错的问题。</li><li><strong>udba=reval</strong> – 设置上这个参数后，AUFS会去查文件有没有被更新，如果有的话，就会把修改拉到mount目录内。</li><li><strong>udba=notify</strong> – 这个参数会让AUFS为所有的branch注册inotify，这样可以让AUFS在更新文件修改的性能更高一些。</li></ul><p><strong>其二、如果有多个rw的branch（目录）被union起来了，那么，当我创建文件的时候，aufs会创建在哪里呢？</strong> aufs提供了一个叫create的参数可以供你来配置相当的创建策略，下面有几个例子。</p><p><strong>create=rr | round−robin</strong> 轮询。下面的示例可以看到，新创建的文件轮流写到三个目录中</p><p><strong>create=mfs[:second] | most−free−space[:second]</strong> 选一个可用空间最好的分支。可以指定一个检查可用磁盘空间的时间。</p><p><strong>create=mfsrr:low[:second]</strong> 选一个空间大于low的branch，如果空间小于low了，那么aufs会使用 round-robin 方式。</p><p>更多的关于AUFS的细节使用参数，大家可以直接在Ubuntu 14.04下通过<a href="http://aufs.sourceforge.net/aufs3/man.html" target="_blank" rel="noopener"> man aufs </a>来看一下其中的各种参数和命令。</p><h4 id="AUFS的性能"><a href="#AUFS的性能" class="headerlink" title="AUFS的性能"></a>AUFS的性能</h4><p>AUFS的性能慢吗？也慢也不慢。因为AUFS会把所有的分支mount起来，所以，在查找文件上是比较慢了。因为它要遍历所有的branch。是个O(n)的算法（很明显，这个算法有很大的改进空间的）所以，branch越多，查找文件的性能也就越慢。但是，一旦AUFS找到了这个文件的inode，那后以后的读写和操作原文件基本上是一样的。</p><p>所以，如果你的程序跑在在AUFS下，open和stat操作会有明显的性能下降，branch越多，性能越差，但是在write/read操作上，性能没有什么变化。</p><p>IBM的研究中心对Docker的性能给了一份非常不错的性能报告（PDF）《<a href="http://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/$File/rc25482.pdf" target="_blank" rel="noopener">An Updated Performance Comparison of Virtual Machinesand Linux Containers</a>》</p><p>我截了两张图出来，第一张是顺序读写，第二张是随机读写。基本没有什么性能损失的问题。而KVM在随机读写的情况也就有点慢了（但是，如果硬盘是SSD的呢？）</p><p><img src="http://coolshell.cn//wp-content/uploads/2015/08/docker.seq_.jpg" alt="顺序读写"></p><p><img src="http://coolshell.cn//wp-content/uploads/2015/08/docker.rand_.jpg" alt="随机读写"></p><p>原文出自：<a href="http://coolshell.cn/articles/17061.html" target="_blank" rel="noopener">coolshell</a></p><p><strong>（转载文章请注明作者和出处 酷 壳 – CoolShell ，请勿用于任何商业用途）</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习docker，看到了一篇比较好的文章，于是转载了过来，原文出处在最后。&lt;/p&gt;
&lt;p&gt;AUFS是一种Union File System，所谓UnionFS就是把不同物理位置的目录合并mount到同一个目录中。UnionFS的一个最主要的应用是，把一张CD/DVD和一个硬盘目录给联合 mount在一起，然后，你就可以对这个只读的CD/DVD上的文件进行修改（当然，修改的文件存于硬盘上的目录里）。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://purewhite.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://purewhite.io/tags/docker/"/>
    
      <category term="linux" scheme="https://purewhite.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中使用临时文件和临时目录</title>
    <link href="https://purewhite.io/2017/05/04/temp-file-in-go/"/>
    <id>https://purewhite.io/2017/05/04/temp-file-in-go/</id>
    <published>2017-05-04T13:05:11.000Z</published>
    <updated>2019-03-18T06:14:07.920Z</updated>
    
    <content type="html"><![CDATA[<p>最近正好有个项目，需要接收到用户传过来的数据之后存到本地当作临时文件，用完删除。</p><p>本来以为需要自己造轮子，结果发现go标准库提供了临时文件的功能，这里记录一下。</p><h3 id="ioutil"><a href="#ioutil" class="headerlink" title="ioutil"></a>ioutil</h3><p>go标准库里有个<a href="https://golang.org/pkg/io/ioutil/" target="_blank" rel="noopener">ioutil</a>的库，里面提供了一些实用的轮子。</p><a id="more"></a><p>在这里就说其中和我们这个主题有关的两个函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TempDir</span><span class="params">(dir, prefix <span class="keyword">string</span>)</span> <span class="params">(name <span class="keyword">string</span>, err error)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">TempFile</span><span class="params">(dir, prefix <span class="keyword">string</span>)</span> <span class="params">(f *os.File, err error)</span></span></span><br></pre></td></tr></table></figure><p>看到这两个函数的签名，大家应该就知道怎么用，如何用了吧。</p><p><code>TempDir</code>会在你给出的<code>dir</code>中创建一个新的以<code>prefix</code>为前缀的名字随机且不重复的临时目录，如果<code>dir</code>是空，则使用系统默认的临时目录（比如在mac上是/var/，在linux上是/tmp/），并且返回这个目录的绝对路径（完整路径）。</p><p>同样的，<code>TempFile</code>会做同样的事情，只不过返回的是一个文件指针而已。不过要记得，如果你需要文件的后缀名有一定要求的话，需要自己去调用<code>os.Rename</code>函数进行修改。</p><p><strong>调用这两个函数一定要记得自己去删除，不然go不会主动帮你删除掉你创建出来的临时目录和文件，因为go也不知道你啥时候不再需要它们。</strong></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It <span class="keyword">is</span> the caller<span class="symbol">'s</span> responsibility <span class="keyword">to</span> remove the directory/<span class="keyword">file</span> <span class="keyword">when</span> no longer needed.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正好有个项目，需要接收到用户传过来的数据之后存到本地当作临时文件，用完删除。&lt;/p&gt;
&lt;p&gt;本来以为需要自己造轮子，结果发现go标准库提供了临时文件的功能，这里记录一下。&lt;/p&gt;
&lt;h3 id=&quot;ioutil&quot;&gt;&lt;a href=&quot;#ioutil&quot; class=&quot;headerlink&quot; title=&quot;ioutil&quot;&gt;&lt;/a&gt;ioutil&lt;/h3&gt;&lt;p&gt;go标准库里有个&lt;a href=&quot;https://golang.org/pkg/io/ioutil/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ioutil&lt;/a&gt;的库，里面提供了一些实用的轮子。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://purewhite.io/categories/go/"/>
    
    
      <category term="go" scheme="https://purewhite.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>在golang里调用外部命令</title>
    <link href="https://purewhite.io/2017/05/04/exec-command-in-go/"/>
    <id>https://purewhite.io/2017/05/04/exec-command-in-go/</id>
    <published>2017-05-04T12:37:41.000Z</published>
    <updated>2019-03-18T06:14:03.871Z</updated>
    
    <content type="html"><![CDATA[<p>最近正在用go写一个各语言的lint server，需要调用外部的命令，所以这里整理一下用到的方法。</p><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p>在<code>os/exec</code>包中有一个 type 叫 <a href="https://golang.org/pkg/os/exec/#Cmd" target="_blank" rel="noopener"><code>cmd</code></a>，定义如下：</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cmd <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="comment">// Path is the path of the command to run.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// This is the only field that must be set to a non-zero</span></span><br><span class="line">        <span class="comment">// value. If Path is relative, it is evaluated relative</span></span><br><span class="line">        <span class="comment">// to Dir.</span></span><br><span class="line">        Path <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Args holds command line arguments, including the command as Args[0].</span></span><br><span class="line">        <span class="comment">// If the Args field is empty or nil, Run uses &#123;Path&#125;.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// In typical use, both Path and Args are set by calling Command.</span></span><br><span class="line">        Args []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Env specifies the environment of the process.</span></span><br><span class="line">        <span class="comment">// If Env is nil, Run uses the current process's environment.</span></span><br><span class="line">        Env []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dir specifies the working directory of the command.</span></span><br><span class="line">        <span class="comment">// If Dir is the empty string, Run runs the command in the</span></span><br><span class="line">        <span class="comment">// calling process's current directory.</span></span><br><span class="line">        Dir <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stdin specifies the process's standard input.</span></span><br><span class="line">        <span class="comment">// If Stdin is nil, the process reads from the null device (os.DevNull).</span></span><br><span class="line">        <span class="comment">// If Stdin is an *os.File, the process's standard input is connected</span></span><br><span class="line">        <span class="comment">// directly to that file.</span></span><br><span class="line">        <span class="comment">// Otherwise, during the execution of the command a separate</span></span><br><span class="line">        <span class="comment">// goroutine reads from Stdin and delivers that data to the command</span></span><br><span class="line">        <span class="comment">// over a pipe. In this case, Wait does not complete until the goroutine</span></span><br><span class="line">        <span class="comment">// stops copying, either because it has reached the end of Stdin</span></span><br><span class="line">        <span class="comment">// (EOF or a read error) or because writing to the pipe returned an error.</span></span><br><span class="line">        Stdin io.Reader</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stdout and Stderr specify the process's standard output and error.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// If either is nil, Run connects the corresponding file descriptor</span></span><br><span class="line">        <span class="comment">// to the null device (os.DevNull).</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// If Stdout and Stderr are the same writer, at most one</span></span><br><span class="line">        <span class="comment">// goroutine at a time will call Write.</span></span><br><span class="line">        Stdout io.Writer</span><br><span class="line">        Stderr io.Writer</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ExtraFiles specifies additional open files to be inherited by the</span></span><br><span class="line">        <span class="comment">// new process. It does not include standard input, standard output, or</span></span><br><span class="line">        <span class="comment">// standard error. If non-nil, entry i becomes file descriptor 3+i.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// BUG(rsc): On OS X 10.6, child processes may sometimes inherit unwanted fds.</span></span><br><span class="line">        <span class="comment">// https://golang.org/issue/2603</span></span><br><span class="line">        ExtraFiles []*os.File</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SysProcAttr holds optional, operating system-specific attributes.</span></span><br><span class="line">        <span class="comment">// Run passes it to os.StartProcess as the os.ProcAttr's Sys field.</span></span><br><span class="line">        SysProcAttr *syscall.SysProcAttr</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process is the underlying process, once started.</span></span><br><span class="line">        Process *os.Process</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ProcessState contains information about an exited process,</span></span><br><span class="line">        <span class="comment">// available after a call to Wait or Run.</span></span><br><span class="line">        ProcessState *os.ProcessState</span><br><span class="line">        <span class="comment">// contains filtered or unexported fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>介绍如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cmd represents an <span class="keyword">external</span> command being prepared <span class="keyword">or</span> <span class="keyword">run</span>.</span><br><span class="line"></span><br><span class="line">A Cmd cannot be reused after calling its <span class="keyword">Run</span>, <span class="keyword">Output</span> <span class="keyword">or</span> CombinedOutput methods.</span><br></pre></td></tr></table></figure><p>可以看到局限性在于只能run一次。不过没关系，对于大部分情况是够用了的。</p><p>那么我们应该怎么去用这个东西呢？</p><p>go 标准库提供了这么一个函数用来创建cmd:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Command</span><span class="params">(name <span class="keyword">string</span>, arg ...<span class="keyword">string</span>)</span> *<span class="title">Cmd</span></span></span><br></pre></td></tr></table></figure><p>这个函数返回了一个填充了<code>Path</code>和<code>Args</code>的Cmd对象</p><p>如果说在<code>name</code>中有路径分隔符(path separator)，那么<code>Command</code>会自动在系统设定的path中寻找这个命令，如果没找到的话就直接把输入的name当作path。</p><p>我们只要用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd := exec.Command(<span class="string">"ls"</span>, <span class="string">"-a"</span>, <span class="string">"-l"</span>, <span class="string">"-h"</span>)  <span class="comment">//实际可以直接写成-alh</span></span><br><span class="line">b, err := cmd.CombinedOutput()</span><br></pre></td></tr></table></figure><p>这样就可以获得到cmd执行后的结果。</p><p>在<code>Cmd</code>上有好几个函数可以做到获得输出，比较常用的是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cmd)</span> <span class="title">CombinedOutput</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>这个函数会先运行(run)这个cmd，然后再把stdout和stderr的输出放在一起返回。</p><p>除此之外，还有比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cmd)</span> <span class="title">Output</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cmd)</span> <span class="title">Run</span><span class="params">()</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cmd)</span> <span class="title">Start</span><span class="params">()</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cmd)</span> <span class="title">StderrPipe</span><span class="params">()</span> <span class="params">(io.ReadCloser, error)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cmd)</span> <span class="title">StdinPipe</span><span class="params">()</span> <span class="params">(io.WriteCloser, error)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cmd)</span> <span class="title">StdoutPipe</span><span class="params">()</span> <span class="params">(io.ReadCloser, error)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(c *Cmd)</span> <span class="title">Wait</span><span class="params">()</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>等函数可以使用，具体可以查询<a href="https://golang.org/pkg/os/exec/#Cmd" target="_blank" rel="noopener">标准库</a></p><p>除此之外，还有比如<a href="https://golang.org/pkg/os/#StartProcess" target="_blank" rel="noopener"><code>StartProcess</code></a>之类的函数可以使用，大家可以自行尝试一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正在用go写一个各语言的lint server，需要调用外部的命令，所以这里整理一下用到的方法。&lt;/p&gt;
&lt;h3 id=&quot;Command&quot;&gt;&lt;a href=&quot;#Command&quot; class=&quot;headerlink&quot; title=&quot;Command&quot;&gt;&lt;/a&gt;Command&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;os/exec&lt;/code&gt;包中有一个 type 叫 &lt;a href=&quot;https://golang.org/pkg/os/exec/#Cmd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/a&gt;，定义如下：&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://purewhite.io/categories/go/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="go" scheme="https://purewhite.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go Slice 秘籍</title>
    <link href="https://purewhite.io/2017/04/30/go-slice-tricks/"/>
    <id>https://purewhite.io/2017/04/30/go-slice-tricks/</id>
    <published>2017-04-30T15:07:31.000Z</published>
    <updated>2019-03-18T06:14:04.281Z</updated>
    
    <content type="html"><![CDATA[<p>这是 Golang官方的一个总结: <a href="https://github.com/golang/go/wiki/SliceTricks" target="_blank" rel="noopener">SliceTricks</a></p><p>由于引入了内建的<code>append</code>的方法， 包<code>container/vector</code>的很多方法都被移除了，可以被内建的<code>append</code>和<code>copy</code>方法代替。</p><p>下面是栈vector的操作方法的实现，使用slice实现相关的操作。</p><h3 id="AppendVector"><a href="#AppendVector" class="headerlink" title="AppendVector"></a>AppendVector</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>...)</span><br></pre></td></tr></table></figure><h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">b</span> = make([]T, len(a))</span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(b, a)</span></span></span><br><span class="line"><span class="comment">// 如果a不为空，也可以用下面的方式</span></span><br><span class="line"><span class="selector-tag">b</span> = append([]T(nil), <span class="selector-tag">a</span>...)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Cut"><a href="#Cut" class="headerlink" title="Cut"></a>Cut</h3><p>切掉一段数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], <span class="selector-tag">a</span>[j:]...)</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>删除一个元素</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], <span class="selector-tag">a</span>[i+<span class="number">1</span>:]...)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:i+copy(<span class="selector-tag">a</span>[<span class="selector-tag">i</span>:], <span class="selector-tag">a</span>[i+<span class="number">1</span>:])]</span><br></pre></td></tr></table></figure><h3 id="Delete，但不保持原来顺序"><a href="#Delete，但不保持原来顺序" class="headerlink" title="Delete，但不保持原来顺序"></a>Delete，但不保持原来顺序</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span>[i] = <span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>] </span><br><span class="line"><span class="keyword">a</span> = <span class="keyword">a</span>[:<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:如果元素是一个指针，或者是一个包含指针字段的struct，上面的<code>cut</code>、<code>delete</code>实现可能会有潜在的内存泄漏的问题。一些元素的值可能会被<code>a</code>一直引用而不被释放，下面的代码可以解决这个问题。</p><blockquote><h3 id="Cut-1"><a href="#Cut-1" class="headerlink" title="Cut"></a>Cut</h3></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(a[i:], a[j:])</span><br><span class="line"><span class="keyword">for</span> k, n := <span class="built_in">len</span>(a)-j+i, <span class="built_in">len</span>(a); k &lt; n; k++ &#123;</span><br><span class="line">a[k] = <span class="literal">nil</span> <span class="comment">// or the zero value of T</span></span><br><span class="line">&#125;</span><br><span class="line">a = a[:<span class="built_in">len</span>(a)-j+i]</span><br></pre></td></tr></table></figure><blockquote><h3 id="Delete-1"><a href="#Delete-1" class="headerlink" title="Delete"></a>Delete</h3></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy(<span class="keyword">a</span>[i:], <span class="keyword">a</span>[i+<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>] = nil<span class="comment"> // or the zero value of T</span></span><br><span class="line"><span class="keyword">a</span> = <span class="keyword">a</span>[:<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><blockquote><h3 id="Delete，但不保持原来顺序-1"><a href="#Delete，但不保持原来顺序-1" class="headerlink" title="Delete，但不保持原来顺序"></a>Delete，但不保持原来顺序</h3></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span>[i] = <span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>] = nil</span><br><span class="line"><span class="keyword">a</span> = <span class="keyword">a</span>[:<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="Expand"><a href="#Expand" class="headerlink" title="Expand"></a>Expand</h3><p>插入一段到中间</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], append(make([]T, j), <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]...)...)</span><br></pre></td></tr></table></figure><h3 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h3><p>插入一段到尾部</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, make([]T, j)...)</span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], append([]T&#123;x&#125;, <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]...)...)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 第二个<code>append</code>会使用它底层的存储创建一个新的slice，然后复制<code>a[i:]</code>到这个slice,然后把这个slice再复制回<code>s</code>。 新的slice的创建和第二次copy可以使用下面的方式来避免：</p><blockquote><h3 id="Insert-1"><a href="#Insert-1" class="headerlink" title="Insert"></a>Insert</h3></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = append(s, <span class="number">0</span>)</span><br><span class="line">copy(s<span class="string">[i+1:]</span>, s<span class="string">[i:]</span>)</span><br><span class="line">s<span class="string">[i]</span> = x</span><br></pre></td></tr></table></figure><h3 id="InsertVector"><a href="#InsertVector" class="headerlink" title="InsertVector"></a>InsertVector</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], append(<span class="selector-tag">b</span>, <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]...)...)</span><br></pre></td></tr></table></figure><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, <span class="keyword">a</span> = <span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>], <span class="keyword">a</span>[:<span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, x)</span><br></pre></td></tr></table></figure><h3 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, <span class="selector-tag">a</span> := <span class="selector-tag">a</span>[<span class="number">0</span>], <span class="selector-tag">a</span>[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure><h3 id="Unshift"><a href="#Unshift" class="headerlink" title="Unshift"></a>Unshift</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append([]T&#123;x&#125;, <span class="selector-tag">a</span>...)</span><br></pre></td></tr></table></figure><h2 id="其它技巧"><a href="#其它技巧" class="headerlink" title="其它技巧"></a>其它技巧</h2><h3 id="无额外对象分配的filter"><a href="#无额外对象分配的filter" class="headerlink" title="无额外对象分配的filter"></a>无额外对象分配的filter</h3><p>这个技巧利用了slice会共享它的底层的数据存储和容量。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">b</span> := <span class="selector-tag">a</span>[:<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _, x := range <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="keyword">if</span> f(x) &#123;</span><br><span class="line"><span class="selector-tag">b</span> = append(<span class="selector-tag">b</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><p>将slice中的元素反转。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(<span class="keyword">a</span>)/<span class="number">2</span><span class="number">-1</span>; i &gt;= <span class="number">0</span>; i<span class="comment">-- &#123;</span></span><br><span class="line">opp := <span class="built_in">len</span>(<span class="keyword">a</span>)<span class="number">-1</span>-i</span><br><span class="line"><span class="keyword">a</span>[i], <span class="keyword">a</span>[opp] = <span class="keyword">a</span>[opp], <span class="keyword">a</span>[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码类似，只不过使用了两个索引变量</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">left</span>, <span class="built_in">right</span> := <span class="number">0</span>, <span class="built_in">len</span>(a)<span class="number">-1</span>; <span class="built_in">left</span> &lt; <span class="built_in">right</span>; <span class="built_in">left</span>, <span class="built_in">right</span> = <span class="built_in">left</span>+<span class="number">1</span>, <span class="built_in">right</span><span class="number">-1</span> &#123;</span><br><span class="line">a[<span class="built_in">left</span>], a[<span class="built_in">right</span>] = a[<span class="built_in">right</span>], a[<span class="built_in">left</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文出自：<a href="http://colobu.com/2017/03/22/Slice-Tricks/" target="_blank" rel="noopener">[译]Go Slice 秘籍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是 Golang官方的一个总结: &lt;a href=&quot;https://github.com/golang/go/wiki/SliceTricks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SliceTricks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于引入了内建的&lt;code&gt;append&lt;/code&gt;的方法， 包&lt;code&gt;container/vector&lt;/code&gt;的很多方法都被移除了，可以被内建的&lt;code&gt;append&lt;/code&gt;和&lt;code&gt;copy&lt;/code&gt;方法代替。&lt;/p&gt;
&lt;p&gt;下面是栈vector的操作方法的实现，使用slice实现相关的操作。&lt;/p&gt;
&lt;h3 id=&quot;AppendVector&quot;&gt;&lt;a href=&quot;#AppendVector&quot; class=&quot;headerlink&quot; title=&quot;AppendVector&quot;&gt;&lt;/a&gt;AppendVector&lt;/h3&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; = append(&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt;...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Copy&quot;&gt;&lt;a href=&quot;#Copy&quot; class=&quot;headerlink&quot; title=&quot;Copy&quot;&gt;&lt;/a&gt;Copy&lt;/h3&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt; = make([]T, len(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b, a)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果a不为空，也可以用下面的方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt; = append([]T(nil), &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="go" scheme="https://purewhite.io/categories/go/"/>
    
    
      <category term="go" scheme="https://purewhite.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客百度站长平台自动链接提交</title>
    <link href="https://purewhite.io/2017/04/29/hexo-baidu-url-submit/"/>
    <id>https://purewhite.io/2017/04/29/hexo-baidu-url-submit/</id>
    <published>2017-04-29T03:12:01.000Z</published>
    <updated>2019-03-18T06:14:04.663Z</updated>
    
    <content type="html"><![CDATA[<p>百度的SEO是个很蛋疼的事情，讲道理的话应该说是比较麻烦的。</p><p>有时候百度的爬虫因为各种原因会爬不到我们的网站，所以需要我们主动进行链接提交。</p><p>百度提供了三种方法来让我们提交链接：</p><p>1、主动推送</p><p>2、自动推送</p><p>3、sitemap</p><p>这里我会主要讲<code>自动推送</code>的部分。</p><a id="more"></a><h3 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h3><p>可以直接去看这篇文章<a href="http://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">Hexo插件之百度主动提交链接</a></p><h3 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h3><p>百度提供了一个js脚本，可以在有用户访问页面的时候自动把网址推送给baidu。</p><p>脚本如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined">    s.parentNode.insertBefore(bp, s);</span></span><br><span class="line"><span class="undefined">&#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们只需要把这个脚本嵌入到我们的代码里面就可以了。</p><p>笔者使用的是hexo的next主题，所以我在<code>themes/next/layout</code>里面找了一圈，发现最基本的template是<code>_layout.swig</code>，于是我把这段代码加在了这个文件的body部分的最后。这样就可以了，非常方便！</p><h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>sitemap的话，我们直接使用<code>hexo-generator-baidu-sitemap</code>这个插件，然后在<code>_config.yml</code>里面配置一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>就可以了。之后去百度站长平台提交一下sitemap的路径就好，一般都是<code>www.example.com/baidusitemap.xml</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百度的SEO是个很蛋疼的事情，讲道理的话应该说是比较麻烦的。&lt;/p&gt;
&lt;p&gt;有时候百度的爬虫因为各种原因会爬不到我们的网站，所以需要我们主动进行链接提交。&lt;/p&gt;
&lt;p&gt;百度提供了三种方法来让我们提交链接：&lt;/p&gt;
&lt;p&gt;1、主动推送&lt;/p&gt;
&lt;p&gt;2、自动推送&lt;/p&gt;
&lt;p&gt;3、sitemap&lt;/p&gt;
&lt;p&gt;这里我会主要讲&lt;code&gt;自动推送&lt;/code&gt;的部分。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://purewhite.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://purewhite.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>压缩hexo博客的html、css、js等资源</title>
    <link href="https://purewhite.io/2017/04/29/minify-code-using-gulp/"/>
    <id>https://purewhite.io/2017/04/29/minify-code-using-gulp/</id>
    <published>2017-04-29T02:55:22.000Z</published>
    <updated>2019-03-18T06:14:06.741Z</updated>
    
    <content type="html"><![CDATA[<p>这两天又发现一个问题，就是hexo的html、css、js都是没有压缩过的，这样是很不好的，因为会浪费服务器的资源 &amp; 让用户的下载速度变慢。</p><p>于是继续使用Google大法搜索有没有解决方案，然后看到了前辈已经遇到过这种问题了，原文链接放在了最后，这里整理一下过程。</p><a id="more"></a><h3 id="为什么我们需要压缩"><a href="#为什么我们需要压缩" class="headerlink" title="为什么我们需要压缩"></a>为什么我们需要压缩</h3><p>通过压缩可以明显的减少静态资源的体积，加快响应速度。</p><h3 id="使用gulp"><a href="#使用gulp" class="headerlink" title="使用gulp"></a>使用gulp</h3><p>我们使用了 gulp 来定义要执行的压缩任务，而执行真正压缩的是如下几个模块，见名知意：</p><ul><li>clean-css</li><li>htmlclean</li><li>htmlmin</li><li>imagemin</li><li>uglify-js</li></ul><p>每个模块，都有对应的 gulp wrapper 模块。</p><p>我们需要先在<code>package.json</code>文件里的<code>dependencies</code>里面增加以下的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;del&quot;: &quot;^2.2.2&quot;,</span><br><span class="line">&quot;gulp&quot;: &quot;^3.9.1&quot;,</span><br><span class="line">&quot;gulp-clean-css&quot;: &quot;^2.3.2&quot;,     # 压缩css</span><br><span class="line">&quot;gulp-htmlclean&quot;: &quot;^2.7.8&quot;,     # 处理html</span><br><span class="line">&quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,       # 压缩html</span><br><span class="line">&quot;gulp-imagemin&quot;: &quot;^3.1.1&quot;,      # 压缩图片</span><br><span class="line">&quot;gulp-uglify&quot;: &quot;^2.0.1&quot;,        # 处理js</span><br><span class="line">&quot;run-sequence&quot;: &quot;^1.2.2&quot;        # 控制任务执行顺序</span><br></pre></td></tr></table></figure><p>然后我们需要安装一下模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后我们需要写一下我们的<code>gulpfile.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">'hexo'</span>);</span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">'public/**/*'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 利用Hexo API 来生成博客内容， 效果和在命令行运行： hexo g 一样</span></span><br><span class="line"><span class="comment">// generate html with 'hexo generate'</span></span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;);</span><br><span class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, &#123;</span><br><span class="line">            watch: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cb()</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        hexo.exit(err);</span><br><span class="line">        <span class="keyword">return</span> cb(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 压缩public目录下的所有css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            compatibility: <span class="string">'ie8'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩public目录下的所有html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩public目录下的所有js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩public目录下的所有img： 这个采用默认配置</span></span><br><span class="line">gulp.task(<span class="string">'minify-img'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 同上，压缩图片，这里采用了： 最大化压缩效果。</span></span><br><span class="line">gulp.task(<span class="string">'minify-img-aggressive'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">        [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.jpegtran(&#123;<span class="string">'progressive'</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.svgo()],</span><br><span class="line">        &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 用run-sequence并发执行，同时处理html，css，js，img</span></span><br><span class="line">gulp.task(<span class="string">'compress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    runSequence([<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-img-aggressive'</span>], cb);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    runSequence(<span class="string">'clean'</span>, <span class="string">'generate'</span>, <span class="string">'compress'</span>, cb)</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'build'</span>])</span><br></pre></td></tr></table></figure><p>之后就可以使用<code>gulp build</code>命令进行压缩了，这步会自动执行<code>clean</code>和<code>generate</code>，当然不放心的也可以先执行一下<code>hexo clean</code></p><p>所以我们最后的部署脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">gulp build</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>Done！</p><p>参考出处：<a href="https://www.karlzhou.com/articles/compress-minify-hexo/" target="_blank" rel="noopener">https://www.karlzhou.com/articles/compress-minify-hexo/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天又发现一个问题，就是hexo的html、css、js都是没有压缩过的，这样是很不好的，因为会浪费服务器的资源 &amp;amp; 让用户的下载速度变慢。&lt;/p&gt;
&lt;p&gt;于是继续使用Google大法搜索有没有解决方案，然后看到了前辈已经遇到过这种问题了，原文链接放在了最后，这里整理一下过程。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://purewhite.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://purewhite.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>用git hooks进行自动部署，从此不需要登录服务器</title>
    <link href="https://purewhite.io/2017/04/27/git-hooks-auto-deploy/"/>
    <id>https://purewhite.io/2017/04/27/git-hooks-auto-deploy/</id>
    <published>2017-04-27T03:22:48.000Z</published>
    <updated>2019-03-18T06:14:04.073Z</updated>
    
    <content type="html"><![CDATA[<p>昨天刚折腾好博客，喜欢折腾的我又发现了一个问题——每次我在本地<code>hexo deploy</code>完都需要登录服务器去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>作为一个程序猿，怎么能忍受这么不geek这么不技术的事情发生！</p><p>于是，我就想到了，能不能我在本地<code>git push</code>之后自动在服务器上<code>git pull</code>然后自动重启nginx呢？</p><p>于是Google了一下，发现果然前辈们的智慧是无穷尽的，早就有人提供了解决方案，我就来整理 &amp; 搬运一下。</p><p>有一个东西叫做<code>git hook</code>，这个东西是干嘛的呢？简单来说，就是在git的执行流程中设置了断点，执行到某个流程的时候先去执行一下我们设置好的脚本，再接着执行。</p><a id="more"></a><p>艾玛，这可是个好东西，就决定用这玩意了。</p><h4 id="生成-ssh-密钥"><a href="#生成-ssh-密钥" class="headerlink" title="生成 ssh 密钥"></a>生成 ssh 密钥</h4><p>首先呢，我们得先配置一下我们的服务器，让我们ssh可以不用输密码就能登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C "你的邮箱或者任何字符串"</span><br></pre></td></tr></table></figure><p>这里我们一直回车到结束就可以了，默认名字是<code>~/.ssh/id_rsa</code>和<code>~/.ssh/id_rsa.pub</code>，其中带有pub的是公钥，是要传给服务器的，私钥一定一定一定要保存好，不能泄漏。</p><p>然后我们用ssh去登陆服务器，通过用户名和密码登陆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在服务器环境下</span></span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后在本机上执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在本机环境下</span></span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>把我们的公钥复制到剪贴板，再复制到服务器中的<code>~/.ssh/authorized_keys</code>中，然后退出服务器的登陆，回到本机环境下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在本机环境下</span></span><br><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure><p>在里面加入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host HOST_ALIAS                       # 用于 SSH 连接的别名，最好与 HostName 保持一致，都用ip或者都用域名</span><br><span class="line">  HostName SERVER_DOMAIN              # 服务器的域名或 IP 地址</span><br><span class="line">  Port SERVER_PORT                    # 服务器的端口号，默认为 22，可选</span><br><span class="line">  User SERVER_USER                    # 服务器的用户名</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa    # 本机上存放的私钥路径</span><br></pre></td></tr></table></figure><p>大功告成！</p><h4 id="配置服务器上的-git-仓库"><a href="#配置服务器上的-git-仓库" class="headerlink" title="配置服务器上的 git 仓库"></a>配置服务器上的 git 仓库</h4><p>这里需要先介绍一下 git init —bare</p><h5 id="git-init-—bare"><a href="#git-init-—bare" class="headerlink" title="git init —bare"></a>git init —bare</h5><p>和 <code>git init</code> 不一样的是，<code>git init --bare</code>并不存储实际代码，仓库文件夹不会看到任何项目代码，反而生成了一些 <code>.git</code>之外的文件夹，其中 <code>hooks</code>文件夹就是存放git命令操作后需要执行的脚本。<br>需要新建两个文件夹，一个执行<code>git init --bare</code>作为远端仓库，一个执行<code>git init</code>作为服务器项目目录。<br>本地开发目录和服务器项目目录的<code>remote</code>都要指向 服务器的远端仓库。</p><h5 id="在服务器上创建一个裸仓库"><a href="#在服务器上创建一个裸仓库" class="headerlink" title="在服务器上创建一个裸仓库"></a>在服务器上创建一个裸仓库</h5><p>首先要在服务器上建立一个裸仓库，假设我们用于存放裸仓库的文件夹是<code>/home/user/repos/</code>，进入到该文件夹，然后使用<code>git init --bare test.git</code>创建裸仓库，这样我们就有了一个叫<code>test.git</code>的裸仓库啦。</p><h5 id="在服务器上创建一个普通Git仓库"><a href="#在服务器上创建一个普通Git仓库" class="headerlink" title="在服务器上创建一个普通Git仓库"></a>在服务器上创建一个普通Git仓库</h5><p>接下来就是在服务器上建立一个普通Git仓库，用于存放网站的源代码。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="string">/home/user/www</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/home/user/www</span></span><br><span class="line">git init</span><br><span class="line">git clone ~<span class="string">/repos/test.git</span></span><br></pre></td></tr></table></figure><h5 id="配置Git-Hook"><a href="#配置Git-Hook" class="headerlink" title="配置Git Hook"></a>配置Git Hook</h5><p>进入到<code>~/repos/test.git/hooks</code>文件夹，使用<code>vi post-receive</code>创建一个脚本，当你在本地仓库执行<code>git push</code>后就会触发<code>post-receive</code>（<a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git%E6%8C%82%E9%92%A9" target="_blank" rel="noopener">关于Git Hok</a>）。<br><code>post-receive</code>的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">unset GIT_DIR</span><br><span class="line"></span><br><span class="line">NowPath=`pwd`</span><br><span class="line">DeployPath="../../www"</span><br><span class="line"></span><br><span class="line">cd $DeployPath</span><br><span class="line">git add . -A &amp;&amp; git stash</span><br><span class="line">git pull origin master</span><br><span class="line">echo "your root password" | sudo -S nginx -s reload</span><br><span class="line">cd $NowPath</span><br><span class="line">echo "deploy done"</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>默认的情况下，脚本是无法执行的，所以我们需要为这个脚本添加可执行权限<br><code>chmod +x post-receive</code></p><h4 id="本地仓库配置"><a href="#本地仓库配置" class="headerlink" title="本地仓库配置"></a>本地仓库配置</h4><p>这里的本地仓库就是你本机的仓库，不再是服务器上的了。我们要在原有的Git项目中加入一条新的remote源，以后往这个源推送代码就会自动部署了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add prod user@ip_address:repos/test.git</span><br><span class="line">git push prod master</span><br></pre></td></tr></table></figure><p>如果是用hexo的自动部署的话，需要在<code>_config.yml</code>文件里面的<code>deploy</code>中的<code>repo</code>改成如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> </span><br><span class="line"><span class="attr">    github:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">    prod:</span> <span class="string">user@ip_address:repos/test.git</span></span><br></pre></td></tr></table></figure><p>然后我在本地又写了一个<code>deploy.sh</code>的脚本，来一键部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>别忘了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x deploy.sh</span><br></pre></td></tr></table></figure><p>然后部署的时候只要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./deploy.sh</span><br></pre></td></tr></table></figure><p>就可以了！</p><p>Done！</p><p>程序猿就是这么鸡汁！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天刚折腾好博客，喜欢折腾的我又发现了一个问题——每次我在本地&lt;code&gt;hexo deploy&lt;/code&gt;完都需要登录服务器去：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git pull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo nginx -s reload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作为一个程序猿，怎么能忍受这么不geek这么不技术的事情发生！&lt;/p&gt;
&lt;p&gt;于是，我就想到了，能不能我在本地&lt;code&gt;git push&lt;/code&gt;之后自动在服务器上&lt;code&gt;git pull&lt;/code&gt;然后自动重启nginx呢？&lt;/p&gt;
&lt;p&gt;于是Google了一下，发现果然前辈们的智慧是无穷尽的，早就有人提供了解决方案，我就来整理 &amp;amp; 搬运一下。&lt;/p&gt;
&lt;p&gt;有一个东西叫做&lt;code&gt;git hook&lt;/code&gt;，这个东西是干嘛的呢？简单来说，就是在git的执行流程中设置了断点，执行到某个流程的时候先去执行一下我们设置好的脚本，再接着执行。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://purewhite.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="后端" scheme="https://purewhite.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="https://purewhite.io/tags/Linux/"/>
    
      <category term="运维" scheme="https://purewhite.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="git" scheme="https://purewhite.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>2017年阿里基础架构实习生笔试在线编程题 题解</title>
    <link href="https://purewhite.io/2017/04/27/2017-ali-infra-code-test/"/>
    <id>https://purewhite.io/2017/04/27/2017-ali-infra-code-test/</id>
    <published>2017-04-27T03:02:06.000Z</published>
    <updated>2019-03-18T06:14:02.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">一年一度的阿里运动会又要开始了，同学们终于有一天可以离开鼠标键盘显示器，全身心的投入到各种体育项目中。UED设计师小红虽然没有参加体育项目，但她的责任重大，因为她是拉拉队的队长，她需要在每个项目中为参赛的同学们加油助威。</span><br><span class="line">因为运动会的项目众多，很多项目在在同一时间会同时进行着。作为拉拉队长，小红需要遵守以下规则：</span><br><span class="line">不能同时给多个体育项目加油助威</span><br><span class="line">给每个体育项目加油的时长必须超过项目时长的一半，每个体育项目只能加油一次</span><br><span class="line">体育项目的开始和结束时间都是整点，如果项目进行到一半想要离开，也只能选择整点离开</span><br><span class="line">不考虑往返于各个体育项目比赛场地中花费的时间</span><br><span class="line">请帮小红设计一个算法，在已知所有体育项目日程的前提下，计算是否能在每个体育项目中为参赛的同学们加油。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">如果体育项目时长为<span class="number">2</span>，超过时长的一半为<span class="number">2</span>;</span><br><span class="line">如果体育项目时长为<span class="number">3</span>，超过时长的一半为<span class="number">2</span>;</span><br><span class="line">如果体育项目时长为<span class="number">4</span>，超过时长的一半为<span class="number">3</span>；</span><br><span class="line"></span><br><span class="line">编译器版本: Java <span class="number">1.8</span><span class="number">.0</span>_66</span><br><span class="line">请使用标准输入输出(System.in, System.out)；已禁用图形、文件、网络、系统相关的操作，如java.lang.Process , javax.swing.JFrame , Runtime.getRuntime；不要自定义包名称，否则会报错，即不要添加package answer之类的语句；您可以写很多个类，但是必须有一个类名为Main，并且为public属性，并且Main为唯一的public class，Main类的里面必须包含一个名字为<span class="string">'main'</span>的静态方法（函数），这个方法是程序的入口</span><br><span class="line">时间限制: <span class="number">1</span>S (<span class="keyword">C</span>/<span class="keyword">C</span>++以外的语言为: <span class="number">3</span> S)   内存限制: <span class="number">64</span>M (<span class="keyword">C</span>/<span class="keyword">C</span>++以外的语言为: <span class="number">576</span> M)</span><br><span class="line">输入:</span><br><span class="line">输入包括<span class="number">1</span>+<span class="keyword">N</span>行 第一行输入一个整数<span class="keyword">N</span>, <span class="number">1</span> &lt;= <span class="keyword">N</span> &lt;= <span class="number">10</span>，表示今天要参加多少个讨论会 后续<span class="keyword">N</span>行，每行输入开始和结束时间，均为整数，用空格分隔，<span class="number">0</span> &lt;= startTime &lt; endTime &lt;= <span class="number">24</span></span><br><span class="line">输出:</span><br><span class="line">输出包括一行 如果小红能够参加全部讨论会，返回<span class="number">1</span> 如果小红不能够参加全部讨论会，返回<span class="number">-1</span></span><br><span class="line">输入范例:</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span></span><br><span class="line">输出范例:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">代码运行全部通过！ 耗时: <span class="number">470</span>ms, 内存: <span class="number">24168</span><span class="keyword">K</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>这道题其实就是一道贪心的题目，用贪心的话复杂度是O（nlogn)，不过因为n很小，所以估计阿里是设计的dfs都能做出来。</p><p>我们把所有运动项目按照结束时间排序，因为我们能够想到结束时间越早一定是越优的，然后一个个去判断就好了。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meeting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    Meeting(<span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ali1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">        ArrayList&lt;Meeting&gt; meetings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Meeting meeting = <span class="keyword">new</span> Meeting(scanner.nextInt(), scanner.nextInt());</span><br><span class="line">            meetings.add(meeting);</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;Meeting&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(Comparator.comparingInt(a -&gt; a.end));</span><br><span class="line">        <span class="keyword">for</span> (Meeting meeting : meetings) &#123;</span><br><span class="line">            priorityQueue.offer(meeting);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!priorityQueue.isEmpty()) &#123;</span><br><span class="line">            Meeting meeting = priorityQueue.poll();</span><br><span class="line">            <span class="keyword">int</span> t = (meeting.end - meeting.start) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (last &lt;= meeting.start) &#123;</span><br><span class="line">                last = meeting.start + t;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (last + t &gt; meeting.end) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                last = last + t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">我们知道每一个大于<span class="number">1</span>的整数都一定是质数或者可以用质数的乘积来表示，如<span class="number">10</span>=<span class="number">2</span>*<span class="number">5</span>。现在请设计一个程序，对于给定的一个(<span class="number">1</span>，N] 之间的正整数（N取值不超过<span class="number">10</span>万），你需要统计(<span class="number">1</span>，N] 之间所有整数的质数分解后，所有质数个数的总个数。举例，输入数据为<span class="number">6</span>，那么满足(<span class="number">1</span>,<span class="number">6</span>] 的整数为<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>，各自进行质数分解后为：<span class="number">2</span>=&gt;<span class="number">2</span>，<span class="number">3</span>=&gt;<span class="number">3</span>，<span class="number">4</span>=&gt;<span class="number">2</span>*<span class="number">2</span>，<span class="number">5</span>=&gt;<span class="number">5</span>，<span class="number">6</span>=&gt;<span class="number">2</span>*<span class="number">3</span>。对应的质数个数即为<span class="number">1</span>，<span class="number">1</span>，<span class="number">2</span>，<span class="number">1</span>，<span class="number">2</span>。最后统计总数为<span class="number">7</span>。</span><br><span class="line">编译器版本: Java <span class="number">1.8</span>.<span class="number">0</span>_66</span><br><span class="line">请使用标准输入输出(System<span class="selector-class">.in</span>, System.out)；已禁用图形、文件、网络、系统相关的操作，如java<span class="selector-class">.lang</span><span class="selector-class">.Process</span> , javax<span class="selector-class">.swing</span><span class="selector-class">.JFrame</span> , Runtime.getRuntime；不要自定义包名称，否则会报错，即不要添加package answer之类的语句；您可以写很多个类，但是必须有一个类名为Main，并且为public属性，并且Main为唯一的public class，Main类的里面必须包含一个名字为<span class="string">'main'</span>的静态方法（函数），这个方法是程序的入口</span><br><span class="line">时间限制: <span class="number">1</span>S (C/C++以外的语言为: <span class="number">3</span> S)   内存限制: <span class="number">64</span>M (C/C++以外的语言为: <span class="number">576</span> M)</span><br><span class="line">输入:</span><br><span class="line">输入数据包含<span class="number">1</span>行，为一个大于<span class="number">1</span>的整数（不超过<span class="number">10</span>万）。</span><br><span class="line">输出:</span><br><span class="line">输出小于该数的所有整数质数分解后的总个数。</span><br><span class="line">输入范例:</span><br><span class="line"><span class="number">6</span></span><br><span class="line">输出范例:</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>其实就是在打表法上多加了一层。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by daniel on 2017/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ali2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] isNotPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isNotPrime[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; i * j &lt;= n; j++) &#123;</span><br><span class="line">                isNotPrime[i * j] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isNotPrime[i]) &#123;</span><br><span class="line">                nums[i] = <span class="number">1</span>;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// will tle</span></span><br><span class="line"><span class="comment">//            for (int j = i - 1; j &gt;= 2; j--) &#123;</span></span><br><span class="line"><span class="comment">//                if (i % j == 0) &#123;</span></span><br><span class="line"><span class="comment">//                    nums[i] = nums[j] + 1;</span></span><br><span class="line"><span class="comment">//                    ans += nums[i];</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    nums[i] = nums[i / j] + <span class="number">1</span>;</span><br><span class="line">                    ans += nums[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一题&quot;&gt;&lt;a href=&quot;#第一题&quot; class=&quot;headerlink&quot; title=&quot;第一题&quot;&gt;&lt;/a&gt;第一题&lt;/h3&gt;&lt;figure class=&quot;highlight mathematica&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;一年一度的阿里运动会又要开始了，同学们终于有一天可以离开鼠标键盘显示器，全身心的投入到各种体育项目中。UED设计师小红虽然没有参加体育项目，但她的责任重大，因为她是拉拉队的队长，她需要在每个项目中为参赛的同学们加油助威。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为运动会的项目众多，很多项目在在同一时间会同时进行着。作为拉拉队长，小红需要遵守以下规则：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能同时给多个体育项目加油助威&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给每个体育项目加油的时长必须超过项目时长的一半，每个体育项目只能加油一次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;体育项目的开始和结束时间都是整点，如果项目进行到一半想要离开，也只能选择整点离开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不考虑往返于各个体育项目比赛场地中花费的时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请帮小红设计一个算法，在已知所有体育项目日程的前提下，计算是否能在每个体育项目中为参赛的同学们加油。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果体育项目时长为&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;，超过时长的一半为&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果体育项目时长为&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;，超过时长的一半为&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果体育项目时长为&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;，超过时长的一半为&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;编译器版本: Java &lt;span class=&quot;number&quot;&gt;1.8&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;_66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请使用标准输入输出(System.in, System.out)；已禁用图形、文件、网络、系统相关的操作，如java.lang.Process , javax.swing.JFrame , Runtime.getRuntime；不要自定义包名称，否则会报错，即不要添加package answer之类的语句；您可以写很多个类，但是必须有一个类名为Main，并且为public属性，并且Main为唯一的public class，Main类的里面必须包含一个名字为&lt;span class=&quot;string&quot;&gt;&#39;main&#39;&lt;/span&gt;的静态方法（函数），这个方法是程序的入口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;时间限制: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;S (&lt;span class=&quot;keyword&quot;&gt;C&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;C&lt;/span&gt;++以外的语言为: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; S)   内存限制: &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;M (&lt;span class=&quot;keyword&quot;&gt;C&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;C&lt;/span&gt;++以外的语言为: &lt;span class=&quot;number&quot;&gt;576&lt;/span&gt; M)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入包括&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;行 第一行输入一个整数&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;= &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; &amp;lt;= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;，表示今天要参加多少个讨论会 后续&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;行，每行输入开始和结束时间，均为整数，用空格分隔，&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt;= startTime &amp;lt; endTime &amp;lt;= &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出包括一行 如果小红能够参加全部讨论会，返回&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 如果小红不能够参加全部讨论会，返回&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入范例:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出范例:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;代码运行全部通过！ 耗时: &lt;span class=&quot;number&quot;&gt;470&lt;/span&gt;ms, 内存: &lt;span class=&quot;number&quot;&gt;24168&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;K&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法" scheme="https://purewhite.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://purewhite.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://purewhite.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>【转】如何用各种编程语言杀死一条龙</title>
    <link href="https://purewhite.io/2017/04/27/how-to-kill-a-dragon-use-different-languages/"/>
    <id>https://purewhite.io/2017/04/27/how-to-kill-a-dragon-use-different-languages/</id>
    <published>2017-04-27T02:15:51.000Z</published>
    <updated>2019-03-18T06:14:04.969Z</updated>
    
    <content type="html"><![CDATA[<p>这篇有趣的文章编译自一篇西班牙博客。</p><p>有一位美丽的公主，被关押在一个城堡中最高的塔上，一条凶恶的巨龙看守着她，需要有一位勇士营救她……</p><a id="more"></a><p>下面是各种语言如何想办法将公主从巨龙手中营救出来的。</p><blockquote><p>Java - 赶到那里，找到巨龙，开发出一套由多个功能层组成的恶龙歼灭框架，写几篇关于这种框架的文章…但巨龙并没有被消灭掉。</p></blockquote><blockquote><p>.NET - 赶到哪里，看到了Java程序员的做法，完全拷贝过来，试图去杀掉巨龙，但巨龙把他吃掉了。</p></blockquote><blockquote><p>C - 赶到那里，对巨龙不屑一顾，举起剑，砍掉巨龙的头，找到公主…把公主晾在一边，去看看有没有最新提交的linux内核代码。</p></blockquote><blockquote><p>C++ - 先打造出一根针，然后在上面添加各种功能特征，直到最后汇聚成一把复杂的剑，这把剑复杂到只有他能理解其中的功能…杀死龙，但他过桥时遇到了麻烦，因为内存溢出了。</p></blockquote><blockquote><p>COBOL - 赶到那里，看到巨龙，认为自己太老了，杀不死这条巨龙，营救不出公主，于是离开了。</p></blockquote><blockquote><p>Pascal - 他花10年时间开发出一套巨龙歼灭系统…当战斗开始时，他发现这套系统只能关住蜥蜴。</p></blockquote><blockquote><p>VB - 使用各种组件开发出一套巨龙毁灭武器，他跳到巨龙的后面，在最关键的时刻，他发现这种武器只能在雨夜里工作…</p></blockquote><blockquote><p>PL/SQL - 分析其它屠龙者的数据，创建出具有多维数据、n向关系的数据表模型、OLAP，花15年时间分析这些数据…当结果出来时，公主已经变成了同性恋者。</p></blockquote><blockquote><p>Ruby - 盛大出征，号称自己不管做什么都是最强的，当面对巨龙，他亮出了一张画有他杀死一条瘸腿的巨龙的图片…巨龙懒洋洋的吃掉了他。</p></blockquote><blockquote><p>Smalltalk - 赶到那里，分析巨龙和公主，转身走了，它们是次要问题。</p></blockquote><blockquote><p>shell - 创造一个超级强大的灭龙武器…但当面对龙的时刻，他忘了如何使用它。</p></blockquote><blockquote><p>Assembler - 他认为他的方法是正确的，而且是最高效的…但他把D写成了A，杀死了公主。</p></blockquote><blockquote><p>Fortran - 赶到那里，开发出来一套4万5千行的解决方案，杀死巨龙，与公主见了面…但公主认为他是懦夫，反而倾心于高富帅的Java程序员。</p></blockquote><blockquote><p>FOX PRO - 开发出一套杀龙系统。外表看起来华丽好用，但实际内部到处补丁，所以，当开始运行这套杀龙武器时，他才发现忘了给DBF加索引。</p></blockquote><blockquote><p>Lisp - 这是一位著名的游侠骑士，在跟很多的屠龙专家交谈后，将他们的技巧模型化，他开发出这套系统，当开始运行系统时，他认识到，他少写了一个括弧。</p></blockquote><blockquote><p>HTML - 用各种著名的杀龙的剑拼装成一个网页，但他忽视了W3C标准。在跟龙相遇的时刻，他发现他的代码跟浏览器不兼容，于是他变成了赤手空拳。巨龙把他当成小甜点吃了。</p></blockquote><blockquote><p>Prolog - 他认为需要有一件杀龙的武器。于是在一个有182014件武器的目录里搜索。截止到公主死的那一年，他的成就包括：通晓了各种武器的制造方法，从索引A开始：Atomic Bombs, Anti-Air Weapons, Arches, Ammunition, Axes…</p></blockquote><blockquote><p>PHP - 开发出一个web网页，当这个运行时，它能通过一个Apache服务器从一个MySQL武器数据库里检索出武器消灭掉$dragon。然而，他在DELETE语句里忘了写WHERE语句，于是杀死了公主，巨龙，女侍，女巫，魔法师，和程序员自己。</p></blockquote><blockquote><p>JavaScript - 他创建了脚本网页，当网页运行时，脚本会除掉巨龙，他一加载页面，一些美丽的少女就向他抛来了鲜花，发出来尖叫。不幸的是，他没有认真分析这个类似蜥蜴的怪物——也被称作Mozilla，他得到的只是让控制台里填满了error信息，《Book of Mozilla》记载了他是如何被吞掉的。</p></blockquote><blockquote><p>Basic - 他开发出来一种能够杀死纸龙的武器，但不论他如何改进，他发现，他都不能杀死一只比卷毛狮子狗大的龙。</p></blockquote><blockquote><p>Matlab - 他写出循环语句能计算出用巨箭射死巨龙的弹道。这个程序运行的完美无瑕疵。现在需要的是人能有这样大的力量按这种精度发射这支巨箭。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇有趣的文章编译自一篇西班牙博客。&lt;/p&gt;
&lt;p&gt;有一位美丽的公主，被关押在一个城堡中最高的塔上，一条凶恶的巨龙看守着她，需要有一位勇士营救她……&lt;/p&gt;
    
    </summary>
    
      <category term="好玩的" scheme="https://purewhite.io/categories/%E5%A5%BD%E7%8E%A9%E7%9A%84/"/>
    
    
      <category term="随笔" scheme="https://purewhite.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="好玩的" scheme="https://purewhite.io/tags/%E5%A5%BD%E7%8E%A9%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>操作系统——生产者消费者问题</title>
    <link href="https://purewhite.io/2017/04/27/os-consumers-and-producers/"/>
    <id>https://purewhite.io/2017/04/27/os-consumers-and-producers/</id>
    <published>2017-04-27T01:13:15.000Z</published>
    <updated>2019-03-18T06:14:07.037Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目标：用信号量机制解决生产者消费者问题"><a href="#目标：用信号量机制解决生产者消费者问题" class="headerlink" title="目标：用信号量机制解决生产者消费者问题"></a>目标：用信号量机制解决生产者消费者问题</h4><p>生产者消费者问题是操作系统和多线程的很常见的也很经典的一个问题，描述大致如下：生产者生产资料，消费者消费资料。如果说资料过多，那么生产者等待；如果说资料过少，那么消费者等待。</p><p>这么说可能不太清楚，我们可以这样去理解：有一个包子店，顾客（消费者）在门口排队买包子，新鲜的包子又在源源不断地从蒸笼（生产者）里面蒸熟供购买。如果说包子不够了，那么顾客就需要排队等候（消费者等待）；如果说包子太多了放不下了，那么就不能继续蒸了，要等会儿了（生产者等待）。</p><a id="more"></a><p>用java实现的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by daniel on 2017/3/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition NotFull = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition NotEmpty = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ProducerConsumer producerConsumer = <span class="keyword">new</span> ProducerConsumer();</span><br><span class="line">        <span class="keyword">new</span> Thread(producerConsumer.new Producer()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(producerConsumer.new Consumer()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(producerConsumer.new Producer()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(producerConsumer.new Consumer()).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(producerConsumer.new Producer()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(producerConsumer.new Consumer()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(producerConsumer.new Producer()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(producerConsumer.new Consumer()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Integer FULL = <span class="number">20</span>;</span><br><span class="line">                    <span class="keyword">while</span> (count.equals(FULL)) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            NotFull.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">"生产者生产，目前总共有"</span> + count);</span><br><span class="line">                    NotEmpty.signal();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            NotEmpty.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">"消费者消费，目前总共有"</span> + count);</span><br><span class="line">                    NotFull.signal();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">3</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">4</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">5</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">6</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">7</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">6</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">5</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">4</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">3</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">0</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">0</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">3</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">0</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">3</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">4</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">5</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">4</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">5</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">6</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">7</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">8</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">9</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">10</span></span><br><span class="line">Thread<span class="number">-6</span>生产者生产，目前总共有<span class="number">11</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">12</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">13</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">14</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">15</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">14</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">13</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">12</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">11</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">10</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">9</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">8</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">7</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">6</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">7</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">8</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">9</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">10</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">11</span></span><br><span class="line">Thread<span class="number">-2</span>生产者生产，目前总共有<span class="number">12</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">11</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">10</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">9</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">8</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">7</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">6</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">5</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">4</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">3</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">0</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-0</span>生产者生产，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">3</span></span><br><span class="line">Thread<span class="number">-3</span>消费者消费，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">3</span></span><br><span class="line">Thread<span class="number">-5</span>消费者消费，目前总共有<span class="number">2</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">0</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-7</span>消费者消费，目前总共有<span class="number">0</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">0</span></span><br><span class="line">Thread<span class="number">-4</span>生产者生产，目前总共有<span class="number">1</span></span><br><span class="line">Thread<span class="number">-1</span>消费者消费，目前总共有<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;目标：用信号量机制解决生产者消费者问题&quot;&gt;&lt;a href=&quot;#目标：用信号量机制解决生产者消费者问题&quot; class=&quot;headerlink&quot; title=&quot;目标：用信号量机制解决生产者消费者问题&quot;&gt;&lt;/a&gt;目标：用信号量机制解决生产者消费者问题&lt;/h4&gt;&lt;p&gt;生产者消费者问题是操作系统和多线程的很常见的也很经典的一个问题，描述大致如下：生产者生产资料，消费者消费资料。如果说资料过多，那么生产者等待；如果说资料过少，那么消费者等待。&lt;/p&gt;
&lt;p&gt;这么说可能不太清楚，我们可以这样去理解：有一个包子店，顾客（消费者）在门口排队买包子，新鲜的包子又在源源不断地从蒸笼（生产者）里面蒸熟供购买。如果说包子不够了，那么顾客就需要排队等候（消费者等待）；如果说包子太多了放不下了，那么就不能继续蒸了，要等会儿了（生产者等待）。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://purewhite.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://purewhite.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="算法和数据结构" scheme="https://purewhite.io/tags/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>挖坑已久的博客终于搞定了</title>
    <link href="https://purewhite.io/2017/04/27/first/"/>
    <id>https://purewhite.io/2017/04/27/first/</id>
    <published>2017-04-27T00:31:20.000Z</published>
    <updated>2019-03-18T06:14:03.994Z</updated>
    
    <content type="html"><![CDATA[<p>​    其实吧，想写博客已经很久了，之前也用Django写了一个，虽然后端有很多的优化，加了很多的功能和缓存之类的，但是由于本人是前端渣 + 设计渣，所以博客一直被吐槽不能看……</p><p>​    昨天听了<a href="https://github.com/dyc87112" target="_blank" rel="noopener">@DD翟永超</a> 大神的建议，尝试使用hexo搞了一下，发现这玩意真的容易，比我自己写的不知道高到哪里去了，所以最终决定弃坑，重新用hexo和theme-next搭一个出来。</p><a id="more"></a><p>​    然后通宵撸了一遍hexo官方文档和next官方文档，又去把这个域名的备案搞了搞，总算是现在有了一个雏形了。</p><p>​    在这里再次感谢一下<a href="https://github.com/dyc87112" target="_blank" rel="noopener">@DD翟永超</a> 大神！</p><p>​    以后会多发一些文章，希望大家多多关注。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    其实吧，想写博客已经很久了，之前也用Django写了一个，虽然后端有很多的优化，加了很多的功能和缓存之类的，但是由于本人是前端渣 + 设计渣，所以博客一直被吐槽不能看……&lt;/p&gt;
&lt;p&gt;​    昨天听了&lt;a href=&quot;https://github.com/dyc87112&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@DD翟永超&lt;/a&gt; 大神的建议，尝试使用hexo搞了一下，发现这玩意真的容易，比我自己写的不知道高到哪里去了，所以最终决定弃坑，重新用hexo和theme-next搭一个出来。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://purewhite.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://purewhite.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心得" scheme="https://purewhite.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
</feed>
